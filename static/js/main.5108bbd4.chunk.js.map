{"version":3,"sources":["business/asm/operand.js","business/asm/instruction.js","business/asm/operations/operationsManager.js","utils.js","components/control/Control.module.css","components/memoryViewer/MemoryViewer.module.css","components/program/Program.module.css","components/console/Console.module.css","components/registers/Registers.module.css","components/symbolTable/SymbolTable.module.css","components/assembled/Assembled.module.css","components/window/Window.module.css","business/asm/pseudoInstructionConversions/pseudoManager.js","business/asm/architectureManager.js","business/asm/architecture.js","business/asm/simulator/memory.js","business/asm/simulator/memoryStorage16.js","business/asm/simulator/registerBank.js","business/asm/pseudoInstructionConversions/pseudoConverter.js","business/asm/disassembler/disassembler.js","business/asm/assembler/instructionParser.js","business/asm/assembler/dataParser.js","business/asm/assembler/commentParser.js","business/asm/assembler/lineParser.js","business/asm/assembler/assembler.js","components/window/Window.module.js","components/home/Home.module.js","business/asm/asmErrors.js","business/asm/simulator/simulation.js","components/home/Home.module.css","components/simulator/Simulator.module.css","components/simulator/Simulator.module.js","components/registers/Registers.module.js","components/program/Program.module.js","components/symbolTable/SymbolTable.module.js","components/console/Console.module.js","components/assembled/Assembled.module.js","components/memoryViewer/MemoryViewer.module.js","components/app/App.module.css","assets/images/AssembleIcon.svg","assets/images/ResetIcon.svg","assets/images/StepIcon.svg","components/control/Control.module.js","business/asm/operations sync /basic/.+/.js$","business/asm/operations/basic/adc.js","business/asm/operations/basic/add.js","business/asm/operations/basic/and.js","business/asm/operations/basic/asr.js","business/asm/operations/basic/bez.js","business/asm/operations/basic/bnz.js","business/asm/operations/basic/ldb.js","business/asm/operations/basic/ldc.js","business/asm/operations/basic/ldr.js","business/asm/operations/basic/ldw.js","business/asm/operations/basic/lsr.js","business/asm/operations/basic/or.js","business/asm/operations/basic/ror.js","business/asm/operations/basic/sbc.js","business/asm/operations/basic/slt.js","business/asm/operations/basic/sltu.js","business/asm/operations/basic/stb.js","business/asm/operations/basic/stw.js","business/asm/operations/basic/sub.js","business/asm/operations/basic/xor.js","business/asm/operations sync /pseudo/.+/.js$","business/asm/operations/pseudo/hcf.js","business/asm/operations/pseudo/ldi.js","business/asm/operations/pseudo/lsl.js","business/asm/operations/pseudo/pop.js","business/asm/operations/pseudo/push.js","business/asm/pseudoInstructionConversions sync /pseudos/.+/.js$","business/asm/pseudoInstructionConversions/pseudos/_large_immediate.js","business/asm/pseudoInstructionConversions/pseudos/asr.js","business/asm/pseudoInstructionConversions/pseudos/bez.js","business/asm/pseudoInstructionConversions/pseudos/bnz.js","business/asm/pseudoInstructionConversions/pseudos/hcf.js","business/asm/pseudoInstructionConversions/pseudos/ldb.js","business/asm/pseudoInstructionConversions/pseudos/ldi.js","business/asm/pseudoInstructionConversions/pseudos/ldw.js","business/asm/pseudoInstructionConversions/pseudos/lsl.js","business/asm/pseudoInstructionConversions/pseudos/lsr.js","business/asm/pseudoInstructionConversions/pseudos/pop.js","business/asm/pseudoInstructionConversions/pseudos/push.js","business/asm/pseudoInstructionConversions/pseudos/ror.js","business/asm/pseudoInstructionConversions/pseudos/stb.js","business/asm/pseudoInstructionConversions/pseudos/stw.js","components/app/App.module.js","index.js","business/asm/index.js"],"names":["Operand","value","type","this","byteRange","REGISTER","SYMBOL","LITERAL","Instruction","operation","operands","getType","isPseudo","TYPE_R","supportR","TYPE_I","supportI","length","architecture","Error","getName","opcode","getOpcode","finalCode","getRegisterCode","getValue","rst","immediate","utils","signedToUnsigned","simulation","rsa","rsb","executeR","executeI","map","operand","signedNumberToHex","join","code","rstCode","unsignedToSigned","getRegisterNameByCode","TypeError","operationsManager","getOperationByOpcode","rsaCode","rsbCode","basicOps","pseudoOps","basicOpsByOpcode","basicOpsByName","pseudoOpsByName","basicOpsNames","pseudoOpsNames","opsNames","getOperationByName","name","setup","basicMs","require","keys","key","default","pseudoMs","Object","fromEntries","op","concat","getOperationNames","getBasicOperationByName","getPseudoOperationByName","isOperationName","isBasicOperationName","isPseudoOperationName","number","byteWidth","mask","Math","pow","toString","padStart","isNegative","numberToBytes","bytes","i","unshift","bytesToNumber","byte","isInteger","str","isNaN","parseInt","sleep","ms","Promise","resolve","setTimeout","callLimiter","func","delay","thId","lastArgs","args","module","exports","pseudos","pseudoManager","pseudosMs","getPseudoInstructions","_16","_32","Architecture","bitWidth","registers","registersByName","entries","registerName","register","aliases","aliasName","reduce","a","b","registersNameByCode","hasRegisterName","architectureManager","getViking16Arch","getViking32Arch","Memory","storage","result","reset","emit","getDataLength","getBytesFromRange","getWordsFromRange","address","onReadByte","newValue","readByte","onReadWord","readWord","onWriteByte","writeByte","word","onWriteWord","writeWord","getBitWidth","MemoryStorage16","EventEmitter","data","Array","fill","byte0","byte1","start","end","slice","words","push","RegisterBank","registerInfos","registerByteWidth","forEach","setValue","oldValue","archRegisters","getRegisters","getByteWidth","PseudoConverter","instruction","instructions","getNonPseudoInstructions","convInstruction","convInstructions","convert","splice","Disassembler","rawHex","arrayLiteral","match","x","pc","disassemble","exc","InstructionParser","parseOperation","parseOperands","isArray","operationName","operandValue","isRegisterName","operandsValues","split","trim","getInstructionOperandValueType","DataParser","parseToBytes","bytesToData","values","lastC","startIndex","capturingQuote","c","unraw","substring","extractValues","charCodeAt","trimmed","splitted","some","curBytes","j","CommentParser","isComment","comment","matches","LineParser","instructionParser","dataParser","commentParser","symbol","rest","line","getSymbolAndRest","sanitizedRest","parse","isInstruction","Assembler","programData","pseudoConverter","lines","sequence","symbolTable","objectCodeArray","pass1","pass2","pass3","rawObjectCode","lineParser","parsed","console","error","message","getOperands","symbolValue","finalValue","getByteRange","min","max","setType","item","Number","assemble","Window","props","containerRef","createRef","description","state","width","current","style","height","className","styles","container","ref","header","title","content","children","Component","Home","instance","keyIndex","windowsContainerRef","aboutRef","windows","spawnWindow","remove","comp","window","setState","windowsContainer","aboutContainer","href","onClick","closeAbout","bind","SimulationError","SimulationNeedInputError","defaultBreakpointHandler","Simulation","memory","registerBank","codeExecutionMaxPC","runId","running","ended","stopping","waitingInput","stepInterval","cycles","inputBytes","breakpointHandler","setupMemoryHandlers","stop","carry","setPC","setCycles","resetInput","writeObjCodeMemory","setWaitingInput","readInputChar","readInputInt","String","fromCharCode","getNextInputByte","zeroCharCode","nineCharCode","minusCharCode","isMinusChar","isNumberChar","charToNumber","int","firstC","rawObjCode","wordArray","execute","incrementPC","incrementCycles","timePerBlock","toExecFloat","toExec","floor","Date","now","step","sleepTime","clearTimeout","runner","shift","isWaitingInput","run","getMask","getPC","handler","Simulator","programRef","assembledRef","symbolTableRef","registersRef","controlRef","consoleRef","curArchitecture","createFromArchitecture","stepDelay","simulationOnRunErrorHandler","writeLine","simulationOnRunEndedHandler","simulationOnBreakpointHandler","simulationWriteCharHandler","char","write","simulationWriteIntHandler","simulationPcUpdateHandler","setCurrentPC","simulationInBufHandler","inputBuffer","setInputBuffer","simulationCyclesUpdateHandler","simulationWaitingInputHandler","setInputAlert","setBreakpointHandler","_","hasBreakpoint","on","loadAsmCode","off","log","localStorage","getItem","loadSaved","loadDefault","text","buffer","Buffer","from","addInput","getText","pseudoInstructions","assemblerResult","disassemblerResult","disassembly","setRawObjCode","setAssembled","setSymbolTable","isRunning","hasEnded","curText","getAutoAssemble","lastText","setStepInterval","setItem","asmCode","setText","display","flexDirection","flex","overflow","onSaveRequest","save","onLoadSavedRequest","onLoadDefaultRequest","rightArea","justifyContent","onAssemble","onRun","onPause","pause","onStep","onReset","onStepIntervalChanged","onInput","Registers","getRegisterInfos","valueUpdateHandler","generalRegisterList","infos","Register","getUValue","pcRegister","registerContainer","alreadyCreatedLang","Program","infosRef","onChange","regNames","getRegisterNames","monaco","languages","id","setMonarchTokensProvider","operationKeywords","registerKeywords","decimalNumbers","hexNumbers","escapes","tokenizer","root","cases","token","bracket","next","string","registerCompletionItemProvider","provideCompletionItems","suggestions","opName","label","detail","documentation","kind","CompletionItemKind","Function","insertText","editor","defineTheme","base","inherit","rules","foreground","getModel","onDidChangeContent","initText","saveBindHandler","addCommand","KeyMod","CtrlCmd","KeyCode","KEY_S","fullRange","getFullModelRange","executeEdits","range","textContent","setInfos","titleContainer","btn","language","theme","beforeMount","onEditorWillMount","onMount","onEditorMount","SymbolTable","columns","field","headerName","rows","newRows","symbolName","assign","gridContainer","classes","getRowClassName","row","getCellClassName","cell","disableDensitySelector","disableColumnMenu","disableColumnSelector","hideFooter","hideFooterPagination","hideFooterRowCount","hideFooterSelectedRowCount","showCellRightBorder","showColumnRightBorder","headerHeight","density","GridDensityTypes","Compact","Console","inputRef","outputRef","inputAlert","focus","scrollTop","scrollHeight","e","toLowerCase","target","outAndInBufContainer","output","readOnly","spellCheck","alertsOutline","inputText","placeholder","onKeyDown","inputKeyDown","Assembled","breakpointDecorations","pcBreakpoints","Set","curLineRunningDecorationId","curLineRunningDecoration","has","removeBreakpoint","setBreakpoint","lineNumber","lineCount","getLineCount","add","bpDec","deltaDecorations","Range","options","isWholeLine","glyphMarginClassName","breakpoint","delete","pcs","removeAllBreakpoints","linesCount","newBreakpointPCs","filter","setBreakpoints","currentLineRunning","revealLine","oldDec","self","updateOptions","wordBasedSuggestions","automaticLayout","lineDecorationsWidth","glyphMargin","minimap","enabled","lineNumbers","n","onMouseDown","position","toggleBreakpoint","MemoryViewer","tbodyRef","memoryScrollRef","memoryScrollAuxRef","memoryAreaRef","rowsToShow","dataItemBytes","rowOffset","wordHighlightContexts","dataCount","getDataCount","setScrollHeight","getData","recreateTable","onwheel","deltaY","preventDefault","onscroll","getBoundingClientRect","onResetHandler","onStorageWriteByteHandler","dataOffset","updateByteAt","onStorageWriteWordHandler","tbyteDiv","getByteElem","highlightByte","offset","column","childNodes","elem","ctx","setInterval","clearInterval","rowsCount","ceil","html","memoryColumnNumber","_x","y","memoryRowNumber","memDataHtml","memoryData","innerHTML","memoryScroll","memoryAreaContainer","memoryArea","_g","_excluded","_extends","arguments","source","prototype","hasOwnProperty","call","apply","_objectWithoutProperties","excluded","sourceKeys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","SvgAssembleIcon","_ref","svgRef","titleId","xmlns","viewBox","preserveAspectRatio","transform","d","ForwardRef","SvgResetIcon","SvgStepIcon","Control","onAutoAssembleChanged","autoAssemble","checked","cycleArea","cycleLabel","autoAssembleChanged","margin","btnList","assembleClick","btnLaterals","runClick","stopClick","stepClick","resetClick","delayLabel","delayInput","stepIntervalChanged","onKeyUp","webpackContext","req","webpackContextResolve","__webpack_require__","o","adc","getRegisterBank","getCarry","and","asr","setCarry","bez","bnz","ldb","getMemory","ldc","ldr","ldw","lsr","or","ror","getArchitecture","sbc","slt","sltu","stb","stw","sub","xor","hcf","ldi","lsl","pop","supportedOpNames","operationLdi","_large_immediate","getOperation","literal","operationAsr","operationBez","operationBnz","operationHcf","operationLdb","operationLdr","operationLdc","setByteRange","operationLdw","operationLsl","operationAdd","operationLsr","operationPop","operationPush","operationSub","operationStw","operationRor","operationStb","App","basename","exact","path","component","ReactDOM","render","StrictMode","document","getElementById","assembler","disassembler","memoryStorage16"],"mappings":"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","file":"static/js/main.5108bbd4.chunk.js","sourcesContent":["export default class Operand {\r\n    static REGISTER = 'register';\r\n    static SYMBOL = 'symbol';\r\n    static LITERAL = 'literal';\r\n\r\n    constructor(value, type) {\r\n        this.value = value;\r\n        this.type = type;\r\n        this.byteRange = null;\r\n    }\r\n\r\n    setByteRange(byteRange) {\r\n        this.byteRange = byteRange;\r\n        return this;\r\n    }\r\n\r\n    setValue(value) {\r\n        this.value = value;\r\n        return this;\r\n    }\r\n    \r\n    setType(type) {\r\n        this.type = type;\r\n        return this;\r\n    }\r\n\r\n    getValue() {\r\n        return this.value;\r\n    }\r\n    \r\n    getType() {\r\n        return this.type;\r\n    }\r\n\r\n    getByteRange() {\r\n        return this.byteRange;\r\n    }\r\n}","import operationsManager from './operations/operationsManager';\r\nimport Operand from './operand';\r\nimport utils from '../../utils';\r\n\r\nclass Instruction {\r\n    static TYPE_R = 'R';\r\n    static TYPE_I = 'I';\r\n    \r\n    static disassemble(code, architecture) {\r\n        let imm = (code >> 11) & 0b1;    \r\n        if (imm === 1) {\r\n            let opcode = code & 0b1111000000000000;     // 1111 0000 0000 0000\r\n            let rstCode = (code >> 8) & 0b111;          //      0111 0000 0000\r\n            let immediate = code & 0b11111111;          //           1111 1111\r\n            immediate = utils.unsignedToSigned(immediate, 1);\r\n            \r\n            let rst = architecture.getRegisterNameByCode(rstCode);\r\n            \r\n            if (!rst) throw new TypeError('rst doesnt exist');\r\n    \r\n            let operation = operationsManager.getOperationByOpcode(opcode);\r\n            if (!operation) throw new TypeError('operation doesnt exist');\r\n    \r\n            let operands = [\r\n                new Operand(rst, Operand.REGISTER),\r\n                new Operand(immediate, Operand.LITERAL),\r\n            ];\r\n            \r\n            return new Instruction(operation, operands);\r\n        } else {\r\n            let opcode = code & 0b1111000000000011;     // 1111 0000 0000 0011\r\n            let rstCode = (code >> 8) & 0b111;          //      0111 0000 0000\r\n            let rsaCode = (code >> 5) & 0b111;          //           1110 0000\r\n            let rsbCode = (code >> 2) & 0b111;          //              1 1100\r\n    \r\n            let rst = architecture.getRegisterNameByCode(rstCode);\r\n            let rsa = architecture.getRegisterNameByCode(rsaCode);\r\n            let rsb = architecture.getRegisterNameByCode(rsbCode);\r\n            if (!rst) throw new TypeError('rst doesnt exist');\r\n            if (!rsa) throw new TypeError('rsa doesnt exist');\r\n            if (!rsb) throw new TypeError('rsb doesnt exist');\r\n    \r\n            let operation = operationsManager.getOperationByOpcode(opcode);\r\n            if (!operation) throw new TypeError('operation doesnt exist');\r\n    \r\n            let operands = [\r\n                new Operand(rst, Operand.REGISTER),\r\n                new Operand(rsa, Operand.REGISTER),\r\n                new Operand(rsb, Operand.REGISTER),\r\n            ];\r\n    \r\n            return new Instruction(operation, operands);\r\n        }\r\n    }\r\n\r\n    constructor(operation, operands) {\r\n        this.operation = operation;\r\n        this.operands = operands;\r\n    }\r\n    \r\n    isPseudo() {\r\n        let type = this.getType();\r\n        if (type === null) return true;\r\n        if (this.operation === null) return true;\r\n        if (this.operation.isPseudo()) return true;\r\n        switch (type) {\r\n            case Instruction.TYPE_R:\r\n                if (!this.operation.supportR()) {\r\n                    return true;\r\n                } else {\r\n                    break;\r\n                }\r\n            case Instruction.TYPE_I:\r\n                if (!this.operation.supportI()) {\r\n                    return true;\r\n                } else {\r\n                    break;\r\n                }\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n\r\n    getType() {\r\n        if (this.operands.length === 2 && \r\n            this.operands[0].getType() === Operand.REGISTER &&\r\n            this.operands[1].getType() === Operand.LITERAL) return Instruction.TYPE_I;\r\n        if (this.operands.length === 3 && \r\n            this.operands[0].getType() === Operand.REGISTER &&\r\n            this.operands[1].getType() === Operand.REGISTER &&\r\n            this.operands[2].getType() === Operand.REGISTER) return Instruction.TYPE_R;\r\n        return null;\r\n    }\r\n\r\n    assemble(architecture) {\r\n        if (!this.operation) throw new Error('Operation doesnt exists');\r\n        if (this.operation.getName() === 'hcf') return 0x0003;\r\n        if (this.operation.isPseudo()) throw new Error('Operation is pseudo-operation');\r\n        if (!this.operands) throw new Error('Operands doesnt exists');\r\n\r\n        let type = this.getType();\r\n        if (!type) throw new Error('Invalid instruction type');\r\n\r\n        let opcode = this.operation.getOpcode();\r\n        if (!type) throw new Error('Operation doesnt have opcode');\r\n\r\n        let finalCode = 0x0000;\r\n        switch (type) {\r\n            case Instruction.TYPE_R: {\r\n                let rst = architecture.getRegisterCode(this.operands[0].getValue());\r\n                let rsa = architecture.getRegisterCode(this.operands[1].getValue());\r\n                let rsb = architecture.getRegisterCode(this.operands[2].getValue());\r\n                finalCode |= opcode;    // operation code\r\n                finalCode |= 0 << 11;   // imm\r\n                finalCode |= rst << 8;\r\n                finalCode |= rsa << 5;\r\n                finalCode |= rsb << 2;\r\n                break;\r\n            }\r\n            case Instruction.TYPE_I: {\r\n                let rst = architecture.getRegisterCode(this.operands[0].getValue());\r\n                let immediate = this.operands[1].getValue();\r\n                immediate = utils.signedToUnsigned(immediate, 1);\r\n\r\n                finalCode |= opcode;    // operation code\r\n                finalCode |= 1 << 11;   // imm\r\n                finalCode |= rst << 8;\r\n                finalCode |= immediate;\r\n                break;\r\n            }\r\n            default:\r\n        }\r\n        return finalCode;\r\n    }\r\n\r\n    getOperation() {\r\n        return this.operation;\r\n    }\r\n    \r\n    getOperands() {\r\n        return this.operands;\r\n    }\r\n\r\n    execute(simulation) {\r\n        if (!this.operation) throw new Error('Instruction has no operation');\r\n\r\n        let type = this.getType();\r\n        if (!type) throw new Error('Invalid instruction type');\r\n\r\n        switch (type) {\r\n            case Instruction.TYPE_R: {\r\n                let rst = this.operands[0].getValue();\r\n                let rsa = this.operands[1].getValue();\r\n                let rsb = this.operands[2].getValue();\r\n                \r\n                if (typeof this.operation.executeR === 'function') {\r\n                    this.operation.executeR(simulation, rst, rsa, rsb);\r\n                } else {\r\n                    throw new Error('The operation \"' + this.operation.getName() + '\" doesnt support type R');\r\n                }\r\n                break;\r\n            }\r\n            case Instruction.TYPE_I: {\r\n                let rst = this.operands[0].getValue();\r\n                let immediate = this.operands[1].getValue();\r\n                \r\n                if (typeof this.operation.executeI === 'function') {\r\n                    this.operation.executeI(simulation, rst, immediate);\r\n                } else {\r\n                    throw new Error('The operation \"' + this.operation.getName() + '\" doesnt support type I');\r\n                }\r\n                break;\r\n            }\r\n            default:\r\n        }\r\n    }\r\n\r\n    toString() {\r\n        return this.operation.getName() + ' ' + this.operands.map(operand => {\r\n            let value = operand.getValue();\r\n            if (operand.getType() === Operand.LITERAL) {\r\n                value = '0x'+utils.signedNumberToHex(value, 1);\r\n            }\r\n            return value;\r\n        }).join(',');\r\n    }\r\n}\r\n\r\nexport default Instruction;","\r\nlet basicOps = [];\r\nlet pseudoOps = [];\r\nlet basicOpsByOpcode = {};\r\nlet basicOpsByName = {};\r\nlet pseudoOpsByName = {};\r\nlet basicOpsNames = [];\r\nlet pseudoOpsNames = [];\r\nlet opsNames = [];\r\n\r\nfunction setup() {\r\n    const basicMs = require.context('./', true, /basic\\/.+\\.js$/);\r\n    basicOps = basicMs.keys().map(key => basicMs(key, true).default);\r\n    const pseudoMs = require.context('./', true, /pseudo\\/.+\\.js$/);\r\n    pseudoOps = pseudoMs.keys().map(key => pseudoMs(key, true).default);\r\n\r\n    basicOpsByOpcode = Object.fromEntries(\r\n        basicOps.map(op => [\r\n            op.getOpcode(), // key\r\n            op              // value\r\n        ])\r\n    );\r\n\r\n    basicOpsByName = Object.fromEntries(\r\n        basicOps.map(op => [\r\n            op.getName(),   // key\r\n            op              // value\r\n        ])\r\n    );\r\n    pseudoOpsByName = Object.fromEntries(\r\n        pseudoOps.map(op => [\r\n            op.getName(),   // key\r\n            op              // value\r\n        ])\r\n    );\r\n\r\n    basicOpsNames = Object.keys(basicOpsByName);\r\n    pseudoOpsNames = Object.keys(pseudoOpsByName);\r\n    opsNames = basicOpsNames.concat(pseudoOpsNames);\r\n}\r\n\r\nfunction getOperationNames() {\r\n    return opsNames;\r\n}\r\n\r\nfunction getOperationByName(name) {\r\n    return basicOpsByName[name] || pseudoOpsByName[name];\r\n}\r\n\r\nfunction getBasicOperationByName(name) {\r\n    return basicOpsByName[name];\r\n}\r\n\r\nfunction getPseudoOperationByName(name) {\r\n    return pseudoOpsByName[name];\r\n}\r\n\r\nfunction isOperationName(name) {\r\n    return getOperationByName(name) != null;\r\n}\r\n\r\nfunction isBasicOperationName(name) {\r\n    return basicOpsByName[name] != null;\r\n}\r\n\r\nfunction isPseudoOperationName(name) {\r\n    return pseudoOpsByName[name] != null;\r\n}\r\n\r\nfunction getOperationByOpcode(opcode) {\r\n    return basicOpsByOpcode[opcode];\r\n}\r\n\r\nconst operationsManager = {\r\n    setup,\r\n    getOperationNames,\r\n    getOperationByName,\r\n    getBasicOperationByName,\r\n    getPseudoOperationByName,\r\n    isOperationName,\r\n    isBasicOperationName,\r\n    isPseudoOperationName,\r\n    getOperationByOpcode,\r\n};\r\n\r\nexport default operationsManager;","\r\nfunction callLimiter(func, delay) {\r\n  let thId = null;\r\n  let lastArgs = null;\r\n  return (...args) => {\r\n    lastArgs = args;\r\n    if (thId == null) {\r\n      thId = setTimeout(() => {\r\n        func(...lastArgs);\r\n        thId = null;\r\n      }, delay);\r\n    }\r\n  }\r\n}\r\n\r\nfunction signedNumberToHex(number, byteWidth=4) {\r\n  return signedToUnsigned(number, byteWidth).toString(16).padStart(byteWidth * 2, '0');\r\n}\r\n\r\nfunction signedToUnsigned(number, byteWidth=2) {\r\n  let mask = Math.pow(2, byteWidth * 8) - 1;\r\n  return (((number >>> 0) & mask) >>> 0);\r\n}\r\n\r\nfunction unsignedToSigned(number, byteWidth=2) {\r\nlet mask = Math.pow(2, byteWidth * 8) - 1;\r\nlet isNegative = (number >> (byteWidth * 8 - 1)) & 1;\r\nif (isNegative) {\r\n  return -(((~number+1) & mask) >>> 0);\r\n} else {\r\n  return number & mask;\r\n}\r\n}\r\n\r\nfunction numberToBytes(number, byteWidth=2) {\r\n  let bytes = [];\r\n  for (let i = 0; i < byteWidth; i++) {\r\n      bytes.unshift(number & 0xff);\r\n      number >>= 8;\r\n  }\r\n  return bytes;\r\n}\r\n\r\nfunction bytesToNumber(bytes) {\r\n  let number = 0;\r\n  for (let byte of bytes) {\r\n      number <<= 8;\r\n      number |= byte;\r\n  }\r\n  return number;\r\n}\r\n\r\nfunction isInteger(str) {\r\n  return !isNaN(parseInt(str));\r\n}\r\n\r\nfunction sleep(ms) {\r\n  if (ms <= 0) return 0;\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nconst utils = {\r\n  signedNumberToHex,\r\n  signedToUnsigned,\r\n  unsignedToSigned,\r\n  numberToBytes,\r\n  bytesToNumber,\r\n  isInteger,\r\n  sleep,\r\n  callLimiter,\r\n};\r\n\r\nexport default utils;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Control_container__Day7V\",\"content\":\"Control_content__3iIfu\",\"title\":\"Control_title__Fct6q\",\"cycleArea\":\"Control_cycleArea__3W0Sp\",\"cycleLabel\":\"Control_cycleLabel__o6-yf\",\"btnList\":\"Control_btnList__pjvFr\",\"btn\":\"Control_btn__S6MpS\",\"btnLaterals\":\"Control_btnLaterals__g4gVg\",\"delayLabel\":\"Control_delayLabel__1Cctf\",\"delayInput\":\"Control_delayInput__lHshL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"MemoryViewer_container__36x1j\",\"content\":\"MemoryViewer_content__5lhVs\",\"memoryScroll\":\"MemoryViewer_memoryScroll__ejajI\",\"memoryAreaContainer\":\"MemoryViewer_memoryAreaContainer__31uQe\",\"memoryArea\":\"MemoryViewer_memoryArea__1TCDi\",\"memoryData\":\"MemoryViewer_memoryData__2-C4U\",\"memoryRowNumber\":\"MemoryViewer_memoryRowNumber__3Fx2o\",\"memoryColumnNumber\":\"MemoryViewer_memoryColumnNumber__c5w2Q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Program_container__ptnOO\",\"titleContainer\":\"Program_titleContainer__2wA5L\",\"infos\":\"Program_infos__3FvD7\",\"blink-green\":\"Program_blink-green__2vqx9\",\"btn\":\"Program_btn__2C8NB\",\"editor\":\"Program_editor__3d99c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Console_container__3nKjQ\",\"output\":\"Console_output__3CcGx\",\"inputBuffer\":\"Console_inputBuffer__2jMXE\",\"outAndInBufContainer\":\"Console_outAndInBufContainer__ZSkiW\",\"alertsOutline\":\"Console_alertsOutline__3cNKE\",\"blink\":\"Console_blink__25EME\",\"title\":\"Console_title__2sfHt\",\"inputText\":\"Console_inputText__rkhPv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Registers_container__2s4UW\",\"title\":\"Registers_title__1C9vy\",\"content\":\"Registers_content__3IXg7\",\"generalRegisterList\":\"Registers_generalRegisterList__FB2qd\",\"pcRegister\":\"Registers_pcRegister__3EfW7\",\"registerContainer\":\"Registers_registerContainer__3HYMJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"SymbolTable_container__-A6je\",\"title\":\"SymbolTable_title__1Uqqp\",\"gridContainer\":\"SymbolTable_gridContainer__1AJgG\",\"row\":\"SymbolTable_row__3egus\",\"cell\":\"SymbolTable_cell__fWKNX\",\"root\":\"SymbolTable_root__2PCcv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Assembled_container__1jNx0\",\"editor\":\"Assembled_editor__3jQwh\",\"title\":\"Assembled_title__kk-F7\",\"breakpoint\":\"Assembled_breakpoint__2cdAw\",\"currentLineRunning\":\"Assembled_currentLineRunning__eYaaP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Window_container__3JkxK\",\"header\":\"Window_header__ygOBE\",\"title\":\"Window_title__2aHbv\",\"description\":\"Window_description__1NaN6\",\"content\":\"Window_content__3bL7I\"};","let pseudos = [];\r\n\r\nfunction setup() {\r\n    const pseudosMs = require.context('./', true, /pseudos\\/.+\\.js$/);\r\n    pseudos = pseudosMs.keys().map(key => pseudosMs(key, true).default);\r\n}\r\n\r\nfunction getPseudoInstructions() {\r\n    return pseudos;\r\n}\r\n\r\nconst pseudoManager = {\r\n    setup,\r\n    getPseudoInstructions,\r\n};\r\n\r\nexport default pseudoManager;","import Architecture from './architecture';\r\n\r\nlet _16;\r\nlet _32;\r\n\r\nfunction setup() {\r\n    _16 = new Architecture({\r\n        bitWidth: 16,\r\n        registers: {\r\n            'r0': { code: 0, aliases: [ 'at' ] },\r\n            'r1': { code: 1, aliases: [] },\r\n            'r2': { code: 2, aliases: [] },\r\n            'r3': { code: 3, aliases: [] },\r\n            'r4': { code: 4, aliases: [] },\r\n            'r5': { code: 5, aliases: [ 'sr' ] },\r\n            'r6': { code: 6, aliases: [ 'lr' ] },\r\n            'r7': { code: 7, aliases: [ 'sp' ] },\r\n        },\r\n    });\r\n    _32 = new Architecture({\r\n        bitWidth: 32,\r\n        registers: {\r\n            'r0': { code: 0, aliases: [ 'at' ] },\r\n            'r1': { code: 1, aliases: [] },\r\n            'r2': { code: 2, aliases: [] },\r\n            'r3': { code: 3, aliases: [] },\r\n            'r4': { code: 4, aliases: [] },\r\n            'r5': { code: 5, aliases: [ 'sr' ] },\r\n            'r6': { code: 6, aliases: [ 'lr' ] },\r\n            'r7': { code: 7, aliases: [ 'sp' ] },\r\n        },\r\n    });\r\n}\r\n\r\nfunction getViking16Arch() {\r\n    return _16;\r\n}\r\n\r\nfunction getViking32Arch() {\r\n    return _32;\r\n}\r\n\r\nconst architectureManager = {\r\n    setup,\r\n    getViking16Arch,\r\n    getViking32Arch,\r\n};\r\n\r\nexport default architectureManager;","export default class Architecture {\r\n    constructor({ bitWidth, registers }) {\r\n        this.bitWidth = bitWidth;\r\n        this.byteWidth = bitWidth / 8;\r\n        this.mask = Math.pow(2, bitWidth) - 1;\r\n\r\n        this.registers = registers;\r\n\r\n        this.registersByName = Object.fromEntries(\r\n            Object.entries(registers)\r\n            .map(([registerName, register]) => [\r\n                [\r\n                    registerName,   // key      registerName\r\n                    register,       // value    register\r\n                ],\r\n                ...register.aliases.map(aliasName => [\r\n                        aliasName,  // key      registerName\r\n                        register,   // value    register\r\n                    ]\r\n                )\r\n            ])\r\n            .reduce((a, b) => a.concat(b))\r\n        );\r\n        this.registersNameByCode = Object.fromEntries(\r\n            Object.entries(registers)\r\n            .map(([registerName, register]) => [\r\n                [\r\n                    register.code,  // key      registerName\r\n                    registerName,   // value    register\r\n                ],\r\n            ])\r\n            .reduce((a, b) => a.concat(b))\r\n        );\r\n    }\r\n\r\n    getMask() {\r\n        return this.mask;\r\n    }\r\n\r\n    getBitWidth() {\r\n        return this.bitWidth;\r\n    }\r\n\r\n    getByteWidth() {\r\n        return this.byteWidth;\r\n    }\r\n\r\n    hasRegisterName(name) {\r\n        return this.registersByName[name] != null;\r\n    }\r\n\r\n    getRegisterNames() {\r\n        return Object.keys(this.registersByName);\r\n    }\r\n\r\n    getRegisters() {\r\n        return this.registers;\r\n    }\r\n\r\n    getRegisterNameByCode(code) {\r\n        return this.registersNameByCode[code];\r\n    }\r\n\r\n    getRegisterCode(name) {\r\n        if (!this.hasRegisterName(name)) throw new Error('Register doesnt exists');\r\n        return this.registersByName[name].code;\r\n    }\r\n}","import { EventEmitter } from 'events';\r\nimport MemoryStorage16 from './memoryStorage16';\r\n\r\nclass Memory extends EventEmitter {\r\n    static createFromArchitecture (architecture, ...args) {\r\n        let bitWidth = architecture.getBitWidth();\r\n        let storage;\r\n        switch (bitWidth) {\r\n            case 16:\r\n                storage = new MemoryStorage16();\r\n                break;\r\n            /*case 32:\r\n                storage = new MemoryStorage16();\r\n                break;*/\r\n            default:\r\n                throw new Error('Memory for this architecture doesnt exists (implementation doesnt exists)');\r\n        }\r\n        return new Memory(storage);\r\n    }\r\n\r\n    constructor(storage) {\r\n        super();\r\n        this.storage = storage;\r\n    }\r\n\r\n    reset(...args) {\r\n        let result = this.storage.reset(...args);\r\n        this.emit('reset');\r\n        return result;\r\n    }\r\n    \r\n    getDataLength(...args) {\r\n        return this.storage.getDataLength(...args);\r\n    }\r\n    \r\n    getBytesFromRange(...args) {\r\n        return this.storage.getBytesFromRange(...args);\r\n    }\r\n    \r\n    getWordsFromRange(...args) {\r\n        return this.storage.getWordsFromRange(...args);\r\n    }\r\n    \r\n    readByte(address) {\r\n        if (this.onReadByte) {\r\n            let newValue = this.onReadByte(address);\r\n            if (newValue != null) {\r\n                return newValue;\r\n            }\r\n        }\r\n        let result = this.storage.readByte(address);\r\n        this.emit('storage read byte', address);\r\n        return result;\r\n    }\r\n    \r\n    readWord(address) {\r\n        if (this.onReadWord) {\r\n            let newValue = this.onReadWord(address);\r\n            if (newValue != null) {\r\n                return newValue;\r\n            }\r\n        }\r\n        let result = this.storage.readWord(address);\r\n        this.emit('storage read word', address);\r\n        return result;\r\n    }\r\n\r\n    writeByte(address, byte) {\r\n        if (this.onWriteByte) {\r\n            if (!this.onWriteByte(address, byte)) {\r\n                return false;\r\n            }\r\n        }\r\n        let result = this.storage.writeByte(address, byte);\r\n        this.emit('storage write byte', address, byte);\r\n        return result;\r\n    }\r\n    \r\n    writeWord(address, word) {\r\n        if (this.onWriteWord) {\r\n            if(!this.onWriteWord(address, word)) {\r\n                return false;\r\n            }\r\n        }\r\n        let result = this.storage.writeWord(address, word);\r\n        this.emit('storage write word', address, word);\r\n        return result;\r\n    }\r\n}\r\n\r\nexport default Memory;","export default class MemoryStorage16 {\r\n    constructor() {\r\n        this.data = new Array(0xFFFF + 1).fill(0);\r\n    }\r\n\r\n    reset() {\r\n        for (let i = 0; i < this.data.length; i++) {\r\n            this.data[i] = 0;\r\n        }\r\n    }\r\n\r\n    readByte(address) {\r\n        return this.data[address];\r\n    }\r\n\r\n    readWord(address) {\r\n        let byte0 = this.data[address];\r\n        let byte1 = this.data[address+1];\r\n        return (byte0 << 8) | byte1;\r\n    }\r\n\r\n    writeByte(address, byte) {\r\n        this.data[address] = byte & 0xFF;\r\n    }\r\n\r\n    writeWord(address, word) {\r\n        let byte0 = (word >> 8) & 0xFF;\r\n        let byte1 = word & 0xFF;\r\n        this.data[address] = byte0;\r\n        this.data[address+1] = byte1;\r\n    }\r\n\r\n    getDataLength() {\r\n        return this.data.length;\r\n    }\r\n\r\n    getData() {\r\n        return this.data;\r\n    }\r\n\r\n    getBytesFromRange(start, end) {\r\n        return this.data.slice(start, end);\r\n    }\r\n    \r\n    getWordsFromRange(start, end) {\r\n        let byte0;\r\n        let words = [];\r\n        for (let i = start; i < end; i++) {\r\n            if (i % 2 === 0) {\r\n                byte0 = this.data[i];\r\n            } else {\r\n                let byte1 = this.data[i];\r\n                let word = (byte0 << 8) | byte1;\r\n                words.push(word);\r\n            }\r\n        }\r\n        return words;\r\n    }\r\n}","import { EventEmitter } from 'events';\r\nimport utils from '../../../utils';\r\n\r\nexport default class RegisterBank extends EventEmitter {\r\n\r\n    static createFromArchitecture (architecture, ...args) {\r\n        let archRegisters = architecture.getRegisters();\r\n        return new RegisterBank(archRegisters, architecture.getByteWidth(), ...args);\r\n    }\r\n\r\n    constructor (registerInfos, registerByteWidth) {\r\n        super();\r\n        this.registerInfos = registerInfos;\r\n        this.registerByteWidth = registerByteWidth;\r\n        this.setup();\r\n    }\r\n\r\n    getRegisterInfos() {\r\n        return this.registerInfos;\r\n    }\r\n\r\n    getRegisterInfo(name) {\r\n        return this.registerInfos[name];\r\n    }\r\n\r\n    setup() {\r\n        this.mask = Math.pow(2, 8 * this.registerByteWidth) - 1;\r\n\r\n        this.registers = {};\r\n        for (let registerName in this.registerInfos) {\r\n            let registerInfo = this.registerInfos[registerName];\r\n            let { aliases } = registerInfo;\r\n\r\n            let register = {\r\n                name: registerName,\r\n                aliases,\r\n                value: 0,\r\n            };\r\n            \r\n            this.registers[registerName] = register;\r\n            aliases.forEach(aliasName => this.registers[aliasName] = register);\r\n        }\r\n    }\r\n\r\n    reset() {\r\n        for (let registerName in this.registers) {\r\n            this.setValue(registerName, 0);\r\n        }\r\n    }\r\n\r\n    setValue(registerName, newValue) {\r\n        newValue = (newValue & this.mask) >>> 0;\r\n        let register = this.registers[registerName];\r\n        let oldValue = register.value;\r\n        register.value = newValue;\r\n        this.emit('value update', { registerName: register.name, oldValue, newValue });\r\n    }\r\n\r\n    getValue(registerName) {\r\n        return utils.unsignedToSigned(this.registers[registerName].value, this.registerByteWidth);\r\n    }\r\n    \r\n    getUValue(registerName) {\r\n        return this.registers[registerName].value;\r\n    }\r\n}","\r\nexport default class PseudoConverter {\r\n    constructor(pseudos) {\r\n        this.pseudos = pseudos;\r\n    }\r\n\r\n    convert(instruction, architecture) {\r\n        for (let pseudo of this.pseudos) {\r\n            let instructions = pseudo.getNonPseudoInstructions(instruction, architecture);\r\n            if (instructions.length > 0) {\r\n                for (let i = 0; i < instructions.length; i++) {\r\n                    let convInstruction = instructions[i];\r\n                    let convInstructions = this.convert(convInstruction, architecture);\r\n\r\n                    if (convInstructions.length > 0) {\r\n                        instructions.splice(i, 1, ...convInstructions);\r\n                    }\r\n                }\r\n                return instructions;\r\n            }\r\n        }\r\n        return [];\r\n    }\r\n}","import Instruction from '../instruction';\r\n\r\nclass Disassembler {\r\n    constructor(architecture) {\r\n        this.architecture = architecture;\r\n    }\r\n\r\n    disassemble(rawHex) {\r\n        if (rawHex.length === 0) return [];\r\n\r\n        let result = [];\r\n        let arrayLiteral = rawHex\r\n            .match(/.{1,4}/g)\r\n            .map(x => parseInt(x, 16));\r\n        \r\n        let pc = 0;\r\n        for (let code of arrayLiteral) {\r\n            let instruction;\r\n            try {\r\n                instruction = Instruction.disassemble(code, this.architecture);\r\n            } catch (exc) { }\r\n\r\n            let value = instruction ? instruction.toString() : '????';\r\n\r\n            result.push({\r\n                instruction,\r\n                value,\r\n                pc,\r\n                code,\r\n            });\r\n\r\n            pc += 2;\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\nexport default Disassembler;","import operationsManager from '../operations/operationsManager';\r\nimport Instruction from '../instruction';\r\nimport Operand from '../operand';\r\nimport utils from '../../../utils';\r\n\r\nexport default class InstructionParser {\r\n\r\n    constructor(architecture) {\r\n        this.architecture = architecture;\r\n    }\r\n\r\n    isInstruction(str) {\r\n        try {\r\n            let operation = this.parseOperation(str);\r\n            return operation != null;\r\n        } catch (exc) {\r\n            return false;\r\n        }\r\n    }\r\n    \r\n    parse(str) {\r\n        // parse operation & operands\r\n        let operation = this.parseOperation(str);\r\n        let operands = this.parseOperands(str);\r\n\r\n        let instruction = new Instruction(operation, operands);\r\n        return instruction;\r\n    }\r\n    \r\n\r\n    // detect if str is register\r\n    isRegisterName(str) {\r\n        return this.architecture.hasRegisterName(str);\r\n    }\r\n\r\n    // detect if str is operation\r\n    isOperationName(str) {\r\n        return operationsManager.isOperationName(str);\r\n    }\r\n\r\n    // parse operation\r\n    parseOperation(str) {\r\n        let match = str.match(/^(\\w*)[\\t ]*/);\r\n        if (!Array.isArray(match) || match.length < 2) throw new TypeError('Cant parse to operation');\r\n\r\n        let operationName = match[1];\r\n        if (!this.isOperationName(operationName)) throw new TypeError('\"' + operationName + '\" isnt operation');\r\n        \r\n        let operation = operationsManager.getOperationByName(operationName);\r\n        if (!operation) throw new Error('Operation with name \"' + operationName + '\" not found');\r\n\r\n        return operation;\r\n    }\r\n\r\n    // detect type of operand value\r\n    getInstructionOperandValueType(operandValue) {\r\n        if (typeof operandValue !== 'string') return null;\r\n        if (operandValue.length === 0) return null;\r\n\r\n        if (this.isRegisterName(operandValue)) return 'register';\r\n        if (utils.isInteger(operandValue)) return 'literal';\r\n        return 'symbol';\r\n    }\r\n    \r\n    // parse operands\r\n    parseOperands(str) {\r\n        let operands = [];\r\n\r\n        let match = str.match(/^\\w+[ \\t]+(.+)/);\r\n        if (Array.isArray(match) && match.length >= 2) {\r\n            let operandsStr = match[1];\r\n            let operandsValues = operandsStr.split(/[\\t ]*,[\\t ]*/);\r\n            for (let value of operandsValues) {\r\n                value = value.trim();\r\n                let type = this.getInstructionOperandValueType(value);\r\n                if (type === null) {\r\n                    throw new Error('Operand \"' + value + '\" cant be parsed');\r\n                }\r\n                if (type === Operand.LITERAL) {\r\n                    value = parseInt(value);\r\n                }\r\n                operands.push(new Operand(value, type));\r\n            }\r\n        }\r\n        \r\n        return operands;\r\n    }\r\n}","import { unraw } from 'unraw';\r\nimport utils from '../../../utils';\r\n\r\nexport default class DataParser {\r\n    constructor(architecture) {\r\n        this.architecture = architecture;\r\n    }\r\n\r\n    parse(str) {\r\n        let byteWidth = this.architecture.getByteWidth();\r\n        let bytes = this.parseToBytes(str, byteWidth);\r\n        let data = this.bytesToData(bytes, byteWidth);\r\n        return data;\r\n    }\r\n\r\n    parseToBytes(str, byteWidth) {\r\n        let bytes = [];\r\n        let values = extractValues(str);\r\n        for (let { type, value } of values) {\r\n            switch (type) {\r\n                case 'text':\r\n                    for (let i = 0; i < value.length; i++) {\r\n                        bytes.push(value.charCodeAt(i));\r\n                    }\r\n                    bytes.push(0);\r\n                    break;\r\n                case 'others':\r\n                    let trimmed = value.trim();\r\n                    if (trimmed.length <= 0) break;\r\n\r\n                    let splitted = trimmed.split(/(?:[?: \\t]+)|,/);\r\n                    if (splitted.some(x => !utils.isInteger(x))) throw new TypeError('Data contains a non-literal');\r\n                    bytes.push( ...splitted.reduce( (a, b) => a.concat(utils.numberToBytes(parseInt(b), byteWidth)), [] ) );\r\n                    break;\r\n                default:\r\n            }\r\n        }\r\n        return bytes;\r\n    }\r\n\r\n    bytesToData(bytes, byteWidth) {\r\n        let data = [];\r\n        for (let i = 0; i < bytes.length; i += byteWidth) {\r\n            let curBytes = new Array(byteWidth).fill(0);\r\n            for (let j = 0; j < byteWidth; j++) {\r\n                let byte = bytes[i + j];\r\n                curBytes[j] = byte ? byte : 0;\r\n            }\r\n            data.push(utils.bytesToNumber(curBytes));\r\n        }\r\n        return data;\r\n    }\r\n}\r\n\r\nfunction extractValues(str) {\r\n    let lastC;\r\n    let startIndex = 0;\r\n    let capturingQuote = false;\r\n\r\n    let values = [];\r\n    for (let i = 0; i < str.length; i++) {\r\n        let c = str[i];\r\n\r\n        if ((c === '\"' && lastC !== '\\\\')) {            \r\n            if (capturingQuote) {\r\n                if (startIndex !== i) values.push({\r\n                    type: 'text',\r\n                    value: unraw(str.substring(startIndex, i)),\r\n                });\r\n                capturingQuote = false;\r\n                startIndex = i + 1;\r\n            } else {\r\n                capturingQuote = true;\r\n                if (startIndex !== i) values.push({\r\n                    type: 'others',\r\n                    value: str.substring(startIndex, i),\r\n                });\r\n                startIndex = i + 1;\r\n            }\r\n        }\r\n        lastC = c;\r\n    }\r\n    if (startIndex !== str.length) values.push({\r\n        type: 'others',\r\n        value: str.substring(startIndex, str.length),\r\n    });\r\n    return values;\r\n}","export default class CommentParser {\r\n    parse(str) {\r\n        let result = {\r\n            isComment: false,\r\n            comment: null,\r\n        };\r\n        let matches = str.match(/^[ \\t]*;|(?:\\/\\/)(.*)/);\r\n        if (Array.isArray(matches) && matches.length === 2) {\r\n            result.isComment = true;\r\n            result.comment = matches[1];\r\n        }\r\n        return result;\r\n    }\r\n};","export default class LineParser {\r\n\r\n    constructor(instructionParser, dataParser, commentParser) {\r\n        this.instructionParser = instructionParser;\r\n        this.dataParser = dataParser;\r\n        this.commentParser = commentParser;\r\n    }\r\n\r\n    getSymbolAndRest(str) {\r\n        let symbol;\r\n        let rest;\r\n\r\n        let match = str.match(/^(\\w*)[\\t ]*(.*)/);\r\n        if (Array.isArray(match) && match.length >= 3) {\r\n            if (this.instructionParser.isOperationName(match[1])) {\r\n                symbol = null;\r\n                rest = match[1] + ' ' + match[2];\r\n            } else {\r\n                symbol = match[1];\r\n                rest = match[2];\r\n                if (symbol.length === 0) symbol = null;\r\n            }\r\n        } else {\r\n            throw new Error('Cant parse line to symbol and rest');\r\n        }\r\n        \r\n        return { symbol, rest };\r\n    }\r\n\r\n    parse(line) {\r\n        let { symbol, rest } = this.getSymbolAndRest(line);\r\n        let sanitizedRest = rest.trim();\r\n\r\n        let instruction = null;\r\n        let data = null;\r\n        let { isComment, comment } = this.commentParser.parse(rest);\r\n\r\n        if (!isComment) {\r\n            if (sanitizedRest.length > 0) {\r\n                if (this.instructionParser.isInstruction(sanitizedRest)) {\r\n                    instruction = this.instructionParser.parse(sanitizedRest);\r\n                } else {\r\n                    data = this.dataParser.parse(sanitizedRest);\r\n                }\r\n            }\r\n        }\r\n\r\n        return { isComment, comment, symbol, instruction, data };\r\n    }\r\n}","import Operand from '../operand';\r\nimport InstructionParser from './instructionParser';\r\nimport DataParser from './dataParser';\r\nimport CommentParser from './commentParser';\r\nimport LineParser from './lineParser';\r\nimport utils from '../../../utils';\r\n\r\nclass Assembler {\r\n    constructor(architecture, programData, pseudoConverter) {\r\n        this.architecture = architecture;\r\n        this.programData = programData;\r\n        this.pseudoConverter = pseudoConverter;\r\n        \r\n        this.lines = this.programData.split('\\n');\r\n        \r\n        this.sequence = [];\r\n        this.symbolTable = {};\r\n        this.objectCodeArray = [];\r\n        this.instructions = [];\r\n    }\r\n\r\n    assemble() {\r\n        this.pass1();\r\n        this.pass2();\r\n        this.pass3();\r\n        \r\n        return {\r\n            rawObjectCode: this.rawObjectCode,\r\n            objectCodeArray: this.objectCodeArray,\r\n            symbolTable: this.symbolTable,\r\n            instructions: this.instructions,\r\n        };\r\n    }\r\n\r\n    // Process instructions, pseudo-instructions, symbols.\r\n    // Doesnt substitute symbols in instructions.\r\n    pass1() {\r\n        let pc = 0;\r\n\r\n        let instructionParser = new InstructionParser(this.architecture);\r\n        let dataParser = new DataParser(this.architecture);\r\n        let commentParser = new CommentParser();\r\n        let lineParser = new LineParser(instructionParser, dataParser, commentParser);\r\n\r\n        for (let i = 0; i < this.lines.length; i++) {\r\n            let line = this.lines[i];\r\n\r\n            let parsed;\r\n            try {\r\n                parsed = lineParser.parse(line);\r\n            } catch (exc) {\r\n                console.error(exc);\r\n                throw new Error('Cant parse line ' + (i+1) + ' \"' + line.trim() + '\": ' + exc.message);\r\n            }\r\n            let { isComment, symbol, instruction, data } = parsed;\r\n\r\n            if (isComment) continue;\r\n\r\n            if (symbol) {\r\n                this.symbolTable[symbol] = pc;\r\n            }\r\n            if (data) {\r\n                this.sequence.push(...data);\r\n                pc += 2 * data.length;\r\n            }\r\n            if (instruction) {\r\n                // process pseudo instructions\r\n                if (instruction.isPseudo()) {\r\n                    let convInstructions = this.pseudoConverter.convert(instruction, this.architecture);\r\n                    if (convInstructions != null && convInstructions.length > 0) {\r\n                        this.instructions.push(...convInstructions);\r\n                        this.sequence.push(...convInstructions);\r\n                        pc += 2 * convInstructions.length;\r\n                    } else {\r\n                        throw new Error('The pseudo instruction on line ' + (i+1) + ' \"' + line.trim() + '\" doesnt exist');\r\n                    }\r\n                } else {\r\n                    this.instructions.push(instruction);\r\n                    this.sequence.push(instruction);\r\n                    pc += 2;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Substitute symbols with their values\r\n    pass2() {\r\n        for (let instruction of this.instructions) {\r\n            let operands = instruction.getOperands();\r\n            for (let operand of operands) {\r\n                if (operand.getType() === Operand.SYMBOL) {\r\n                    let symbolValue = this.symbolTable[operand.getValue()];\r\n                    if (symbolValue == null) throw new Error('The symbol \"' + operand.getValue() + '\" doesnt exist');\r\n                    let finalValue = 0;\r\n                    for (let i = operand.getByteRange().min; i <= operand.getByteRange().max; i++) {\r\n                        finalValue <<= 2;\r\n                        finalValue |= (symbolValue >> (this.architecture.getBitWidth() - (8 * (i + 1)))) & 0xFF;\r\n                    }\r\n                    operand.setType(Operand.LITERAL);\r\n                    operand.setValue(finalValue);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Assemble object code\r\n    pass3() {\r\n        // Assemble\r\n        for (let item of this.sequence) {     \r\n            if (Number.isInteger(item)) {\r\n                this.objectCodeArray.push(item);\r\n            } else {\r\n                this.objectCodeArray.push(item.assemble(this.architecture));\r\n            }\r\n        }\r\n        \r\n        this.rawObjectCode = this.objectCodeArray\r\n            .map(x => utils.signedNumberToHex(x, 2))\r\n            .join('');\r\n    }\r\n};\r\n\r\nexport default Assembler;","import { Component, createRef } from \"react\";\r\nimport styles from './Window.module.css'\r\n\r\nclass Window extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.containerRef = createRef();\r\n\r\n    this.name = props.name || \"Window\";\r\n    this.description = props.description || \"This is a window!\";\r\n    this.props = props;\r\n\r\n    this.state = {  }\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.props.width) this.containerRef.current.style.width = this.props.width;\r\n    if (this.props.height) this.containerRef.current.style.height = this.props.height;\r\n  }\r\n  \r\n  render() { \r\n    return (\r\n      <div className={styles.container} ref={this.containerRef}>\r\n        <div className={styles.header}>\r\n          <div className={styles.title}>{this.name}</div>-<div className={styles.description}>{this.description}</div>\r\n        </div>\r\n        <div className={styles.content}>\r\n          {this.props.children}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n \r\nexport default Window;","import styles from './Home.module.css'\r\nimport Simulator from \"../simulator/Simulator.module\";\r\nimport Window from '../window/Window.module';\r\nimport React, { Component, createRef } from 'react';\r\n\r\nclass Home extends Component {  \r\n  constructor(props) {\r\n    super(props);\r\n    Home.instance = this;\r\n    this.keyIndex = 0;\r\n    this.windowsContainerRef = createRef();\r\n    this.aboutRef = createRef();\r\n    this.state = { };\r\n\r\n    this.windows = [];\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.spawnWindow('Simulator', 'Viking CPU Simulator', 980, 710, <Simulator />)\r\n  }\r\n\r\n  closeAbout() {\r\n    this.aboutRef.current.remove();\r\n  }\r\n\r\n  spawnWindow(name, description, width, height, comp) {\r\n    let window = <Window key={this.keyIndex++} name={name} description={description} width={width + 'px'} height={height + 'px'}>{comp}</Window>;\r\n    this.windows.push(window);\r\n    this.setState({});\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={styles.container}>\r\n        <div className={styles.windowsContainer} ref={this.windowsContainerRef}>\r\n          { this.windows }\r\n        </div>\r\n        <div className={styles.aboutContainer} ref={this.aboutRef}>\r\n          <div>Developed by <a href=\"https://github.com/vanflux\">vanflux</a></div>\r\n          <div>Viking architecture by <a href=\"https://github.com/sjohann81\">sjohann81</a></div>\r\n          <div>Repo Link: <a href=\"https://github.com/vanflux/viking-sim-web\">viking-sim-web</a></div>\r\n          <button onClick={this.closeAbout.bind(this)}>Close This Pop-up</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n \r\nexport default Home;","export class AsmError extends Error {\r\n  constructor(message) {\r\n    super(message);\r\n    this.name = \"AsmError\";\r\n  }\r\n}\r\n\r\nexport class SimulationError extends AsmError {\r\n  constructor(message) {\r\n    super(message);\r\n    this.name = \"SimulationError\";\r\n  }\r\n}\r\n\r\nexport class SimulationNeedInputError extends SimulationError {\r\n  constructor(message) {\r\n    super(message);\r\n    this.name = \"SimulationNeedInputError\";\r\n  }\r\n}","import { EventEmitter } from 'events';\r\nimport utils from '../../../utils';\r\nimport { SimulationError, SimulationNeedInputError } from '../asmErrors';\r\nimport Instruction from '../instruction';\r\n\r\nconst endSimulationCode = 0x0003;\r\nconst defaultBreakpointHandler = (simulation, pc) => false;\r\n\r\nexport default class Simulation extends EventEmitter {\r\n    constructor(architecture, memory, registerBank) {\r\n        super();\r\n\r\n        this.architecture = architecture;\r\n        this.memory = memory;\r\n        this.registerBank = registerBank;\r\n        this.codeExecutionMaxPC = 0;\r\n        this.runId = null;\r\n        this.running = false;\r\n        this.ended = false;\r\n        this.stopping = false;\r\n        this.waitingInput = false;\r\n        this.stepInterval = 50;\r\n        this.cycles = 0;\r\n        this.pc = 0;\r\n        this.inputBytes = [];\r\n\r\n        this.breakpointHandler = defaultBreakpointHandler;\r\n        this.setupMemoryHandlers();\r\n    }\r\n\r\n    reset() {\r\n        if (this.running && !this.stopping) this.stop();\r\n        this.ended = false;\r\n        this.carry = 0;\r\n        this.setPC(0);\r\n        this.setCycles(0);\r\n        this.resetInput();\r\n        this.registerBank.reset();\r\n        this.registerBank.setValue('sp', 0xdffe);\r\n        this.memory.reset();\r\n        this.writeObjCodeMemory();\r\n        this.emit('reset');\r\n    }\r\n\r\n    setupMemoryHandlers() {\r\n        this.memory.onReadWord = (address) => {\r\n            if (address < 0xe000) return; // ok\r\n\r\n            switch (address) {\r\n                case 0xf004:\r\n                    if (this.inputBytes.length < 1) {\r\n                        this.setWaitingInput(true);\r\n                        throw new SimulationNeedInputError('Input too short, need 1 byte');\r\n                    }\r\n                    return this.readInputChar();\r\n                case 0xf006:\r\n                    if (this.inputBytes.length < 2) {\r\n                        this.setWaitingInput(true);\r\n                        throw new SimulationNeedInputError('Input too short, need 2 bytes');\r\n                    }\r\n                    return this.readInputInt();\r\n                default:\r\n                    throw new SimulationError('read on unauthorized location [' + address.toString(16) + ']');\r\n            }\r\n        };\r\n        \r\n        this.memory.onWriteWord = (address, value) => {\r\n            if (address < 0xe000) return true; // ok\r\n\r\n            switch (address) {\r\n                case 0xf000:\r\n                    this.emit('console write char', String.fromCharCode(value));\r\n                    return true;\r\n                case 0xf002:\r\n                    this.emit('console write int', utils.unsignedToSigned(value));\r\n                    return true;\r\n                default:\r\n                    // write on unauthorized location\r\n                    this.emit('run error', new SimulationError('write on unauthorized location [' + address.toString(16) + '] = ' + value.toString(16)));\r\n                    this.stop();\r\n                    return false;\r\n            }\r\n        };\r\n    }\r\n\r\n    readInputChar() {\r\n        if (this.inputBytes.length === 0) throw new SimulationNeedInputError('Empty input');\r\n        let byte = this.getNextInputByte();\r\n        return byte;\r\n    }\r\n    \r\n    readInputInt() {\r\n        if (this.inputBytes.length === 0) throw new SimulationNeedInputError('Empty input');\r\n        let zeroCharCode = '0'.charCodeAt(0);\r\n        let nineCharCode = '9'.charCodeAt(0);\r\n        let minusCharCode = '-'.charCodeAt(0);\r\n\r\n        function isMinusChar(c) {\r\n            return minusCharCode === c;\r\n        }\r\n\r\n        function isNumberChar(c) {\r\n            return c >= zeroCharCode && c <= nineCharCode;\r\n        }\r\n\r\n        function charToNumber(c) {\r\n            return c - zeroCharCode;\r\n        }\r\n\r\n        let int = 0;\r\n        let firstC = this.getNextInputByte();\r\n        if (isNumberChar(firstC) || isMinusChar(firstC)) {\r\n            if (isNumberChar(firstC)) {\r\n                int = charToNumber(firstC);\r\n            }\r\n\r\n            let length = this.inputBytes.length;\r\n            for (let i = 0; i < length; i++) {\r\n                let c = this.getNextInputByte();\r\n                if (isNumberChar(c)) {\r\n                    let number = charToNumber(c);\r\n                    int *= 10;\r\n                    int += number;\r\n                } else {\r\n                    if (c === 0) {\r\n                        this.getNextInputByte();\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (isMinusChar(firstC)) {\r\n                int *= -1;\r\n            }\r\n        } else {\r\n            // lê os bytes do inputs até acabar ou até o byteWidth da arquitetura\r\n            // se o inputBytes tiver 1 byte e o byteWidth da arquitetura for 2 bytes, 16 bits, vai ler apenas 1 byte\r\n            // se o inputBytes tiver 5 bytes e o byteWidth da arquitetura for 2 bytes, vai ler apenas 2 bytes\r\n            int = firstC;\r\n            let length = Math.min(this.architecture.getByteWidth() - 1, this.inputBytes.length);\r\n            for (let i = 0; i < length; i++) {\r\n                let c = this.getNextInputByte();\r\n                this.emit('input buffer', this.inputBytes);\r\n                int = (int << 8) | c;\r\n            }\r\n        }\r\n        \r\n        return int;\r\n    }\r\n\r\n    setRawObjCode(rawObjCode) {\r\n        if (rawObjCode.length > 0xf000 * 2) throw new SimulationError('Object code too big for the memory');\r\n        this.rawObjCode = rawObjCode;\r\n    }\r\n\r\n    writeObjCodeMemory() {\r\n        if (!this.rawObjCode) return;\r\n        let wordArray = this.rawObjCode\r\n            .match(/.{1,4}/g)\r\n            .map(x => parseInt(x, 16));\r\n        for (let i = 0; i < wordArray.length; i++) {\r\n            let word = wordArray[i];\r\n            this.memory.writeWord(i*2, word);\r\n        }\r\n\r\n        this.codeExecutionMaxPC = wordArray.length * 2;\r\n    }\r\n\r\n    step() {\r\n        if (this.pc >= this.codeExecutionMaxPC) throw new SimulationError('PC run out of program bounds');\r\n\r\n        let code;\r\n\r\n        try {\r\n            code = this.memory.readWord(this.pc);\r\n        } catch (exc) {\r\n            console.error(exc);\r\n            this.emit('run error', exc);\r\n            return this.stop();\r\n        }\r\n        \r\n        if (code === endSimulationCode) {\r\n            this.ended = true;\r\n            this.emit('run ended');\r\n            return this.stop();\r\n        }\r\n\r\n        try {\r\n            let instruction = Instruction.disassemble(code, this.architecture);\r\n            instruction.execute(this);\r\n        } catch (exc) {\r\n            if (exc.name === 'SimulationNeedInputError') {\r\n                return this.stop();\r\n            }\r\n            console.error(exc);\r\n            this.emit('run error', exc);\r\n            return this.stop();\r\n        }\r\n\r\n        this.incrementPC(2);\r\n        this.incrementCycles(1);\r\n        \r\n        if (this.breakpointHandler(this, this.pc)) {\r\n            this.emit('breakpoint', this.pc);\r\n            this.stop();\r\n        }\r\n    }\r\n\r\n    async runner() {\r\n        this.emit('run started');\r\n        try {\r\n            let timePerBlock = 50;\r\n            let toExecFloat = 0;\r\n            runLoop:\r\n            while(!this.stopping) {\r\n                if (this.stepInterval > 0) {\r\n                    toExecFloat += timePerBlock / this.stepInterval;\r\n                    if (toExecFloat >= 1) {\r\n                        let toExec = Math.floor(toExecFloat);\r\n                        toExecFloat -= toExec;\r\n                        let start = Date.now();\r\n                        for (let i = 0; i < toExec; i++) {\r\n                            if (this.stopping) break runLoop;\r\n                            this.step();\r\n                        }\r\n                        let sleepTime = timePerBlock - (Date.now() - start);\r\n                        if (sleepTime > 0) await utils.sleep(sleepTime);\r\n                    } else {\r\n                        await utils.sleep(timePerBlock);\r\n                    }\r\n                } else {\r\n                    this.step();\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.error(error);\r\n            this.emit('run error', error);\r\n        }\r\n        this.running = false;\r\n        this.stopping = false;\r\n    }\r\n\r\n    stop() {\r\n        if (!this.running) throw new Error('Simulation already stopped');\r\n        if (this.stopping) throw new Error('Simulation already stopping');\r\n        this.stopping = true;\r\n        clearTimeout(this.runId);\r\n        this.runId = null;\r\n    }\r\n\r\n    run() {\r\n        if (this.running) throw new Error('Simulation already running');\r\n        if (this.stopping) throw new Error('Simulation stopping');\r\n        this.running = true;\r\n        this.stopping = false;\r\n        this.runId = setTimeout(this.runner.bind(this));\r\n    }\r\n\r\n    isWaitingInput() {\r\n        return this.waitingInput;\r\n    }\r\n\r\n    isRunning() {\r\n        return this.running;\r\n    }\r\n\r\n    isStopping() {\r\n        return this.stopping;\r\n    }\r\n\r\n    hasEnded() {\r\n        return this.ended;\r\n    }\r\n\r\n    getNextInputByte() {\r\n        let byte = this.inputBytes.shift();\r\n        this.emit('input buffer', this.inputBytes);\r\n        return byte;\r\n    }\r\n\r\n    resetInput() {\r\n        this.inputBytes.length = 0;\r\n        this.emit('input buffer', this.inputBytes);\r\n        this.setWaitingInput(false);\r\n    }\r\n\r\n    addInput(inputBytes) {\r\n        for (let byte of inputBytes) \r\n            this.inputBytes.push(byte & 0xFF);\r\n        this.emit('input buffer', this.inputBytes);\r\n        if (this.isWaitingInput()) {\r\n            this.setWaitingInput(false);\r\n            this.run();\r\n        }\r\n    }\r\n\r\n    getInput() {\r\n        return this.inputBytes;\r\n    }\r\n\r\n    getRegisterBank() {\r\n        return this.registerBank;\r\n    }\r\n\r\n    getMemory() {\r\n        return this.memory;\r\n    }\r\n\r\n    getCarry() {\r\n        return this.carry;\r\n    }\r\n\r\n    setWaitingInput(waitingInput) {\r\n        this.waitingInput = waitingInput;\r\n        this.emit('waiting input', this.waitingInput);\r\n    }\r\n\r\n    setCarry(carry) {\r\n        this.carry = carry;\r\n    }\r\n\r\n    setPC(pc) {\r\n        this.pc = (pc >>> 0) & this.architecture.getMask();\r\n        this.emit('pc update', this.pc);\r\n    }\r\n\r\n    incrementPC(value) {\r\n        this.setPC(this.getPC() + value);\r\n    }\r\n\r\n    getPC() {\r\n        return this.pc;\r\n    }\r\n    \r\n    setCycles(cycles) {\r\n        this.cycles = cycles;\r\n        this.emit('cycles update', this.cycles);\r\n    }\r\n\r\n    incrementCycles(value) {\r\n        this.cycles += value;\r\n        this.emit('cycles update', this.cycles);\r\n    }\r\n\r\n    getCycles() {\r\n        return this.cycles;\r\n    }\r\n\r\n    getArchitecture() {\r\n        return this.architecture;\r\n    }\r\n\r\n    setBreakpointHandler(handler) {\r\n        if (!handler) return this.breakpointHandler = defaultBreakpointHandler;\r\n        if (typeof handler != 'function') throw new Error('handler isnt function');\r\n        this.breakpointHandler = handler;\r\n    }\r\n\r\n    setStepInterval(ms) {\r\n        this.stepInterval = ms;\r\n    }\r\n\r\n    getStepInterval() {\r\n        return this.stepInterval;\r\n    }\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Home_container__1pCbS\",\"windowsContainer\":\"Home_windowsContainer__1a4xb\",\"aboutContainer\":\"Home_aboutContainer__31sEf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Simulator_container__1Th6t\",\"rightArea\":\"Simulator_rightArea__3sIft\"};","import styles from './Simulator.module.css'\r\nimport { Box } from \"@material-ui/core\";\r\nimport { Component, createRef } from 'react';\r\nimport Registers from '../registers/Registers.module';\r\nimport Memory from '../../business/asm/simulator/memory';\r\nimport architectureManager from '../../business/asm/architectureManager';\r\nimport RegisterBank from '../../business/asm/simulator/registerBank';\r\nimport Simulation from '../../business/asm/simulator/simulation';\r\nimport pseudoManager from '../../business/asm/pseudoInstructionConversions/pseudoManager';\r\nimport PseudoConverter from '../../business/asm/pseudoInstructionConversions/pseudoConverter';\r\nimport Assembler from '../../business/asm/assembler/assembler';\r\nimport Disassembler from '../../business/asm/disassembler/disassembler';\r\n// eslint-disable-next-line\r\nimport asm from '../../business/index';\r\nimport Program from '../program/Program.module';\r\nimport SymbolTable from '../symbolTable/SymbolTable.module';\r\nimport Control from '../control/Control.module';\r\nimport Console from '../console/Console.module';\r\nimport Assembled from '../assembled/Assembled.module';\r\nimport MemoryViewer from '../memoryViewer/MemoryViewer.module';\r\nimport Home from '../home/Home.module';\r\nimport utils from '../../utils';\r\n\r\nconst defaultProgramData =\r\n`main\r\n    ldw\tsr,writec\r\n    ldi\tr4,str\r\n    ldi\tr3,loop\r\nloop\r\n    ldb\tr2,r4\r\n    stw\tr2,sr\r\n    add\tr4,1\r\n    bnz\tr2,r3\r\n    hcf\r\n\r\nwritec\t0xf000\r\nstr\t\"hello world!\"`;\r\n\r\nclass Simulator extends Component {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.programRef = createRef();\r\n\t\tthis.assembledRef = createRef();\r\n\t\tthis.symbolTableRef = createRef();\r\n\t\tthis.registersRef = createRef();\r\n\t\tthis.controlRef = createRef();\r\n\t\tthis.consoleRef = createRef();\r\n\r\n\t\tthis.curArchitecture = architectureManager.getViking16Arch();\r\n\t\tthis.memory = Memory.createFromArchitecture(this.curArchitecture);\r\n\t\tthis.registerBank = RegisterBank.createFromArchitecture(this.curArchitecture);\r\n\t\tthis.simulation = new Simulation(this.curArchitecture, this.memory, this.registerBank);\r\n\r\n\t\tthis.state = {\r\n\t\t\tstepDelay: 50,\r\n\t\t};\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.simulationOnRunErrorHandler = (error) => {\r\n\t\t\tthis.consoleRef.current.writeLine('');\r\n\t\t\tthis.consoleRef.current.writeLine('[Error | Simulation] ' + error.message);\r\n\t\t};\r\n\t\t\r\n\t\tthis.simulationOnRunEndedHandler = () => {\r\n\t\t\tthis.consoleRef.current.writeLine('');\r\n\t\t\tthis.consoleRef.current.writeLine('[Info | Simulation] run ended.');\r\n\t\t};\r\n\t\t\r\n\t\tthis.simulationOnBreakpointHandler = (pc) => {\r\n\t\t\tthis.consoleRef.current.writeLine('');\r\n\t\t\tthis.consoleRef.current.writeLine('[Info | Simulation] breakpoint at PC=' + pc.toString(16));\r\n\t\t};\r\n\t\t\r\n\t\tthis.simulationWriteCharHandler = (char) => {\r\n\t\t\tif (char.charCodeAt(0) !== 0) {\r\n\t\t\t\tthis.consoleRef.current.write(char);\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tthis.simulationWriteIntHandler = (int) => {\r\n\t\t\tthis.consoleRef.current.write(String(int));\r\n\t\t};\r\n\t\t\r\n    this.simulationPcUpdateHandler = utils.callLimiter((pc) => {\r\n      this.assembledRef.current.setCurrentPC(pc);\r\n\t\t\tthis.registersRef.current.setPC(pc);\r\n    }, 20);\r\n\r\n\t\tthis.simulationInBufHandler = (inputBuffer) => {\r\n\t\t\tthis.consoleRef.current.setInputBuffer(inputBuffer);\r\n\t\t};\r\n\t\t\r\n    this.simulationCyclesUpdateHandler = utils.callLimiter((cycles) => {\r\n      this.controlRef.current.setCycles(cycles);\r\n    }, 50);\r\n\r\n\t\tthis.simulationWaitingInputHandler = (waitingInput) => {\r\n\t\t\tthis.consoleRef.current.setInputAlert(waitingInput);\r\n\t\t};\r\n\t\t\r\n    this.simulation.setBreakpointHandler((_, pc) => {\r\n      return this.assembledRef.current.hasBreakpoint(pc);\r\n    });\r\n\r\n\t\tthis.simulation.on('run error', this.simulationOnRunErrorHandler);\r\n\t\tthis.simulation.on('run ended', this.simulationOnRunEndedHandler);\r\n\t\tthis.simulation.on('breakpoint', this.simulationOnBreakpointHandler);\r\n\t\tthis.simulation.on('console write char', this.simulationWriteCharHandler);\r\n\t\tthis.simulation.on('console write int', this.simulationWriteIntHandler);\r\n    this.simulation.on('pc update', this.simulationPcUpdateHandler);\r\n\t\tthis.simulation.on('input buffer', this.simulationInBufHandler);\r\n    this.simulation.on('cycles update', this.simulationCyclesUpdateHandler);\r\n\t\tthis.simulation.on('waiting input', this.simulationWaitingInputHandler);\r\n\r\n\t\tthis.loadAsmCode();\r\n\t\t\r\n\t\t// Open Memory Viewer\r\n\t\tHome.instance.spawnWindow(\"MemViewer\", \"Memory Viewer\", 440, 420, <MemoryViewer memory={this.memory} />);\r\n\t}\r\n\r\n\tcomponentWillUnmount() {\r\n\t\tthis.simulation.off('run error', this.simulationOnRunErrorHandler);\r\n\t\tthis.simulation.off('run ended', this.simulationOnRunEndedHandler);\r\n\t\tthis.simulation.off('breakpoint', this.simulationOnBreakpointHandler);\r\n\t\tthis.simulation.off('console write char', this.simulationWriteCharHandler);\r\n\t\tthis.simulation.off('console write int', this.simulationWriteIntHandler);\r\n    this.simulation.off('pc update', this.simulationPcUpdateHandler);\r\n\t\tthis.simulation.off('input buffer', this.simulationInBufHandler);\r\n    this.simulation.off('cycles update', this.simulationCyclesUpdateHandler);\r\n\t\tthis.simulation.off('waiting input', this.simulationWaitingInputHandler);\r\n\t}\r\n\r\n\tloadAsmCode() {\r\n\t\tconsole.log('Load asm code');\r\n\t\tlet asmCode = localStorage.getItem('asmCode');\r\n\t\tif (asmCode) {\r\n\t\t\tthis.loadSaved();\r\n\t\t} else {\r\n\t\t\tthis.loadDefault();\r\n\t\t}\r\n\t}\r\n\r\n\tonInput(text) {\r\n\t\tlet inputBytes = new Array(text.length + 1);\r\n\t\tlet buffer = Buffer.from(text);\r\n\t\tfor (let i = 0; i < text.length; i++) {\r\n\t\t\t\tinputBytes[i] = buffer[i];\r\n\t\t}\r\n\t\t// Add \\0 byte on end\r\n\t\tinputBytes[text.length] = 0;\r\n\t\tthis.simulation.addInput(inputBytes);\r\n\t}\r\n\r\n\tassemble() {\r\n\t\tlet programData = this.programRef.current.getText();\r\n\t\ttry {\r\n\t\t\tlet pseudoInstructions = pseudoManager.getPseudoInstructions();\r\n\t\t\tlet pseudoConverter = new PseudoConverter(pseudoInstructions);\r\n\r\n\t\t\tlet assembler = new Assembler(this.curArchitecture, programData, pseudoConverter);\r\n\t\t\tlet assemblerResult = assembler.assemble();\r\n\r\n\t\t\tlet disassembler = new Disassembler(this.curArchitecture);\r\n\t\t\tlet disassemblerResult = disassembler.disassemble(assemblerResult.rawObjectCode);\r\n\r\n\t\t\tlet { symbolTable } = assemblerResult;\r\n\t\t\tlet disassembly = disassemblerResult.map(x => ({value: x.value, pc: x.pc, code: x.code}) );\r\n\r\n\t\t\tlet result = { symbolTable, disassembly };\r\n\r\n\t\t\tthis.simulation.setRawObjCode(assemblerResult.rawObjectCode);\r\n\t\t\tthis.simulation.reset();\r\n\r\n\t\t\tthis.assembledRef.current.setAssembled(result.disassembly.map(x => x.value).join('\\n'));\r\n\t\t\tthis.symbolTableRef.current.setSymbolTable(symbolTable);\r\n\t\t\tthis.consoleRef.current.writeLine('[Info | Assembler] Successfully assembled');\r\n\r\n\t\t\treturn result;\r\n\t\t} catch (exc) {\r\n\t\t\tconsole.error(exc);\r\n\t\t\tthis.consoleRef.current.writeLine('[Error | Assembler] ' + exc.message);\r\n\t\t}\r\n\t}\r\n\t\r\n\tasync run() {\r\n\t\tif (this.simulation.isRunning()) return;\r\n\t\t\r\n\t\t// If simulation is already ended -> reset\r\n\t\tif (this.simulation.hasEnded()) {\r\n\t\t\tthis.simulation.reset();\r\n\t\t\tawait utils.sleep(100);\r\n\t\t}\r\n\r\n\t\t// If auto-assemble & program changed, assemble\r\n\t\tlet curText = this.programRef.current.getText();\r\n\t\tif (this.controlRef.current.getAutoAssemble()) {\r\n\t\t\tif (this.lastText !== curText) {\r\n\t\t\t\tif (!this.assemble()) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.lastText = curText;\r\n\t\t\r\n\t\ttry {\r\n\t\t\tthis.simulation.run();\r\n\t\t} catch (exc) {\r\n\t\t\tthis.consoleRef.current.writeLine(exc);\r\n\t\t}\r\n\t}\r\n\r\n\tpause() {\r\n\t\ttry {\r\n\t\t\tthis.simulation.stop();\r\n\t\t} catch (exc) {\r\n\t\t\tthis.consoleRef.current.writeLine(exc);\r\n\t\t}\r\n\t}\r\n\t\r\n\tstep() {\r\n\t\ttry {\r\n\t\t\tthis.simulation.step();\r\n\t\t} catch (exc) {\r\n\t\t\tthis.consoleRef.current.writeLine(exc);\r\n\t\t}\r\n\t}\r\n\t\r\n\treset() {\r\n\t\ttry {\r\n\t\t\tthis.simulation.reset();\r\n\t\t} catch (exc) {\r\n\t\t\tthis.consoleRef.current.writeLine(exc);\r\n\t\t}\r\n\t}\r\n\r\n\tonStepIntervalChanged(stepInterval) {\r\n\t\tthis.simulation.setStepInterval(stepInterval);\r\n\t}\r\n\r\n\tsave(code) {\r\n\t\ttry {\r\n\t\t\tlocalStorage.setItem('asmCode', code);\r\n\t\t\treturn true;\r\n\t\t} catch (exc) {\r\n\t\t\tconsole.error(exc);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\tloadSaved() {\r\n\t\tlet asmCode = localStorage.getItem('asmCode');\r\n\t\tthis.programRef.current.setText(asmCode);\r\n\t}\r\n\r\n\tloadDefault() {\r\n\t\tthis.programRef.current.setText(defaultProgramData);\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className={styles.container}>\r\n\t\t\t\t<Box display=\"flex\" flexDirection=\"column\" width=\"100%\" height=\"100%\">\r\n\t\t\t\t\t<Box display=\"flex\" flexDirection=\"row\" flex=\"1\" overflow=\"auto\">\r\n\t\t\t\t\t\t<Program\r\n\t\t\t\t\t\t\tcurArchitecture={this.curArchitecture}\r\n\t\t\t\t\t\t\tonSaveRequest={this.save.bind(this)}\r\n\t\t\t\t\t\t\tonLoadSavedRequest={this.loadSaved.bind(this)}\r\n\t\t\t\t\t\t\tonLoadDefaultRequest={this.loadDefault.bind(this)}\r\n\t\t\t\t\t\t\tref={this.programRef} />\r\n\t\t\t\t\t\t<Assembled ref={this.assembledRef} />\r\n\t\t\t\t\t\t<SymbolTable architecture={this.curArchitecture} ref={this.symbolTableRef} />\r\n\t\t\t\t\t\t<Box className={styles.rightArea} display=\"flex\" flexDirection=\"column\" justifyContent=\"space-between\" flex=\"1\" overflow=\"auto\">\r\n\t\t\t\t\t\t\t<Registers registerBank={this.registerBank} ref={this.registersRef} />\r\n\t\t\t\t\t\t\t<Control\r\n\t\t\t\t\t\t\t\tonAssemble={this.assemble.bind(this)}\r\n\t\t\t\t\t\t\t\tonRun={this.run.bind(this)}\r\n\t\t\t\t\t\t\t\tonPause={this.pause.bind(this)}\r\n\t\t\t\t\t\t\t\tonStep={this.step.bind(this)}\r\n\t\t\t\t\t\t\t\tonReset={this.reset.bind(this)}\r\n\t\t\t\t\t\t\t\tonStepIntervalChanged={this.onStepIntervalChanged.bind(this)}\r\n\t\t\t\t\t\t\t\tref={this.controlRef} />\r\n\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t</Box>\r\n\t\t\t\t\t<Console onInput={this.onInput.bind(this)} ref={this.consoleRef} />\r\n\t\t\t\t</Box>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Simulator;\r\n","import styles from './Registers.module.css';\r\nimport { Component } from \"react\";\r\nimport utils from '../../utils';\r\n\r\nclass Registers extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    if (!props.registerBank) throw new Error('props.registerBank null');\r\n\r\n    this.registerBank = props.registerBank;\r\n\r\n    this.registerInfos = Object.entries(this.registerBank.getRegisterInfos());\r\n    \r\n    this.state = {\r\n      pc: 0,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.valueUpdateHandler = utils.callLimiter(() => {\r\n      this.setState({});\r\n    }, 50);\r\n    this.registerBank.on('value update', this.valueUpdateHandler);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.registerBank.off('value update', this.valueUpdateHandler);\r\n  }\r\n\r\n  setPC(pc) {\r\n    this.setState({pc});\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={styles.container}>\r\n        <div className={styles.title}>Registers</div>\r\n        \r\n        <div className={styles.content}>\r\n          <div className={styles.generalRegisterList}>\r\n            { this.registerInfos.map(([name, infos], i) => <Register key={i} name={name} aliases={infos.aliases} value={this.registerBank.getUValue(name)} />) }\r\n          </div>\r\n          \r\n          <div className={styles.pcRegister}>\r\n            <Register name=\"pc\" aliases={[]} value={this.state.pc} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Register extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.props = props;\r\n  }\r\n\r\n  render() { \r\n    return (\r\n      <div className={styles.registerContainer}>\r\n        <div>{this.props.name}{this.props.aliases.length > 0 ? (' (' + this.props.aliases.join(',') + ')') : ''}</div>\r\n        <div>{this.props.value.toString(16).padStart(4, '0')}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n \r\nexport default Registers;","import Editor from '@monaco-editor/react';\r\nimport { Component, createRef } from 'react';\r\nimport operationsManager from '../../business/asm/operations/operationsManager';\r\nimport styles from './Program.module.css'\r\n\r\nlet alreadyCreatedLang = false;\r\n\r\nclass Program extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    if (props.curArchitecture == null) throw new Error('props.curArchitecture null');\r\n\r\n    this.infosRef = createRef();\r\n\r\n    this.onChange = typeof props.onChange === 'function' ? props.onChange : ()=>{};\r\n    this.onLoadSavedRequest = typeof props.onLoadSavedRequest === 'function' ? props.onLoadSavedRequest : ()=>{};\r\n    this.onLoadDefaultRequest = typeof props.onLoadDefaultRequest === 'function' ? props.onLoadDefaultRequest : ()=>{};\r\n    this.onSaveRequest = typeof props.onSaveRequest === 'function' ? props.onSaveRequest : ()=>{};\r\n\r\n    this.opsNames = operationsManager.getOperationNames();\r\n    this.regNames = props.curArchitecture.getRegisterNames();\r\n\r\n    this.state = {  }\r\n  }\r\n\r\n  onEditorWillMount(monaco) {\r\n    this.monaco = monaco;\r\n\r\n    if (alreadyCreatedLang) return;\r\n    alreadyCreatedLang = true;\r\n\r\n    monaco.languages.register({ id: 'vikingAsm' });\r\n        \r\n    monaco.languages.setMonarchTokensProvider('vikingAsm', {\r\n\r\n      operationKeywords: this.opsNames,\r\n      registerKeywords: this.regNames,\r\n\r\n      decimalNumbers: /\\d+/,\r\n      hexNumbers: /(?:0x|0B)[\\da-fA-F]+/,\r\n      \r\n      escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\r\n\r\n      tokenizer: {\r\n        root: [\r\n          [ /\\b@hexNumbers|@decimalNumbers\\b/i, 'number' ],\r\n          [\r\n            /\\b\\w+\\b/,\r\n            {\r\n              cases: {\r\n                '@operationKeywords': 'operationKeywords',\r\n                '@registerKeywords': 'registersKeyWords',\r\n                '@default': 'symbols',\r\n              },\r\n            },\r\n          ],\r\n\r\n          [/^[ \\t]*(?:(?:\\/\\/)|;).*$/,    'comment'],\r\n\r\n          // strings\r\n          [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid' ],  // non-teminated string\r\n          [/\"/, { token: 'string.quote', bracket: '@open', next: '@string' } ],\r\n        ],\r\n        string: [\r\n          [/[^\\\\\"]+/,  'string'],\r\n          [/@escapes/, 'string.escape'],\r\n          [/\\\\./,      'string.escape.invalid'],\r\n          [/\"/,        { token: 'string.quote', bracket: '@close', next: '@pop' } ]\r\n        ],\r\n      },\r\n    });\r\n\r\n    monaco.languages.registerCompletionItemProvider('vikingAsm', {\r\n      provideCompletionItems: () => {\r\n        let suggestions = this.opsNames.map(opName => ({\r\n          label: opName,\r\n          detail: '...',\r\n          documentation: '...',\r\n          kind: monaco.languages.CompletionItemKind.Function,\r\n          insertText: opName,\r\n        }));\r\n        return { suggestions: suggestions };\r\n      }\r\n    });\r\n    \r\n    monaco.editor.defineTheme('vikinAsmTheme', {\r\n      base: 'vs-dark',\r\n      inherit: true,\r\n      rules: [\r\n        { token: 'operationKeywords', foreground: 'e55283' },\r\n        { token: 'registersKeyWords', foreground: 'ffc100' },\r\n        { token: 'symbols', foreground: '92db57' },\r\n        { token: 'number', foreground: '7d81ea' }\r\n      ],\r\n    });\r\n  }\r\n\r\n  onEditorMount(editor, monaco) {\r\n    this.editor = editor;\r\n    \r\n    this.editor.getModel().onDidChangeContent(this.onChange);\r\n    this.onChange();\r\n    \r\n    if (this.initText) {\r\n      this.editor.setValue(this.initText);\r\n    }\r\n\r\n    this.saveBindHandler = this.editor.addCommand(monaco.KeyMod.CtrlCmd | monaco.KeyCode.KEY_S, this.save.bind(this));\r\n  }\r\n\r\n  getText() {\r\n    if (this.editor == null) return '';\r\n    return this.editor.getValue();\r\n  }\r\n\r\n  setText(text) {\r\n    this.initText = text;\r\n    if (this.editor == null) return;\r\n    let fullRange = this.editor.getModel().getFullModelRange();\r\n    this.editor.executeEdits(null, [{ text: '', range: fullRange }]);\r\n    this.editor.executeEdits(null, [{ text, range: fullRange }]);\r\n  }\r\n\r\n  setInfos(infos) {\r\n    this.infosRef.current.textContent = infos;\r\n    setTimeout(() => this.infosRef.current.textContent = '', 3000);\r\n  }\r\n\r\n  save() {\r\n    let code = this.editor.getValue();\r\n    if (this.onSaveRequest(code) === true) {\r\n      this.setInfos('Saved');\r\n    } else {\r\n      console.error('Save error');\r\n    }\r\n  }\r\n\r\n  loadSaved() {\r\n    this.onLoadSavedRequest();\r\n  }\r\n\r\n  loadDefault() {\r\n    this.onLoadDefaultRequest();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={styles.container}>\r\n        <div className={styles.titleContainer}>\r\n          <div>Program</div>\r\n          <div className={styles.infos} ref={this.infosRef}></div>\r\n          <div>\r\n            <button className={styles.btn} onClick={this.save.bind(this)}>Save</button>\r\n            <button className={styles.btn} onClick={this.loadSaved.bind(this)}>Load</button>\r\n            <button className={styles.btn} onClick={this.loadDefault.bind(this)}>Load Example</button>\r\n          </div>\r\n        </div>\r\n        <Editor\r\n          className={styles.editor}          \r\n          language='vikingAsm'\r\n          theme='vikinAsmTheme'\r\n          beforeMount={this.onEditorWillMount.bind(this)}\r\n          onMount={this.onEditorMount.bind(this)}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n \r\nexport default Program;","import { DataGrid, GridDensityTypes } from '@material-ui/data-grid';\r\nimport { Component } from 'react';\r\nimport utils from '../../utils';\r\nimport styles from './SymbolTable.module.css'\r\n\r\nclass SymbolTable extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    if (!props.architecture) throw new Error('props.architecture null');\r\n    this.architecture = props.architecture;\r\n\r\n    this.columns = [\r\n      {\r\n        field: 'symbolName',\r\n        headerName: 'Name',\r\n      },\r\n      {\r\n        field: 'symbolValue',\r\n        headerName: 'Value',\r\n      },\r\n    ];\r\n\r\n    this.state = {\r\n      rows: [],\r\n    }\r\n  }\r\n\r\n  setSymbolTable(symbolTable) {\r\n    let newRows = Object.entries(symbolTable).map(([symbolName, symbolValue], id) => {\r\n      return Object.assign({ id }, {symbolName, symbolValue: '0x'+utils.signedNumberToHex(symbolValue, this.architecture.getByteWidth())});\r\n    });\r\n    this.setState({ rows: newRows });\r\n  }\r\n\r\n  render() { \r\n    return (\r\n      <div className={styles.container}>\r\n        <div className={styles.title}>Symbol Table</div>\r\n        <div className={styles.gridContainer}>\r\n          {\r\n            this.state.rows.length > 0 ? (\r\n              <DataGrid\r\n                classes={{root: styles.root}}\r\n                getRowClassName={() => styles.row}\r\n                getCellClassName={() => styles.cell}\r\n                rows={this.state.rows}\r\n                columns={this.columns}\r\n                disableDensitySelector={false}\r\n                disableColumnMenu={true}\r\n                disableColumnSelector={true}\r\n                hideFooter={true}\r\n                hideFooterPagination={true}\r\n                hideFooterRowCount={true}\r\n                hideFooterSelectedRowCount={true}\r\n                showCellRightBorder={false}\r\n                showColumnRightBorder={false}\r\n                headerHeight={0}\r\n                density={GridDensityTypes.Compact}\r\n              />\r\n            ) : ( <div/> )\r\n          }\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n \r\nexport default SymbolTable;","import { Component, createRef } from \"react\";\r\nimport styles from './Console.module.css';\r\n\r\nclass Console extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    \r\n    this.onInput = typeof props.onInput === 'function' ? props.onInput : ()=>{};\r\n\r\n    this.inputRef = createRef();\r\n    this.outputRef = createRef();\r\n\r\n    this.state = {\r\n      inputAlert: false,\r\n      inputBuffer: Buffer.from([]),\r\n    };\r\n  }\r\n\r\n  setInputAlert(inputAlert) {\r\n    this.setState({inputAlert});\r\n    if (inputAlert) {\r\n      this.inputRef.current.focus();\r\n    }\r\n  }\r\n\r\n  setInputBuffer(inputBuffer) {\r\n    this.setState({inputBuffer});\r\n  }\r\n\r\n  write(text) {\r\n    this.outputRef.current.value += text;\r\n    this.outputRef.current.scrollTop = this.outputRef.current.scrollHeight;\r\n  }\r\n\r\n  writeLine(text) {\r\n    this.outputRef.current.value += text + '\\n';\r\n    this.outputRef.current.scrollTop = this.outputRef.current.scrollHeight;\r\n  }\r\n\r\n  inputKeyDown(e) {\r\n    if (e.key.toLowerCase() === 'enter') {\r\n      let text = e.target.value;\r\n      if (text.length > 0) {\r\n        e.target.value = '';\r\n        this.onInput(text);\r\n      }\r\n    }\r\n  }\r\n\r\n  render() { \r\n    return (\r\n      <div className={styles.container}>\r\n        <div className={styles.outAndInBufContainer}>\r\n          <div className={styles.output}>\r\n            <textarea readOnly spellCheck='false' ref={this.outputRef}></textarea>\r\n          </div>\r\n          <div className={styles.inputBuffer}>\r\n            <div className={styles.title}>Input Buffer</div>\r\n            <textarea readOnly spellCheck='false' value={this.state.inputBuffer.map(x => x.toString(16).padStart(2, '0')).join(' ')}></textarea>\r\n          </div>\r\n        </div>\r\n        <input\r\n          className={(this.state.inputAlert ? (styles.alertsOutline + ' ') : '') + styles.inputText}\r\n          placeholder=\"input...\"\r\n          id='inputText'\r\n          onKeyDown={this.inputKeyDown.bind(this)}\r\n          ref={this.inputRef} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n \r\nexport default Console;","import { Component } from \"react\";\r\nimport Editor from \"@monaco-editor/react\";\r\nimport styles from './Assembled.module.css';\r\n\r\nconst GUTTER_GLYPH_MARGIN = 2;\r\n\r\nclass Assembled extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    \r\n    this.breakpointDecorations = {};\r\n    this.pcBreakpoints = new Set();\r\n    this.curLineRunningDecorationId = null;\r\n    this.curLineRunningDecoration = null;\r\n    this.monaco = null;\r\n    this.editor = null;\r\n\r\n    this.state = {  };\r\n  }\r\n\r\n  hasBreakpoint(pc) {\r\n    return this.pcBreakpoints.has(pc);\r\n  }\r\n\r\n  toggleBreakpoint(pc) {\r\n    if (this.pcBreakpoints.has(pc)) {\r\n      this.removeBreakpoint(pc);\r\n    } else {\r\n      this.setBreakpoint(pc);\r\n    }\r\n  }\r\n  \r\n  setBreakpoint(pc) {\r\n    if (this.editor == null) return;\r\n    if (this.pcBreakpoints.has(pc)) return;\r\n\r\n    let lineNumber = pc / 2 + 1;    \r\n    let lineCount = this.editor.getModel().getLineCount();\r\n    if (lineNumber <= 0 || lineNumber > lineCount) return;\r\n\r\n    this.pcBreakpoints.add(pc);\r\n    let bpDec = this.editor.deltaDecorations([], [\r\n      {\r\n        range: new this.monaco.Range(lineNumber, 1, lineNumber, 1),\r\n        options: {\r\n          isWholeLine: false,\r\n          glyphMarginClassName: styles.breakpoint,\r\n        },\r\n      },\r\n    ]);\r\n    this.breakpointDecorations[pc] = bpDec;\r\n  }\r\n\r\n  removeBreakpoint(pc) {\r\n    if (this.editor == null) return;\r\n    if (!this.pcBreakpoints.has(pc)) return;\r\n\r\n    this.pcBreakpoints.delete(pc);\r\n    let bpDec = this.breakpointDecorations[pc];\r\n    delete this.breakpointDecorations[pc];\r\n    this.editor.deltaDecorations(bpDec, []);\r\n  }\r\n\r\n  removeAllBreakpoints() {\r\n    for (let pc of this.pcBreakpoints) this.removeBreakpoint(pc);\r\n  }\r\n\r\n  setBreakpoints(pcs) {\r\n    this.removeAllBreakpoints();\r\n    for (let pc of pcs) this.setBreakpoint(pc);\r\n  }\r\n\r\n  setAssembled(text) {\r\n    if (this.editor == null) return;\r\n    if (typeof text !== 'string') throw new Error('Text isnt string');\r\n    \r\n    let linesCount = text.split('\\n').length;\r\n    let newBreakpointPCs = Array.from(this.pcBreakpoints).filter(pc => pc / 2 < linesCount);\r\n    this.editor.setValue(text);\r\n    this.setBreakpoints(newBreakpointPCs);\r\n    this.setCurrentPC(0);\r\n  }\r\n\r\n  setCurrentPC(pc) {\r\n    if (this.editor == null) return;\r\n    \r\n    let lineNumber = pc / 2 + 1;\r\n    let lineCount = this.editor.getModel().getLineCount();\r\n    if (lineNumber <= 0 || lineNumber > lineCount) {\r\n      this.curLineRunningDecoration = [];\r\n    } else {\r\n      this.curLineRunningDecoration = [\r\n        {\r\n          range: new this.monaco.Range(lineNumber, 1, lineNumber, 1),\r\n          options: {\r\n            isWholeLine: true,\r\n            className: styles.currentLineRunning,\r\n          }\r\n        }\r\n      ];\r\n      this.editor.revealLine(lineNumber);\r\n    }\r\n\r\n    let oldDec = this.curLineRunningDecorationId ? this.curLineRunningDecorationId : [];\r\n    this.curLineRunningDecorationId = this.editor.deltaDecorations(oldDec, this.curLineRunningDecoration);\r\n  }\r\n\r\n\tonEditorMount(editor, monaco) {\r\n\t\tthis.editor = editor;\r\n    this.monaco = monaco;\r\n\r\n\t\tlet self = this;\r\n\t\tthis.editor.updateOptions({\r\n\t\t\twordBasedSuggestions: false,\r\n\t\t\tautomaticLayout: true,\r\n\t\t\tlineDecorationsWidth: 0,\r\n\t\t\tglyphMargin: true,\r\n\t\t\tminimap: {\r\n\t\t\t\tenabled: false,\r\n\t\t\t},\r\n\t\t\tlineNumbers: (n) => ((n-1)*2).toString(16).padStart(4, '0'),\r\n\t\t\treadOnly: true,\r\n\t\t});\r\n\t\t\r\n\t\tthis.editor.onMouseDown((e) => {\r\n\t\t\tlet { target: { type, position: { lineNumber } } } = e;\r\n\t\t\tif (type !== GUTTER_GLYPH_MARGIN) return;\r\n\t\t\tlet pc = (lineNumber - 1) * 2;\r\n\t\t\tself.toggleBreakpoint(pc);\r\n\t\t});\r\n\t}\r\n\r\n  render() { \r\n    return (\r\n      <div className={styles.container}>\r\n        <div className={styles.title}>Disassembly</div>\r\n        <Editor\r\n          className={styles.editor}\r\n          language='vikingAsm'\r\n          theme='vikinAsmTheme'\r\n          onMount={this.onEditorMount.bind(this)}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n \r\nexport default Assembled;","import { Component, createRef } from \"react\";\r\nimport styles from './MemoryViewer.module.css'\r\n\r\nclass MemoryViewer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    if (!props.memory) throw new Error('props.memory null');\r\n\r\n    this.memory = props.memory;\r\n\r\n    this.tbodyRef = createRef();\r\n    this.memoryScrollRef = createRef();\r\n    this.memoryScrollAuxRef = createRef();\r\n    this.memoryAreaRef = createRef();\r\n\r\n    this.columns = 8;\r\n    this.rowsToShow = 16;\r\n    this.rows = 0;\r\n    this.dataItemBytes = 2;\r\n    this.scrollHeight = 0;\r\n    this.scrollTop = 0;\r\n    this.rowOffset = 0;\r\n    this.wordHighlightContexts = {};\r\n\r\n    this.state = {  }\r\n  }\r\n\r\n  componentDidMount() {\r\n    \r\n    // Request data count\r\n    let dataCount = null;\r\n    while(dataCount == null) dataCount = this.getDataCount();\r\n    this.rows = dataCount / this.columns / this.dataItemBytes;\r\n\r\n    // Setup scroll\r\n    this.scrollHeight = this.rows;\r\n    this.setScrollHeight(this.scrollHeight);\r\n\r\n    // Get initial data\r\n    let data = this.getData();\r\n    this.recreateTable(data);\r\n\r\n    // scroll logic\r\n    this.memoryAreaRef.current.onwheel = (e) => {\r\n      this.memoryScrollRef.current.scrollTop += e.deltaY > 0 ? 1 : -1;\r\n      e.preventDefault();\r\n    }\r\n    this.memoryScrollRef.current.onscroll = async (e) => {\r\n      this.scrollTop = this.memoryScrollRef.current.scrollTop;\r\n      this.rowOffset = Math.floor((this.rows - this.rowsToShow) * (this.scrollTop / (this.scrollHeight - this.memoryScrollRef.current.getBoundingClientRect().height)));\r\n      let data = this.getData();\r\n      this.recreateTable(data);\r\n      this.wordHighlightContexts = {};\r\n      e.preventDefault();\r\n    }\r\n\r\n    // Memory Handlers\r\n\r\n    this.onResetHandler = this.reset.bind(this);\r\n\r\n    this.onStorageWriteByteHandler = (address, byte) => {\r\n      if (address >= this.dataOffset && address < this.dataOffset + this.dataCount) {\r\n        this.updateByteAt(address, byte);\r\n      }\r\n    };\r\n    \r\n    this.onStorageWriteWordHandler = (address, word) => {\r\n      if (address >= this.dataOffset && address < this.dataOffset + this.dataCount) {\r\n        this.updateByteAt(address, (word >> 8) & 0xFF);\r\n        this.updateByteAt(address + 1, word & 0xFF);\r\n      }\r\n    };\r\n    \r\n    this.memory.on('reset', this.onResetHandler);\r\n    this.memory.on('storage write byte', this.onStorageWriteByteHandler);\r\n    this.memory.on('storage write word', this.onStorageWriteWordHandler);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.memory.off('reset', this.onResetHandler);\r\n    this.memory.off('storage write byte', this.onStorageWriteByteHandler);\r\n    this.memory.off('storage write word', this.onStorageWriteWordHandler);\r\n  }\r\n\r\n  updateByteAt(address, byte) {\r\n    let tbyteDiv = this.getByteElem(address);\r\n    tbyteDiv.textContent = byte.toString(16).padStart(2, '0');\r\n    this.highlightByte(address, tbyteDiv);\r\n  }\r\n    \r\n  getByteElem(address) {\r\n    let item = Math.floor(address / this.dataItemBytes);\r\n    let offset = address % this.dataItemBytes;\r\n\r\n    let column = item % this.columns;\r\n    let row = Math.floor(item / this.columns) - this.rowOffset;\r\n    \r\n    let tRow = this.tbodyRef.current.childNodes[row+1];\r\n    let tItem = tRow.childNodes[column+1];\r\n    let tbyteDiv = tItem.childNodes[offset];\r\n    return tbyteDiv;\r\n  }\r\n\r\n  highlightByte(address, elem) {\r\n    let ctx = this.wordHighlightContexts[address];\r\n    if (ctx) {\r\n      ctx.value = 1;\r\n    } else {\r\n      ctx = { value: 1 };\r\n      this.wordHighlightContexts[address] = ctx;\r\n\r\n      let id = setInterval(() => {\r\n        if (ctx.value <= 0) {\r\n          elem.style['background-color'] = 'rgba(255,0,0,0)';\r\n          clearInterval(id);\r\n          delete this.wordHighlightContexts[address];\r\n        } else {\r\n          elem.style['background-color'] = 'rgba(255,0,0,' + ctx.value + ')';\r\n          ctx.value -= 0.05;\r\n        }\r\n      }, 50);\r\n    }\r\n  }\r\n\r\n  setScrollHeight(height) {\r\n    this.memoryScrollAuxRef.current.style.height = height + 'px';\r\n  }\r\n\r\n  recreateTable(data) {\r\n    let rowsCount = Math.ceil(data.length / this.columns);\r\n    \r\n    let html = '';\r\n    html += '<tr>';\r\n    html += '<td>';\r\n    html += 'X';\r\n    html += '</td>';\r\n    for (let x = 0; x < this.columns * this.dataItemBytes; x += this.dataItemBytes) {\r\n      html += '<td class=\"' + styles.memoryColumnNumber + '\">';\r\n      html += x.toString(16).padStart(4, '0');\r\n      html += '</td>';\r\n    }\r\n    html += '</tr>';\r\n    \r\n    let _x = 0;\r\n    for (let y = 0; y < rowsCount; y++) {\r\n      html += '<tr>';\r\n      html += '<td class=\"' + styles.memoryRowNumber + '\">';\r\n      html += (this.rowOffset * this.dataItemBytes * this.columns + y * this.dataItemBytes * this.columns).toString(16).padStart(4, '0');\r\n      html += '</td>';\r\n      \r\n      for (let x = 0; x < this.columns; x++) {\r\n        let item = data[y * this.columns + x];\r\n        let memDataHtml = '';\r\n        for (let i = 0; i < this.dataItemBytes; i++) {\r\n          let byte = item & 0xFF;\r\n          item >>= 8;\r\n          memDataHtml = '<div style=\"display:inline\">' + byte.toString(16).padStart(2, '0') + '</div>' + memDataHtml;\r\n        }\r\n        html += '<td class=\"' + styles.memoryData + '\">' + memDataHtml + '</td>';\r\n      }\r\n      html += '</tr>';\r\n      if (_x === this.columns) {\r\n          _x = 0;\r\n      }\r\n    }\r\n\r\n    this.tbodyRef.current.innerHTML = html;\r\n  }\r\n\r\n  reset() {\r\n    for (let i = this.dataOffset; i < this.dataOffset + this.dataCount; i++) {\r\n      let tbyteDiv = this.getByteElem(i);\r\n      tbyteDiv.textContent = '00';\r\n    }\r\n  }\r\n\r\n  getDataCount() {\r\n    return this.memory.getDataLength();\r\n  }\r\n\r\n  getData() {\r\n    this.dataOffset = this.rowOffset * this.columns * 2;\r\n    this.dataCount = this.columns * this.rowsToShow * 2;\r\n    let data = this.memory.getWordsFromRange(this.dataOffset, this.dataOffset + this.dataCount);\r\n    return data;\r\n  }\r\n\r\n  render() { \r\n    return (\r\n      <div className={styles.container}>\r\n        <div className={styles.content}>\r\n          <div className={styles.memoryScroll} ref={this.memoryScrollRef}><div ref={this.memoryScrollAuxRef}></div></div>\r\n          <div className={styles.memoryAreaContainer}>\r\n            <table className={styles.memoryArea} ref={this.memoryAreaRef}>\r\n              <tbody ref={this.tbodyRef}></tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n \r\nexport default MemoryViewer;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__2U2M-\"};","var _g;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgAssembleIcon(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: \"900.000000pt\",\n    height: \"900.000000pt\",\n    viewBox: \"0 0 900.000000 900.000000\",\n    preserveAspectRatio: \"xMidYMid meet\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    transform: \"translate(0.000000,900.000000) scale(0.100000,-0.100000)\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M4200 8359 c-824 -72 -1550 -366 -2177 -883 -59 -49 -180 -162 -268 -250 -619 -622 -995 -1403 -1101 -2291 -14 -112 -18 -223 -18 -435 0 -308 13 -468 60 -715 185 -965 709 -1805 1492 -2390 1009 -753 2342 -966 3542 -565 1330 444 2320 1583 2574 2960 38 207 56 385 63 610 27 938 -288 1847 -892 2577 -114 139 -359 384 -498 498 -590 488 -1267 777 -2042 871 -155 18 -586 26 -735 13z m2535 -1278 c22 -10 54 -34 71 -52 23 -25 265 -406 328 -516 15 -26 23 -106 15 -148 -17 -91 -46 -117 -310 -281 -134 -84 -258 -159 -275 -168 -87 -43 -199 -24 -265 47 -37 39 -280 422 -330 519 -44 86 -25 200 44 268 32 30 475 311 532 336 44 20 143 17 190 -5z m-1186 -212 c40 -22 79 -69 100 -119 15 -34 149 -531 157 -578 12 -73 -26 -157 -96 -213 -28 -23 -93 -45 -329 -109 -161 -44 -312 -80 -335 -80 -80 0 -179 66 -208 139 -6 14 -43 148 -84 296 -78 285 -87 345 -59 413 40 94 75 112 402 203 322 89 371 94 452 48z m-1330 -245 c64 -32 106 -87 121 -157 16 -82 40 -589 29 -638 -18 -81 -62 -134 -134 -165 -42 -18 -373 -43 -585 -43 -117 -1 -165 14 -215 65 -58 61 -63 85 -81 422 -16 297 -16 314 1 358 23 60 65 107 119 134 37 17 78 22 277 34 374 21 406 21 468 -10z m-1325 -88 c66 -20 110 -57 140 -118 l26 -52 0 -320 c0 -301 -2 -324 -21 -366 -27 -60 -54 -88 -114 -116 -49 -23 -55 -24 -371 -24 l-320 0 -52 26 c-63 31 -107 88 -122 158 -8 34 -11 153 -8 351 3 270 5 304 22 335 36 69 92 114 161 131 17 4 161 7 321 8 224 1 302 -2 338 -13z m3649 -950 c142 -53 271 -103 287 -111 73 -38 127 -143 118 -228 -5 -38 -182 -537 -214 -598 -36 -72 -142 -126 -227 -117 -39 5 -538 182 -597 213 -39 20 -96 87 -110 130 -22 68 -7 136 94 407 52 141 102 271 111 287 21 41 62 79 110 102 73 36 137 23 428 -85z m-1233 -17 c61 -14 114 -51 146 -100 25 -40 71 -245 129 -577 25 -143 -12 -235 -117 -285 -62 -30 -561 -130 -645 -129 -93 1 -182 67 -212 157 -19 57 -112 558 -113 606 0 60 8 83 43 136 46 66 98 85 399 142 146 28 274 52 285 54 32 7 38 7 85 -4z m-1174 -147 c21 -11 51 -33 66 -49 53 -56 59 -87 81 -419 20 -300 20 -313 3 -358 -31 -81 -90 -133 -171 -150 -44 -9 -467 -36 -564 -36 -98 0 -151 20 -200 76 -47 53 -58 114 -77 429 -20 343 -18 355 56 427 27 26 66 52 87 58 45 14 544 50 624 45 30 -1 73 -12 95 -23z m-1242 -56 c66 -20 110 -57 140 -118 l26 -52 0 -320 c0 -301 -2 -324 -21 -366 -27 -60 -54 -88 -114 -116 -49 -23 -55 -24 -371 -24 l-320 0 -52 26 c-63 31 -107 88 -122 158 -8 34 -11 153 -8 351 3 270 5 304 22 335 36 69 92 114 161 131 17 4 161 7 321 8 224 1 302 -2 338 -13z m3289 -1096 c319 -33 338 -38 400 -111 62 -71 63 -100 28 -442 -19 -180 -37 -313 -47 -337 -21 -53 -92 -114 -150 -130 -41 -12 -84 -10 -356 18 -334 35 -353 39 -415 104 -42 43 -63 96 -63 155 0 26 13 173 29 326 24 225 33 286 51 322 35 72 118 124 201 125 19 0 165 -13 322 -30z m-1053 -4 c138 -4 184 -20 239 -82 62 -71 65 -92 54 -447 -8 -291 -10 -315 -30 -353 -25 -48 -72 -90 -123 -112 -50 -21 -657 -12 -711 11 -55 23 -104 72 -129 129 -22 51 -22 56 -16 348 4 162 12 316 17 342 12 51 64 120 110 143 61 32 147 35 589 21z m-2236 -50 c66 -20 110 -57 140 -118 l26 -52 0 -320 c0 -301 -2 -324 -21 -366 -27 -60 -54 -88 -114 -116 -49 -23 -55 -24 -371 -24 l-320 0 -52 26 c-63 31 -107 88 -122 158 -8 34 -11 153 -8 351 3 270 5 304 22 335 36 69 92 114 161 131 17 4 161 7 321 8 224 1 302 -2 338 -13z m1170 0 c66 -20 110 -57 140 -118 l26 -52 0 -320 c0 -301 -2 -324 -21 -366 -27 -60 -54 -88 -114 -116 -49 -23 -55 -24 -371 -24 l-320 0 -52 26 c-63 31 -107 88 -122 158 -8 34 -11 153 -8 351 3 270 5 304 22 335 36 69 92 114 161 131 17 4 161 7 321 8 224 1 302 -2 338 -13z m-1178 -1159 c68 -18 118 -58 149 -120 l25 -51 0 -314 c0 -210 -4 -328 -12 -353 -15 -52 -73 -117 -122 -140 -37 -17 -72 -19 -366 -19 -323 0 -325 0 -377 24 -63 30 -107 87 -123 159 -8 35 -10 153 -8 352 3 270 5 304 22 335 36 69 92 114 161 131 56 13 596 10 651 -4z m1170 0 c68 -18 118 -58 149 -120 l25 -51 0 -314 c0 -210 -4 -328 -12 -353 -15 -52 -73 -117 -122 -140 -37 -17 -72 -19 -366 -19 -323 0 -325 0 -377 24 -63 30 -107 87 -123 159 -8 35 -10 153 -8 352 3 270 5 304 22 335 36 69 92 114 161 131 56 13 596 10 651 -4z m1199 -10 c54 -24 93 -63 119 -117 20 -42 21 -64 24 -332 2 -170 -1 -309 -7 -342 -14 -78 -58 -137 -123 -170 l-52 -26 -325 0 c-363 0 -372 2 -438 70 -62 64 -64 79 -61 450 l3 335 27 41 c15 23 41 52 59 65 62 44 103 48 429 46 269 -2 310 -4 345 -20z m1150 0 c54 -24 93 -63 119 -117 20 -42 21 -64 24 -332 2 -170 -1 -309 -7 -342 -14 -78 -58 -137 -123 -170 l-52 -26 -325 0 c-363 0 -372 2 -438 70 -62 64 -64 79 -61 450 l3 335 27 41 c15 23 41 52 59 65 62 44 103 48 429 46 269 -2 310 -4 345 -20z\"\n  }))));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgAssembleIcon);\nexport default __webpack_public_path__ + \"static/media/AssembleIcon.317ec53f.svg\";\nexport { ForwardRef as ReactComponent };","var _g;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgResetIcon(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: \"900.000000pt\",\n    height: \"900.000000pt\",\n    viewBox: \"0 0 900.000000 900.000000\",\n    preserveAspectRatio: \"xMidYMid meet\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    transform: \"translate(0.000000,900.000000) scale(0.100000,-0.100000)\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M4279 8370 c-958 -59 -1836 -456 -2514 -1135 -628 -628 -1004 -1406 -1111 -2300 -25 -210 -25 -660 0 -870 129 -1080 673 -2027 1534 -2670 1009 -753 2342 -966 3542 -565 801 267 1505 803 1979 1505 360 532 577 1128 647 1777 35 322 18 749 -42 1076 -144 791 -509 1487 -1074 2052 -565 565 -1261 930 -2052 1074 -273 50 -638 73 -909 56z m904 -2223 l-668 -667 -3 498 -2 498 -73 -3 c-653 -27 -1238 -359 -1600 -908 -150 -228 -259 -518 -302 -805 -19 -125 -22 -395 -5 -525 25 -200 87 -413 174 -600 l44 -93 -245 -243 c-234 -234 -245 -243 -259 -224 -34 45 -128 220 -175 326 -97 219 -167 461 -206 716 -24 157 -24 576 0 733 92 590 331 1077 731 1489 478 491 1103 774 1784 808 l132 6 0 501 0 501 670 -670 670 -670 -667 -668z m1653 -361 c158 -272 266 -591 321 -946 25 -161 25 -556 0 -725 -74 -499 -285 -977 -595 -1345 -97 -115 -278 -293 -387 -380 -173 -137 -427 -287 -635 -375 -268 -114 -593 -187 -897 -202 l-133 -6 -2 -499 -3 -498 -668 667 -667 668 670 670 670 670 0 -500 0 -500 122 7 c68 3 154 11 192 18 640 105 1195 516 1476 1095 139 284 201 556 201 875 0 308 -63 584 -200 875 l-29 60 242 243 c132 133 245 241 250 239 5 -2 38 -52 72 -111z\"\n  }))));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgResetIcon);\nexport default __webpack_public_path__ + \"static/media/ResetIcon.185470da.svg\";\nexport { ForwardRef as ReactComponent };","var _g;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgStepIcon(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: \"900.000000pt\",\n    height: \"900.000000pt\",\n    viewBox: \"0 0 900.000000 900.000000\",\n    preserveAspectRatio: \"xMidYMid meet\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    transform: \"translate(0.000000,900.000000) scale(0.100000,-0.100000)\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M4279 8370 c-958 -59 -1836 -456 -2514 -1135 -628 -628 -1004 -1406 -1111 -2300 -25 -210 -25 -660 0 -870 129 -1080 673 -2027 1534 -2670 1009 -753 2342 -966 3542 -565 801 267 1505 803 1979 1505 360 532 577 1128 647 1777 35 322 18 749 -42 1076 -144 791 -509 1487 -1074 2052 -565 565 -1261 930 -2052 1074 -273 50 -638 73 -909 56z m663 -3122 l3 -2273 1043 1040 1043 1039 267 -267 267 -267 -1503 -1503 -1502 -1502 -1502 1502 -1503 1503 270 270 270 270 1042 -1042 1043 -1043 0 2273 0 2272 380 0 380 0 2 -2272z\"\n  }))));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgStepIcon);\nexport default __webpack_public_path__ + \"static/media/StepIcon.4e668f1b.svg\";\nexport { ForwardRef as ReactComponent };","import { Component } from 'react';\r\nimport styles from './Control.module.css';\r\nimport PauseCircleFilledIcon from '@material-ui/icons/PauseCircleFilled';\r\nimport PlayCircleFilledIcon from '@material-ui/icons/PlayCircleFilled';\r\nimport { ReactComponent as AssembleIcon } from '../../assets/images/AssembleIcon.svg';\r\nimport { ReactComponent as ResetIcon } from '../../assets/images/ResetIcon.svg';\r\nimport { ReactComponent as StepIcon } from '../../assets/images/StepIcon.svg';\r\n\r\nclass Control extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.onAutoAssembleChanged = typeof props.onAutoAssembleChanged === 'function' ? props.onAutoAssembleChanged : ()=>{};\r\n    this.onStepIntervalChanged = typeof props.onStepIntervalChanged === 'function' ? props.onStepIntervalChanged : ()=>{};\r\n    this.onAssemble = typeof props.onAssemble === 'function' ? props.onAssemble : ()=>{};\r\n    this.onRun = typeof props.onRun === 'function' ? props.onRun : ()=>{};\r\n    this.onPause = typeof props.onPause === 'function' ? props.onPause : ()=>{};\r\n    this.onStep = typeof props.onStep === 'function' ? props.onStep : ()=>{};\r\n    this.onReset = typeof props.onReset === 'function' ? props.onReset : ()=>{};\r\n\r\n    this.cycles = 0;\r\n    this.stepInterval = 50;\r\n    this.autoAssemble = true;\r\n\r\n    this.state = {  }\r\n  }\r\n\r\n  setCycles(cycles) {\r\n    this.cycles = cycles;\r\n    this.setState({});\r\n  }\r\n\r\n  stepIntervalChanged(e) {\r\n    let value = parseInt(e.target.value);\r\n    if (isNaN(value)) value = 0;\r\n    if (value > 1000) value = 1000;\r\n    this.stepInterval = value;\r\n    this.onStepIntervalChanged(this.stepInterval);\r\n    this.setState({});\r\n  }\r\n\r\n  autoAssembleChanged(e) {\r\n    this.autoAssemble = e.target.checked;\r\n    this.onAutoAssembleChanged(this.autoAssemble);\r\n    this.setState({});\r\n  }\r\n\r\n  assembleClick() {\r\n    this.onAssemble();\r\n  }\r\n  \r\n  resetClick() {\r\n    this.onReset();\r\n  }\r\n  \r\n  stopClick() {\r\n    this.onPause();\r\n  }\r\n  \r\n  runClick() {\r\n    this.onRun();\r\n  }\r\n  \r\n  stepClick() {\r\n    this.onStep();\r\n  }\r\n\r\n  getAutoAssemble() {\r\n    return this.autoAssemble;\r\n  }\r\n\r\n  render() { \r\n    return (\r\n      <div className={`unselectable ${styles.container}`}>\r\n        <div className={styles.title}>Control</div>\r\n\r\n        <div className={styles.content}>\r\n          <div className={styles.cycleArea}>\r\n            <div className={styles.cycleLabel}>Cycle:</div>\r\n            <div>{this.cycles}</div>\r\n          </div>\r\n          \r\n          <div>\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={this.autoAssemble}\r\n              onChange={this.autoAssembleChanged.bind(this)}\r\n            /><span style={{margin: '0px 0px 0px 5px'}}>Auto-assemble</span>\r\n          </div>\r\n\r\n          <div className={styles.btnList}>\r\n            <div className={styles.btn} onClick={this.assembleClick.bind(this)}>\r\n              <div className={styles.btnLaterals}></div>\r\n              <AssembleIcon className=\"MuiSvgIcon-root\" />\r\n              <div>Assemble</div>\r\n              <div className={styles.btnLaterals}></div>\r\n            </div>\r\n            <div className={styles.btn} onClick={this.runClick.bind(this)}>\r\n              <div className={styles.btnLaterals}></div>\r\n              <PlayCircleFilledIcon />\r\n              <div>Run</div>\r\n              <div className={styles.btnLaterals}></div>\r\n            </div>\r\n            <div className={styles.btn} onClick={this.stopClick.bind(this)}>\r\n              <div className={styles.btnLaterals}></div>\r\n              <PauseCircleFilledIcon />\r\n              <div>Pause</div>\r\n              <div className={styles.btnLaterals}></div>\r\n            </div>\r\n            <div className={styles.btn} onClick={this.stepClick.bind(this)}>\r\n              <div className={styles.btnLaterals}></div>\r\n              <StepIcon className=\"MuiSvgIcon-root\" />\r\n              <div>Step</div>\r\n              <div className={styles.btnLaterals}></div>\r\n            </div>\r\n            <div className={styles.btn} onClick={this.resetClick.bind(this)}>\r\n              <div className={styles.btnLaterals}></div>\r\n              <ResetIcon className=\"MuiSvgIcon-root\" />\r\n              <div>Reset</div>\r\n              <div className={styles.btnLaterals}></div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className={styles.delayLabel}>Delay (ms):</div>\r\n          <input\r\n            className={styles.delayInput}\r\n            type='number'\r\n            value={this.stepInterval}\r\n            onChange={this.stepIntervalChanged.bind(this)}\r\n            onKeyUp={this.stepIntervalChanged.bind(this)}\r\n            min=\"0\"\r\n            max=\"1000\" />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n \r\nexport default Control;","var map = {\n\t\"./basic/adc.js\": 195,\n\t\"./basic/add.js\": 196,\n\t\"./basic/and.js\": 197,\n\t\"./basic/asr.js\": 198,\n\t\"./basic/bez.js\": 199,\n\t\"./basic/bnz.js\": 200,\n\t\"./basic/ldb.js\": 201,\n\t\"./basic/ldc.js\": 202,\n\t\"./basic/ldr.js\": 203,\n\t\"./basic/ldw.js\": 204,\n\t\"./basic/lsr.js\": 205,\n\t\"./basic/or.js\": 206,\n\t\"./basic/ror.js\": 207,\n\t\"./basic/sbc.js\": 208,\n\t\"./basic/slt.js\": 209,\n\t\"./basic/sltu.js\": 210,\n\t\"./basic/stb.js\": 211,\n\t\"./basic/stw.js\": 212,\n\t\"./basic/sub.js\": 213,\n\t\"./basic/xor.js\": 214\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 194;","const adc = {\r\n    getName() {\r\n        return 'adc';\r\n    },\r\n    getOpcode() {\r\n        return 0x5001;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => false,\r\n    executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n        let carry = simulation.getCarry();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getValue(rsa) + registerBank.getValue(rsb) + carry,\r\n        );\r\n    },\r\n}\r\n\r\nexport default adc;","const add = {\r\n    getName() {\r\n        return 'add';\r\n    },\r\n    getOpcode() {\r\n        return 0x5000;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => true,\r\n    executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getValue(rsa) + registerBank.getValue(rsb),\r\n        );\r\n    },\r\n    executeI(simulation, rst, immediate) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getValue(rst) + immediate,\r\n        );\r\n    },\r\n}\r\n\r\nexport default add;","const and = {\r\n    getName() {\r\n        return 'and';\r\n    },\r\n    getOpcode() {\r\n        return 0x0000;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => true,\r\n    executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getUValue(rsa) & registerBank.getUValue(rsb),\r\n        );\r\n    },\r\n    executeI(simulation, rst, immediate) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getUValue(rst) & immediate,\r\n        );\r\n    },\r\n}\r\n\r\nexport default and;","const asr = {\r\n    getName() {\r\n        return 'asr';\r\n    },\r\n    getOpcode() {\r\n        return 0xA001;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => false,\r\n    executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        let value = registerBank.getValue(rsa);\r\n        simulation.setCarry(value & 1);\r\n        registerBank.setValue(\r\n            rst, \r\n            value >> 1,\r\n        );\r\n    },\r\n}\r\n\r\nexport default asr;","const bez = {\r\n    getName() {\r\n        return 'bez';\r\n    },\r\n    getOpcode() {\r\n        return 0xC000;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => true,\r\n    executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        if (registerBank.getValue(rsa) === 0) {\r\n            simulation.setPC(registerBank.getValue(rsb) - 2);\r\n        }\r\n    },\r\n    executeI(simulation, rst, immediate) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        if (registerBank.getValue(rst) === 0) {\r\n            simulation.setPC(simulation.getPC() + immediate);\r\n        }\r\n    },\r\n}\r\n\r\nexport default bez;","const bnz = {\r\n    getName() {\r\n        return 'bnz';\r\n    },\r\n    getOpcode() {\r\n        return 0xD000;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => true,\r\n    executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        if (registerBank.getValue(rsa) !== 0) {\r\n            simulation.setPC(registerBank.getValue(rsb) - 2);\r\n        }\r\n    },\r\n    executeI(simulation, rst, immediate) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        if (registerBank.getValue(rst) !== 0) {\r\n            simulation.setPC(simulation.getPC() + immediate);\r\n        }\r\n    },\r\n}\r\n\r\nexport default bnz;","const ldb = {\r\n    getName() {\r\n        return 'ldb';\r\n    },\r\n    getOpcode() {\r\n        return 0x0002;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => false,\r\n    executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n        let memory = simulation.getMemory();\r\n\r\n        registerBank.setValue(rst, memory.readByte(registerBank.getUValue(rsb)));\r\n    },\r\n}\r\n\r\nexport default ldb;","const ldc = {\r\n    getName() {\r\n        return 'ldc';\r\n    },\r\n    getOpcode() {\r\n        return 0x9000;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => false,\r\n    supportI: () => true,\r\n    executeI(simulation, rst, immediate) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            (registerBank.getUValue(rst) << 8) | (immediate & 0xFF),\r\n        );\r\n    },\r\n}\r\n\r\nexport default ldc;","const ldr = {\r\n    getName() {\r\n        return 'ldr';\r\n    },\r\n    getOpcode() {\r\n        return 0x8000;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => false,\r\n    supportI: () => true,\r\n    executeI(simulation, rst, immediate) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            immediate,\r\n        );\r\n    },\r\n}\r\n\r\nexport default ldr;","const ldw = {\r\n    getName() {\r\n        return 'ldw';\r\n    },\r\n    getOpcode() {\r\n        return 0x4002;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => false,\r\n    executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n        let memory = simulation.getMemory();\r\n\r\n        registerBank.setValue(rst, memory.readWord(registerBank.getUValue(rsb)));\r\n    },\r\n}\r\n\r\nexport default ldw;","const lsr = {\r\n    getName() {\r\n        return 'lsr';\r\n    },\r\n    getOpcode() {\r\n        return 0xA000;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => false,\r\n    executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        let value = registerBank.getValue(rsa);\r\n        simulation.setCarry(value & 1);\r\n        registerBank.setValue(\r\n            rst, \r\n            value >>> 1,\r\n        );\r\n    },\r\n}\r\n\r\nexport default lsr;","const or = {\r\n    getName() {\r\n        return 'or';\r\n    },\r\n    getOpcode() {\r\n        return 0x1000;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => true,\r\n    executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getValue(rsa) | registerBank.getValue(rsb),\r\n        );\r\n    },\r\n    executeI(simulation, rst, immediate) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getValue(rst) | immediate,\r\n        );\r\n    },\r\n}\r\n\r\nexport default or;","const ror = {\r\n    getName() {\r\n        return 'ror';\r\n    },\r\n    getOpcode() {\r\n        return 0xA002;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => false,\r\n    executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n        let architecture = simulation.getArchitecture();\r\n\r\n        let value = registerBank.getUValue(rsa);\r\n        registerBank.setValue(\r\n            rst, \r\n            (value >> 1) | (simulation.getCarry() << (architecture.getBitWidth() - 1)),\r\n        );\r\n        simulation.setCarry(value & 1);\r\n    },\r\n}\r\n\r\nexport default ror;","const sbc = {\r\n    getName() {\r\n        return 'sbc';\r\n    },\r\n    getOpcode() {\r\n        return 0x6001;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => false,\r\n    executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n        let carry = simulation.getCarry();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getValue(rsa) - registerBank.getValue(rsb) - carry,\r\n        );\r\n    },\r\n}\r\n\r\nexport default sbc;","const slt = {\r\n    getName() {\r\n        return 'slt';\r\n    },\r\n    getOpcode() {\r\n        return 0x3000;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => true,\r\n    executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n        \r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getValue(rsa) < registerBank.getValue(rsb) ? 1 : 0,\r\n        );\r\n    },\r\n    executeI(simulation, rst, immediate) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getValue(rst) < immediate ? 1 : 0,\r\n        );\r\n    },\r\n}\r\n\r\nexport default slt;","const sltu = {\r\n    getName() {\r\n        return 'sltu';\r\n    },\r\n    getOpcode() {\r\n        return 0x4000;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => true,\r\n    executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getUValue(rsa) < registerBank.getUValue(rsb) ? 1 : 0,\r\n        );\r\n    },\r\n    executeI(simulation, rst, immediate) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getUValue(rst) < (immediate >>> 0) ? 1 : 0,\r\n        );\r\n    },\r\n}\r\n\r\nexport default sltu;","const stb = {\r\n    getName() {\r\n        return 'stb';\r\n    },\r\n    getOpcode() {\r\n        return 0x1002;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => false,\r\n    executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n        let memory = simulation.getMemory();\r\n\r\n        memory.writeByte(registerBank.getUValue(rsb), registerBank.getUValue(rsa));\r\n    },\r\n}\r\n\r\nexport default stb;","const stw = {\r\n    getName() {\r\n        return 'stw';\r\n    },\r\n    getOpcode() {\r\n        return 0x5002;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => false,\r\n    executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n        let memory = simulation.getMemory();\r\n\r\n        memory.writeWord(registerBank.getUValue(rsb), registerBank.getUValue(rsa));\r\n    },\r\n}\r\n\r\nexport default stw;","const sub = {\r\n    getName() {\r\n        return 'sub';\r\n    },\r\n    getOpcode() {\r\n        return 0x6000;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => true,\r\n    executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getValue(rsa) - registerBank.getValue(rsb),\r\n        );\r\n    },\r\n    executeI(simulation, rst, immediate) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getValue(rst) - immediate,\r\n        );\r\n    },\r\n}\r\n\r\nexport default sub;","const xor = {\r\n    getName() {\r\n        return 'xor';\r\n    },\r\n    getOpcode() {\r\n        return 0x2000;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => true,\r\n    executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getUValue(rsa) ^ registerBank.getUValue(rsb),\r\n        );\r\n    },\r\n    executeI(simulation, rst, immediate) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getUValue(rst) ^ immediate,\r\n        );\r\n    },\r\n}\r\n\r\nexport default xor;","var map = {\n\t\"./pseudo/hcf.js\": 216,\n\t\"./pseudo/ldi.js\": 217,\n\t\"./pseudo/lsl.js\": 218,\n\t\"./pseudo/pop.js\": 219,\n\t\"./pseudo/push.js\": 220\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 215;","const hcf = {\r\n    getName() {\r\n        return 'hcf';\r\n    },\r\n    isPseudo() {\r\n        return true;\r\n    },\r\n}\r\n\r\nexport default hcf;","const ldi = {\r\n    getName() {\r\n        return 'ldi';\r\n    },\r\n    isPseudo() {\r\n        return true;\r\n    },\r\n}\r\n\r\nexport default ldi;","const lsl = {\r\n    getName() {\r\n        return 'lsl';\r\n    },\r\n    isPseudo() {\r\n        return true;\r\n    },\r\n}\r\n\r\nexport default lsl;","const pop = {\r\n    getName() {\r\n        return 'pop';\r\n    },\r\n    isPseudo() {\r\n        return true;\r\n    },\r\n}\r\n\r\nexport default pop;","const push = {\r\n    getName() {\r\n        return 'push';\r\n    },\r\n    isPseudo() {\r\n        return true;\r\n    },\r\n}\r\n\r\nexport default push;","var map = {\n\t\"./pseudos/_large_immediate.js\": 222,\n\t\"./pseudos/asr.js\": 223,\n\t\"./pseudos/bez.js\": 224,\n\t\"./pseudos/bnz.js\": 225,\n\t\"./pseudos/hcf.js\": 226,\n\t\"./pseudos/ldb.js\": 227,\n\t\"./pseudos/ldi.js\": 228,\n\t\"./pseudos/ldw.js\": 229,\n\t\"./pseudos/lsl.js\": 230,\n\t\"./pseudos/lsr.js\": 231,\n\t\"./pseudos/pop.js\": 232,\n\t\"./pseudos/push.js\": 233,\n\t\"./pseudos/ror.js\": 234,\n\t\"./pseudos/stb.js\": 235,\n\t\"./pseudos/stw.js\": 236\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 221;","import operationsManager from '../../operations/operationsManager';\r\nimport Instruction from '../../instruction';\r\nimport Operand from '../../operand';\r\n\r\nlet supportedOpNames = new Set([ 'and', 'or', 'xor', 'slt', 'add', 'sub', 'bez', 'bnz' ]);\r\n\r\nconst operationLdi = operationsManager.getOperationByName('ldi');\r\n\r\nconst _large_immediate = {\r\n    getNonPseudoInstructions: (instruction, architecture) => {\r\n        if (!supportedOpNames.has(instruction.getOperation().getName())) return [];\r\n\r\n        let operands = instruction.getOperands();\r\n        if (operands.length !== 2) return [];\r\n\r\n        if (operands[0].getType() === 'register') {\r\n            switch (operands[1].getType()) {\r\n                case 'literal':\r\n                    let literal = operands[1].getValue();\r\n                    if (literal > 127 || literal < -128) {\r\n                        return [\r\n                            new Instruction(operationLdi, [ new Operand('at', Operand.REGISTER), new Operand(literal, Operand.LITERAL) ]),\r\n                            new Instruction(instruction.getOperation(), [ operands[0], operands[0], new Operand('at', Operand.REGISTER) ]),\r\n                        ];\r\n                    }\r\n                    break;\r\n                default:\r\n            }\r\n        }\r\n\r\n        return [];\r\n    },\r\n};\r\n\r\nexport default _large_immediate;","import operationsManager from '../../operations/operationsManager';\r\nimport Instruction from '../../instruction';\r\nimport Operand from '../../operand';\r\n\r\nconst operationAsr = operationsManager.getOperationByName('asr');\r\n\r\nconst asr = {\r\n    getOperation: () => operationAsr,\r\n    getNonPseudoInstructions: (instruction, architecture) => {\r\n        if (instruction.getOperation().getName() !== operationAsr.getName()) return [];\r\n\r\n        let operands = instruction.getOperands();\r\n        if (operands.length !== 2) return [];\r\n\r\n        return [\r\n            new Instruction(operationAsr, [ operands[0], operands[1], new Operand('r0', Operand.REGISTER) ] ),\r\n        ];\r\n    },\r\n};\r\n\r\nexport default asr;","import operationsManager from '../../operations/operationsManager';\r\nimport Instruction from '../../instruction';\r\nimport Operand from '../../operand';\r\n\r\nconst operationBez = operationsManager.getOperationByName('bez');\r\nconst operationLdi = operationsManager.getOperationByName('ldi');\r\n\r\nconst bez = {\r\n    getOperation: () => operationBez,\r\n    getNonPseudoInstructions: (instruction, architecture) => {\r\n        if (instruction.getOperation().getName() !== operationBez.getName()) return [];\r\n\r\n        let operands = instruction.getOperands();\r\n        if (operands.length !== 2) return [];\r\n        \r\n        if (operands[0].getType() === 'register') {\r\n            switch (operands[1].getType()) {\r\n                case 'register':\r\n                    // bez r1, r2 -> [ bez r0, r1, r2 ]\r\n                    return [\r\n                        new Instruction(operationBez, [ new Operand('r0', Operand.REGISTER), operands[0], operands[1] ]),\r\n                    ];\r\n                case 'symbol':\r\n                    // bez r1, sym -> [ ldi at, sym   bez r0, r1, at ]\r\n                    return [\r\n                        new Instruction(operationLdi, [ new Operand('at', Operand.REGISTER), operands[1] ]),\r\n                        new Instruction(operationBez, [ new Operand('r0', Operand.REGISTER), operands[0], new Operand('at', Operand.REGISTER) ]),\r\n                    ];\r\n                default:\r\n            }\r\n        }\r\n        return [];\r\n    },\r\n};\r\n\r\nexport default bez;","import operationsManager from '../../operations/operationsManager';\r\nimport Instruction from '../../instruction';\r\nimport Operand from '../../operand';\r\n\r\nconst operationBnz = operationsManager.getOperationByName('bnz');\r\nconst operationLdi = operationsManager.getOperationByName('ldi');\r\n\r\nconst bnz = {\r\n    getOperation: () => operationBnz,\r\n    getNonPseudoInstructions: (instruction, architecture) => {\r\n        if (instruction.getOperation().getName() !== operationBnz.getName()) return [];\r\n\r\n        let operands = instruction.getOperands();\r\n        if (operands.length !== 2) return [];\r\n\r\n        if (operands[0].getType() === 'register') {\r\n            switch (operands[1].getType()) {\r\n                case 'register':\r\n                    // bnz r1, r2 -> [ bnz r0, r1, r2 ]\r\n                    return [\r\n                        new Instruction(operationBnz, [ new Operand('r0', Operand.REGISTER), operands[0], operands[1] ]),\r\n                    ];\r\n                case 'symbol':\r\n                    // bnz r1, sym -> [ ldi at, sym   bnz r0, r1, at ]\r\n                    return [\r\n                        new Instruction(operationLdi, [ new Operand('at', Operand.REGISTER), operands[1] ]),\r\n                        new Instruction(operationBnz, [ new Operand('r0', Operand.REGISTER), operands[0], new Operand('at', Operand.REGISTER) ]),\r\n                    ];\r\n                default:\r\n            }\r\n        }\r\n        return [];\r\n    },\r\n};\r\n\r\nexport default bnz;","import operationsManager from '../../operations/operationsManager';\r\nimport Instruction from '../../instruction';\r\nimport Operand from '../../operand';\r\n\r\nconst operationHcf = operationsManager.getOperationByName('hcf');\r\n\r\nconst hcf = {\r\n    getOperation: () => operationHcf,\r\n    getNonPseudoInstructions: (instruction, architecture) => {\r\n        if (instruction.getOperation().getName() !== operationHcf.getName()) return [];\r\n\r\n        let operands = instruction.getOperands();\r\n        if (operands.length !== 0) return [];\r\n\r\n        // hcf -> [ ldb r0, r0, r0 ]\r\n        return [\r\n            new Instruction(operationHcf, [ \r\n                new Operand('r0', Operand.REGISTER), \r\n                new Operand('r0', Operand.REGISTER), \r\n                new Operand('r0', Operand.REGISTER)\r\n            ]),\r\n        ];\r\n    },\r\n};\r\n\r\nexport default hcf;","import operationsManager from '../../operations/operationsManager';\r\nimport Instruction from '../../instruction';\r\nimport Operand from '../../operand';\r\n\r\nconst operationLdb = operationsManager.getOperationByName('ldb');\r\nconst operationLdi = operationsManager.getOperationByName('ldi');\r\n\r\nconst ldb = {\r\n    getOperation: () => operationLdb,\r\n    getNonPseudoInstructions: (instruction, architecture) => {\r\n        if (instruction.getOperation().getName() !== operationLdb.getName()) return [];\r\n\r\n        let operands = instruction.getOperands();\r\n        if (operands.length !== 2) return [];\r\n\r\n        if (operands[0].getType() === 'register') {\r\n            switch (operands[1].getType()) {\r\n                case 'register':\r\n                    // ldb r1, r2 -> [ ldb r1, r0, r2 ]\r\n                    return [\r\n                        new Instruction(operationLdb, [ operands[0], new Operand('r0', Operand.REGISTER), operands[1] ]),\r\n                    ];\r\n                case 'symbol':\r\n                case 'literal':\r\n                    // ldb r1, 0 -> [ ldi at, 0   ldb r1, r0, at ]\r\n                    return [\r\n                        new Instruction(operationLdi, [ new Operand('at', Operand.REGISTER), operands[1] ]),\r\n                        new Instruction(operationLdb, [ operands[0], new Operand('r0', Operand.REGISTER), new Operand('at', Operand.REGISTER) ]),\r\n                    ];\r\n                default:\r\n            }\r\n        }\r\n        return [];\r\n    },\r\n};\r\n\r\nexport default ldb;","import operationsManager from '../../operations/operationsManager';\r\nimport Instruction from '../../instruction';\r\nimport Operand from '../../operand';\r\nimport utils from '../../../../utils';\r\nconst operation = operationsManager.getOperationByName('ldi');\r\n\r\nconst operationLdr = operationsManager.getOperationByName('ldr');\r\nconst operationLdc = operationsManager.getOperationByName('ldc');\r\n\r\nconst ldi = {\r\n    getOperation: () => operation,\r\n    getNonPseudoInstructions: (instruction, architecture) => {\r\n        if (instruction.getOperation().getName() !== operation.getName()) return [];\r\n\r\n        let operands = instruction.getOperands();\r\n        if (operands.length !== 2) return [];\r\n\r\n        if (operands[0].getType() === 'register') {\r\n            switch (operands[1].getType()) {\r\n                case 'literal':\r\n                    let literal = operands[1].getValue();\r\n                    if (literal < 256 && literal > -128) {\r\n                        // ldi r1, const -> ldr r1, const\r\n                        // -128 < const < 256\r\n                        return [\r\n                            new Instruction(operationLdr, [ operands[0], operands[1] ]),\r\n                        ];\r\n                    } else {\r\n                        // ldi r1, const -> [ ldr r1, const(first byte)   ldc r1, const(second byte) ]  (16 bits)\r\n                        // -128 >= const <= 256\r\n\r\n                        let bytes = utils.numberToBytes(literal, architecture.getByteWidth());\r\n                        if (bytes.length === 0) throw new Error('Convert number to bytes error');\r\n                        return [\r\n                            new Instruction(operationLdr, [ operands[0], new Operand(bytes.shift(), Operand.LITERAL) ]),\r\n                            ...bytes.map(byte => new Instruction(operationLdc, [ operands[0], new Operand(byte, Operand.LITERAL) ])),\r\n                        ];\r\n                    }\r\n                case 'symbol':\r\n                    // ldi r1, sym -> [ ldc r1, sym+0(1 byte)   ldc r1, sym+1(1 byte) ]\r\n                    return new Array(architecture.getByteWidth()).fill(0).map(\r\n                        (x, i) => {\r\n                            return new Instruction(operationLdc, [ \r\n                                operands[0], \r\n                                new Operand(operands[1].getValue(), Operand.SYMBOL).setByteRange({ min: i, max: i}),\r\n                            ]);\r\n                        }\r\n                    );\r\n                default:\r\n            }\r\n        }\r\n        return [];\r\n    },\r\n};\r\n\r\nexport default ldi;","import operationsManager from '../../operations/operationsManager';\r\nimport Instruction from '../../instruction';\r\nimport Operand from '../../operand';\r\n\r\nconst operationLdw = operationsManager.getOperationByName('ldw');\r\nconst operationLdi = operationsManager.getOperationByName('ldi');\r\n\r\nconst ldw = {\r\n    getOperation: () => operationLdw,\r\n    getNonPseudoInstructions: (instruction, architecture) => {\r\n        if (instruction.getOperation().getName() !== operationLdw.getName()) return [];\r\n\r\n        let operands = instruction.getOperands();\r\n        if (operands.length !== 2) return [];\r\n\r\n        if (operands[0].getType() === 'register') {\r\n            switch (operands[1].getType()) {\r\n                case 'register':\r\n                    // ldw r1, r2 -> [ ldw r1, r0, r2 ]\r\n                    return [\r\n                        new Instruction(operationLdw, [ operands[0], new Operand('r0', Operand.REGISTER), operands[1] ]),\r\n                    ];\r\n                case 'symbol':\r\n                case 'literal':\r\n                    // ldw r1, lit -> [ ldi at, lit   ldb r1, r0, at ]\r\n                    return [\r\n                        new Instruction(operationLdi, [ new Operand('at', Operand.REGISTER), operands[1] ]),\r\n                        new Instruction(operationLdw, [ operands[0], new Operand('r0', Operand.REGISTER), new Operand('at', Operand.REGISTER) ]),\r\n                    ];\r\n                default:\r\n            }\r\n        }\r\n        return [];\r\n    },\r\n};\r\n\r\nexport default ldw;","import operationsManager from '../../operations/operationsManager';\r\nimport Instruction from '../../instruction';\r\n\r\nconst operationLsl = operationsManager.getOperationByName('lsl');\r\nconst operationAdd = operationsManager.getOperationByName('add');\r\n\r\nconst lsl = {\r\n    getOperation: () => operationLsl,\r\n    getNonPseudoInstructions: (instruction, architecture) => {\r\n        if (instruction.getOperation().getName() !== operationLsl.getName()) return [];\r\n\r\n        let operands = instruction.getOperands();\r\n        if (operands.length !== 2) return [];\r\n\r\n        if (operands[0].getType() === 'register') {\r\n            switch (operands[1].getType()) {\r\n                case 'register':\r\n                    // lsl r1, r2 -> [ add r1, r2, r2 ]\r\n                    return [\r\n                        new Instruction(operationAdd, [ operands[0], operands[1], operands[1] ]),\r\n                    ];\r\n                default:\r\n            }\r\n        }\r\n        return [];\r\n    },\r\n};\r\n\r\nexport default lsl;","import operationsManager from '../../operations/operationsManager';\r\nimport Instruction from '../../instruction';\r\nimport Operand from '../../operand';\r\n\r\nconst operationLsr = operationsManager.getOperationByName('lsr');\r\n\r\nconst lsr = {\r\n    getOperation: () => operationLsr,\r\n    getNonPseudoInstructions: (instruction, architecture) => {\r\n        if (instruction.getOperation().getName() !== operationLsr.getName()) return [];\r\n\r\n        let operands = instruction.getOperands();\r\n        if (operands.length !== 2) return [];\r\n\r\n        return [\r\n            new Instruction(operationLsr, [ operands[0], operands[1], new Operand('r0', Operand.REGISTER) ]),\r\n        ];\r\n    },\r\n};\r\n\r\nexport default lsr;","import operationsManager from '../../operations/operationsManager';\r\nimport Instruction from '../../instruction';\r\nimport Operand from '../../operand';\r\n\r\nconst operationPop = operationsManager.getOperationByName('pop');\r\nconst operationLdw = operationsManager.getOperationByName('ldw');\r\nconst operationAdd = operationsManager.getOperationByName('add');\r\n\r\nconst pop = {\r\n    getOperation: () => operationLdw,\r\n    getNonPseudoInstructions: (instruction, architecture) => {\r\n        if (instruction.getOperation().getName() !== operationPop.getName()) return [];\r\n\r\n        let operands = instruction.getOperands();\r\n        if (operands.length !== 1) return [];\r\n\r\n        if (operands[0].getType() === 'register') {\r\n            // pop r1 -> [ ldw r1, sp   add sp, 2 ]\r\n            return [\r\n                new Instruction(operationLdw, [ operands[0], new Operand('sp', Operand.REGISTER) ]),\r\n                new Instruction(operationAdd, [ new Operand('sp', Operand.REGISTER), new Operand(2, Operand.LITERAL) ]),\r\n            ];\r\n        }\r\n        return [];\r\n    },\r\n};\r\n\r\nexport default pop;","import operationsManager from '../../operations/operationsManager';\r\nimport Instruction from '../../instruction';\r\nimport Operand from '../../operand';\r\n\r\nconst operationPush = operationsManager.getOperationByName('push');\r\nconst operationSub = operationsManager.getOperationByName('sub');\r\nconst operationStw = operationsManager.getOperationByName('stw');\r\n\r\nconst push = {\r\n    getOperation: () => operationPush,\r\n    getNonPseudoInstructions: (instruction, architecture) => {\r\n        if (instruction.getOperation().getName() !== operationPush.getName()) return [];\r\n\r\n        let operands = instruction.getOperands();\r\n        if (operands.length !== 1) return [];\r\n\r\n        if (operands[0].getType() === 'register') {\r\n            // push r1 -> [ sub sb, 2   stw r1, sp ]\r\n            return [\r\n                new Instruction(operationSub, [ new Operand('sp', Operand.REGISTER), new Operand(2, Operand.LITERAL) ]),\r\n                new Instruction(operationStw, [ operands[0], new Operand('sp', Operand.REGISTER) ]),\r\n            ];\r\n        }\r\n        return [];\r\n    },\r\n};\r\n\r\nexport default push;","import operationsManager from '../../operations/operationsManager';\r\nimport Instruction from '../../instruction';\r\nimport Operand from '../../operand';\r\n\r\nconst operationRor = operationsManager.getOperationByName('ror');\r\n\r\nconst ror = {\r\n    getOperation: () => operationRor,\r\n    getNonPseudoInstructions: (instruction, architecture) => {\r\n        if (instruction.getOperation().getName() !== operationRor.getName()) return [];\r\n\r\n        let operands = instruction.getOperands();\r\n        if (operands.length !== 2) return [];\r\n\r\n        return [\r\n            new Instruction(operationRor, [ operands[0], operands[1], new Operand('r0', Operand.REGISTER) ]),\r\n        ];\r\n    },\r\n};\r\n\r\nexport default ror;","import operationsManager from '../../operations/operationsManager';\r\nimport Instruction from '../../instruction';\r\nimport Operand from '../../operand';\r\n\r\nconst operationStb = operationsManager.getOperationByName('stb');\r\nconst operationLdi = operationsManager.getOperationByName('ldi');\r\n\r\nconst stb = {\r\n    getOperation: () => operationStb,\r\n    getNonPseudoInstructions: (instruction, architecture) => {\r\n        if (instruction.getOperation().getName() !== operationStb.getName()) return [];\r\n\r\n        let operands = instruction.getOperands();\r\n        if (operands.length !== 2) return [];\r\n\r\n        if (operands[0].getType() === 'register') {\r\n            switch (operands[1].getType()) {\r\n                case 'register':\r\n                    // stb r1, r2 -> [ stb r0, r1, r2 ]\r\n                    return [\r\n                        new Instruction(operationStb, [ new Operand('r0', Operand.REGISTER), operands[0], operands[1] ]),\r\n                    ];\r\n                case 'symbol':\r\n                case 'literal':\r\n                    // stb r1, lit -> [ ldi at, lit   stb r0, r1, at ]\r\n                    return [\r\n                        new Instruction(operationLdi, [ new Operand('at', Operand.REGISTER), operands[1] ]),\r\n                        new Instruction(operationStb, [ new Operand('r0', Operand.REGISTER), operands[0], new Operand('at', Operand.REGISTER) ]),\r\n                    ];\r\n                default:\r\n            }\r\n        }\r\n        return [];\r\n    },\r\n};\r\n\r\nexport default stb;","import operationsManager from '../../operations/operationsManager';\r\nimport Instruction from '../../instruction';\r\nimport Operand from '../../operand';\r\n\r\nconst operationStw = operationsManager.getOperationByName('stw');\r\nconst operationLdi = operationsManager.getOperationByName('ldi');\r\n\r\nconst stw = {\r\n    getOperation: () => operationStw,\r\n    getNonPseudoInstructions: (instruction, architecture) => {\r\n        if (instruction.getOperation().getName() !== operationStw.getName()) return [];\r\n\r\n        let operands = instruction.getOperands();\r\n        if (operands.length !== 2) return [];\r\n\r\n        if (operands[0].getType() === 'register') {\r\n            switch (operands[1].getType()) {\r\n                case 'register':\r\n                    // stw r1, r2 -> [ stw r0, r1, r2 ]\r\n                    return [\r\n                        new Instruction(operationStw, [ new Operand('r0', Operand.REGISTER), operands[0], operands[1] ]),\r\n                    ];\r\n                case 'symbol':\r\n                case 'literal':\r\n                    // stw r1, lit -> [ ldi at, lit   stw r0, r1, at ]\r\n                    return [\r\n                        new Instruction(operationLdi, [ new Operand('at', Operand.REGISTER), operands[1] ]),\r\n                        new Instruction(operationStw, [ new Operand('r0', Operand.REGISTER), operands[0], new Operand('at', Operand.REGISTER) ]),\r\n                    ];\r\n                default:\r\n            }\r\n        }\r\n        return [];\r\n    },\r\n};\r\n\r\nexport default stw;","import React, { Component } from 'react';\nimport { HashRouter, Route } from \"react-router-dom\";\nimport Home from '../home/Home.module';\nimport styles from './App.module.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { };\n  }\n\n  render() {\n    return (\n     <HashRouter basename='/'>\n      <div className={styles.container}>\n       <Route exact path=\"/\" component={Home} />\n      </div>\n     </HashRouter>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app/App.module';\nimport './styles.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);","import Instruction from './instruction';\r\n\r\nimport architectureManager from './architectureManager';\r\nimport operationsManager from './operations/operationsManager';\r\nimport pseudoManager from './pseudoInstructionConversions/pseudoManager';\r\nimport pseudoConverter from './pseudoInstructionConversions/pseudoConverter';\r\n\r\nimport assembler from './assembler/assembler';\r\nimport disassembler from './disassembler/disassembler';\r\n\r\nimport memory from './simulator/memory';\r\nimport memoryStorage16 from './simulator/memoryStorage16';\r\nimport registerBank from './simulator/registerBank';\r\n\r\nimport simulation from './simulator/simulation';\r\n\r\narchitectureManager.setup();\r\noperationsManager.setup();\r\npseudoManager.setup();\r\n\r\nconst asm = {\r\n    Instruction,\r\n    architectureManager,\r\n    operationsManager,\r\n    pseudoManager,\r\n    pseudoConverter,\r\n    assembler,\r\n    disassembler,\r\n    memory,\r\n    memoryStorage16,\r\n    registerBank,\r\n    simulation,\r\n};\r\n\r\nexport default asm;"],"sourceRoot":""}