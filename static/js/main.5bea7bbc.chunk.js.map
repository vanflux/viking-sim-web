{"version":3,"sources":["business/asm/operand.js","business/asm/instruction.js","business/asm/operations/operationsManager.js","business/utils.js","components/control/Control.module.css","components/memoryViewer/MemoryViewer.module.css","components/registers/Registers.module.css","components/symbolTable/SymbolTable.module.css","components/console/Console.module.css","utils.js","components/assembled/Assembled.module.css","components/window/Window.module.css","business/asm/pseudoInstructionConversions/pseudoManager.js","business/asm/architectureManager.js","business/asm/architecture.js","business/asm/simulator/memory.js","business/asm/simulator/memoryStorage16.js","business/asm/simulator/registerBank.js","business/asm/simulator/simulation.js","business/asm/pseudoInstructionConversions/pseudoConverter.js","business/asm/disassembler/disassembler.js","business/asm/assembler/instructionParser.js","business/asm/assembler/dataParser.js","business/asm/assembler/commentParser.js","business/asm/assembler/lineParser.js","business/asm/assembler/assembler.js","components/window/Window.module.js","components/home/Home.module.js","components/home/Home.module.css","components/simulator/Simulator.module.css","components/program/Program.module.css","components/simulator/Simulator.module.js","components/registers/Registers.module.js","components/program/Program.module.js","components/symbolTable/SymbolTable.module.js","components/control/Control.module.js","components/console/Console.module.js","components/assembled/Assembled.module.js","components/memoryViewer/MemoryViewer.module.js","components/app/App.module.css","business/asm/operations sync /basic/.+/.js$","business/asm/operations/basic/adc.js","business/asm/operations/basic/add.js","business/asm/operations/basic/and.js","business/asm/operations/basic/asr.js","business/asm/operations/basic/bez.js","business/asm/operations/basic/bnz.js","business/asm/operations/basic/ldb.js","business/asm/operations/basic/ldc.js","business/asm/operations/basic/ldr.js","business/asm/operations/basic/ldw.js","business/asm/operations/basic/lsr.js","business/asm/operations/basic/or.js","business/asm/operations/basic/ror.js","business/asm/operations/basic/sbc.js","business/asm/operations/basic/slt.js","business/asm/operations/basic/sltu.js","business/asm/operations/basic/stb.js","business/asm/operations/basic/stw.js","business/asm/operations/basic/sub.js","business/asm/operations/basic/xor.js","business/asm/operations sync /pseudo/.+/.js$","business/asm/operations/pseudo/hcf.js","business/asm/operations/pseudo/ldi.js","business/asm/operations/pseudo/lsl.js","business/asm/operations/pseudo/pop.js","business/asm/operations/pseudo/push.js","business/asm/pseudoInstructionConversions sync /pseudos/.+/.js$","business/asm/pseudoInstructionConversions/pseudos/_large_immediate.js","business/asm/pseudoInstructionConversions/pseudos/asr.js","business/asm/pseudoInstructionConversions/pseudos/bez.js","business/asm/pseudoInstructionConversions/pseudos/bnz.js","business/asm/pseudoInstructionConversions/pseudos/hcf.js","business/asm/pseudoInstructionConversions/pseudos/ldb.js","business/asm/pseudoInstructionConversions/pseudos/ldi.js","business/asm/pseudoInstructionConversions/pseudos/ldw.js","business/asm/pseudoInstructionConversions/pseudos/lsl.js","business/asm/pseudoInstructionConversions/pseudos/lsr.js","business/asm/pseudoInstructionConversions/pseudos/pop.js","business/asm/pseudoInstructionConversions/pseudos/push.js","business/asm/pseudoInstructionConversions/pseudos/ror.js","business/asm/pseudoInstructionConversions/pseudos/stb.js","business/asm/pseudoInstructionConversions/pseudos/stw.js","components/app/App.module.js","index.js","business/asm/index.js"],"names":["Operand","value","type","this","byteRange","REGISTER","SYMBOL","LITERAL","Instruction","operation","operands","getType","isPseudo","TYPE_R","supportR","TYPE_I","supportI","length","architecture","Error","getName","opcode","getOpcode","finalCode","getRegisterCode","getValue","rst","immediate","utils","signedToUnsigned","simulation","a","rsa","rsb","executeR","executeI","map","operand","signedNumberToHex","join","code","rstCode","unsignedToSigned","getRegisterNameByCode","operationsManager","getOperationByOpcode","rsaCode","rsbCode","basicOps","pseudoOps","basicOpsByOpcode","basicOpsByName","pseudoOpsByName","basicOpsNames","pseudoOpsNames","opsNames","getOperationByName","name","setup","basicMs","require","keys","key","default","pseudoMs","Object","fromEntries","op","concat","getOperationNames","getBasicOperationByName","getPseudoOperationByName","isOperationName","isBasicOperationName","isPseudoOperationName","number","byteWidth","mask","Math","pow","toString","padStart","isNegative","numberToBytes","bytes","i","unshift","bytesToNumber","byte","isInteger","str","isNaN","parseInt","sleep","ms","Promise","resolve","setTimeout","module","exports","callLimiter","func","delay","thId","lastArgs","args","pseudos","pseudoManager","pseudosMs","getPseudoInstructions","_16","_32","Architecture","bitWidth","registers","registersByName","entries","registerName","register","aliases","aliasName","reduce","b","registersNameByCode","hasRegisterName","architectureManager","getViking16Arch","getViking32Arch","Memory","storage","result","reset","emit","getDataLength","getBytesFromRange","getWordsFromRange","address","onReadByte","newValue","readByte","onReadWord","readWord","onWriteByte","writeByte","word","onWriteWord","writeWord","getBitWidth","MemoryStorage16","EventEmitter","data","Array","fill","byte0","byte1","start","end","slice","words","push","RegisterBank","registerInfos","registerByteWidth","forEach","setValue","oldValue","archRegisters","getRegisters","getByteWidth","defaultBreakpointHandler","pc","Simulation","memory","registerBank","codeExecutionMaxPC","runId","running","ended","stopping","waitingInput","stepInterval","cycles","inputBytes","breakpointHandler","setupMemoryHandlers","stop","carry","setPC","setCycles","resetInput","writeObjCodeMemory","readInputChar","readInputInt","String","fromCharCode","getNextInputByte","zeroCharCode","charCodeAt","nineCharCode","minusCharCode","isMinusChar","c","isNumberChar","charToNumber","int","firstC","min","rawObjCode","wordArray","match","x","instruction","disassemble","execute","incrementPC","incrementCycles","step","console","error","clearTimeout","runner","bind","shift","getMask","getPC","handler","PseudoConverter","instructions","getNonPseudoInstructions","convInstruction","convInstructions","convert","splice","Disassembler","rawHex","arrayLiteral","exc","InstructionParser","parseOperation","parseOperands","isArray","operationName","operandValue","isRegisterName","operandsValues","split","trim","getInstructionOperandValueType","DataParser","parseToBytes","bytesToData","values","lastC","startIndex","capturingQuote","unraw","substring","extractValues","trimmed","splitted","some","curBytes","j","CommentParser","isComment","comment","matches","LineParser","instructionParser","dataParser","commentParser","symbol","rest","line","getSymbolAndRest","sanitizedRest","parse","isInstruction","Assembler","programData","pseudoConverter","lines","sequence","symbolTable","objectCodeArray","pass1","pass2","pass3","rawObjectCode","lineParser","parsed","message","getOperands","symbolValue","finalValue","getByteRange","max","setType","item","Number","assemble","Window","props","containerRef","createRef","description","state","width","current","style","height","className","styles","container","ref","header","title","content","children","Component","Home","instance","keyIndex","windowsContainerRef","aboutRef","windows","spawnWindow","remove","comp","window","setState","windowsContainer","aboutContainer","href","onClick","closeAbout","Simulator","programRef","assembledRef","symbolTableRef","controlRef","consoleRef","curArchitecture","createFromArchitecture","stepDelay","simulationOnRunErrorHandler","writeLine","simulationOnRunEndedHandler","simulationOnBreakpointHandler","simulationWriteCharHandler","char","write","simulationWriteIntHandler","on","off","getText","pseudoInstructions","assembler","assemblerResult","disassembler","disassemblerResult","disassembly","setRawObjCode","setAssembled","setSymbolTable","text","buffer","Buffer","from","addInput","isRunning","hasEnded","curText","getAutoAssemble","lastText","display","flexDirection","flex","overflow","rightArea","justifyContent","onAssemble","onBeforeRun","onError","onControlError","onInput","Registers","getRegisterInfos","self","valueUpdateHandler","generalRegisterList","infos","Register","getUValue","pcRegister","registerContainer","alreadyCreatedLang","Program","onChange","regNames","getRegisterNames","monaco","languages","id","setMonarchTokensProvider","operationKeywords","registerKeywords","decimalNumbers","hexNumbers","escapes","tokenizer","root","cases","token","bracket","next","string","registerCompletionItemProvider","provideCompletionItems","suggestions","opName","label","detail","documentation","kind","CompletionItemKind","Function","insertText","editor","defineTheme","base","inherit","rules","foreground","getModel","onDidChangeContent","program","language","theme","beforeMount","onEditorWillMount","onMount","onEditorMount","SymbolTable","columns","field","headerName","rows","newRows","symbolName","assign","gridContainer","classes","getRowClassName","row","getCellClassName","cell","disableDensitySelector","disableColumnMenu","disableColumnSelector","hideFooter","hideFooterPagination","hideFooterRowCount","hideFooterSelectedRowCount","showCellRightBorder","showColumnRightBorder","headerHeight","density","GridDensityTypes","Compact","Control","onAutoAssembleChanged","autoAssemble","cyclesUpdateHandler","e","target","setStepInterval","run","checked","cycleArea","cycleLabel","getCycles","autoAssembleChanged","margin","btn","assembleClick","resetClick","stopClick","runClick","stepClick","delayLabel","delayInput","getStepInterval","stepIntervalChanged","Console","outputRef","simulationInBufHandler","inputBuffer","setInputBuffer","scrollTop","scrollHeight","toLowerCase","outAndInBufContainer","output","readOnly","spellCheck","getInput","inputText","placeholder","onKeyDown","inputKeyDown","Assembled","onBreakpoint","breakpointDecorations","breakpoints","Set","curLineRunningDecorationId","curLineRunningDecoration","setBreakpointHandler","has","pcUpdateHandler","setLineRunning","simulationResetHandler","removeAllBreakpoints","breakpointList","setBreakpoint","lineNumber","lineCount","getLineCount","bpDec","deltaDecorations","range","Range","options","isWholeLine","glyphMarginClassName","breakpoint","add","delete","removeBreakpoint","currentLineRunning","revealLine","oldDec","updateOptions","wordBasedSuggestions","automaticLayout","lineDecorationsWidth","glyphMargin","minimap","enabled","lineNumbers","n","onMouseDown","position","toggleBreakpoint","MemoryViewer","tbodyRef","memoryScrollRef","memoryScrollAuxRef","memoryAreaRef","rowsToShow","dataItemBytes","rowOffset","wordHighlightContexts","dataCount","getDataCount","setScrollHeight","getData","recreateTable","onwheel","deltaY","preventDefault","onscroll","floor","getBoundingClientRect","onResetHandler","onStorageWriteByteHandler","dataOffset","updateByteAt","onStorageWriteWordHandler","tbyteDiv","getByteElem","textContent","highlightByte","offset","column","childNodes","elem","ctx","setInterval","clearInterval","rowsCount","ceil","html","memoryColumnNumber","_x","y","memoryRowNumber","memDataHtml","memoryData","innerHTML","memoryScroll","memoryAreaContainer","memoryArea","webpackContext","req","webpackContextResolve","__webpack_require__","o","adc","getRegisterBank","getCarry","and","asr","setCarry","bez","bnz","ldb","getMemory","ldc","ldr","ldw","lsr","or","ror","getArchitecture","sbc","slt","sltu","stb","stw","sub","xor","hcf","ldi","lsl","pop","supportedOpNames","operationLdi","_large_immediate","getOperation","literal","operationAsr","operationBez","operationBnz","operationHcf","operationLdb","operationLdr","operationLdc","setByteRange","operationLdw","operationLsl","operationAdd","operationLsr","operationPop","operationPush","operationSub","operationStw","operationRor","operationStb","App","basename","exact","path","component","ReactDOM","render","StrictMode","document","getElementById","memoryStorage16"],"mappings":"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","file":"static/js/main.5bea7bbc.chunk.js","sourcesContent":["export default class Operand {\r\n    static REGISTER = 'register';\r\n    static SYMBOL = 'symbol';\r\n    static LITERAL = 'literal';\r\n\r\n    constructor(value, type) {\r\n        this.value = value;\r\n        this.type = type;\r\n        this.byteRange = null;\r\n    }\r\n\r\n    setByteRange(byteRange) {\r\n        this.byteRange = byteRange;\r\n        return this;\r\n    }\r\n\r\n    setValue(value) {\r\n        this.value = value;\r\n        return this;\r\n    }\r\n    \r\n    setType(type) {\r\n        this.type = type;\r\n        return this;\r\n    }\r\n\r\n    getValue() {\r\n        return this.value;\r\n    }\r\n    \r\n    getType() {\r\n        return this.type;\r\n    }\r\n\r\n    getByteRange() {\r\n        return this.byteRange;\r\n    }\r\n}","import operationsManager from './operations/operationsManager';\r\nimport Operand from './operand';\r\nimport utils from '../utils';\r\n\r\nclass Instruction {\r\n    static TYPE_R = 'R';\r\n    static TYPE_I = 'I';\r\n    \r\n    static disassemble(code, architecture) {\r\n        let imm = (code >> 11) & 0b1;    \r\n        if (imm === 1) {\r\n            let opcode = code & 0b1111000000000000;     // 1111 0000 0000 0000\r\n            let rstCode = (code >> 8) & 0b111;          //      0111 0000 0000\r\n            let immediate = code & 0b11111111;          //           1111 1111\r\n            immediate = utils.unsignedToSigned(immediate, 1);\r\n            \r\n            let rst = architecture.getRegisterNameByCode(rstCode);\r\n            \r\n            if (!rst) throw new Error('rst doesnt exist');\r\n    \r\n            let operation = operationsManager.getOperationByOpcode(opcode);\r\n            if (!operation) throw new Error('operation doesnt exist');\r\n    \r\n            let operands = [\r\n                new Operand(rst, Operand.REGISTER),\r\n                new Operand(immediate, Operand.LITERAL),\r\n            ];\r\n            \r\n            return new Instruction(operation, operands);\r\n        } else {\r\n            let opcode = code & 0b1111000000000011;     // 1111 0000 0000 0011\r\n            let rstCode = (code >> 8) & 0b111;          //      0111 0000 0000\r\n            let rsaCode = (code >> 5) & 0b111;          //           1110 0000\r\n            let rsbCode = (code >> 2) & 0b111;          //              1 1100\r\n    \r\n            let rst = architecture.getRegisterNameByCode(rstCode);\r\n            let rsa = architecture.getRegisterNameByCode(rsaCode);\r\n            let rsb = architecture.getRegisterNameByCode(rsbCode);\r\n            if (!rst) throw new Error('rst doesnt exist');\r\n            if (!rsa) throw new Error('rsa doesnt exist');\r\n            if (!rsb) throw new Error('rsb doesnt exist');\r\n    \r\n            let operation = operationsManager.getOperationByOpcode(opcode);\r\n            if (!operation) throw new Error('operation doesnt exist');\r\n    \r\n            let operands = [\r\n                new Operand(rst, Operand.REGISTER),\r\n                new Operand(rsa, Operand.REGISTER),\r\n                new Operand(rsb, Operand.REGISTER),\r\n            ];\r\n    \r\n            return new Instruction(operation, operands);\r\n        }\r\n    }\r\n\r\n    constructor(operation, operands) {\r\n        this.operation = operation;\r\n        this.operands = operands;\r\n    }\r\n    \r\n    isPseudo() {\r\n        let type = this.getType();\r\n        if (type === null) return true;\r\n        if (this.operation === null) return true;\r\n        if (this.operation.isPseudo()) return true;\r\n        switch (type) {\r\n            case Instruction.TYPE_R:\r\n                if (!this.operation.supportR()) {\r\n                    return true;\r\n                } else {\r\n                    break;\r\n                }\r\n            case Instruction.TYPE_I:\r\n                if (!this.operation.supportI()) {\r\n                    return true;\r\n                } else {\r\n                    break;\r\n                }\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n\r\n    getType() {\r\n        if (this.operands.length === 2 && \r\n            this.operands[0].getType() === Operand.REGISTER &&\r\n            this.operands[1].getType() === Operand.LITERAL) return Instruction.TYPE_I;\r\n        if (this.operands.length === 3 && \r\n            this.operands[0].getType() === Operand.REGISTER &&\r\n            this.operands[1].getType() === Operand.REGISTER &&\r\n            this.operands[2].getType() === Operand.REGISTER) return Instruction.TYPE_R;\r\n        return null;\r\n    }\r\n\r\n    assemble(architecture) {\r\n        if (!this.operation) throw new Error('Operation doesnt exists');\r\n        if (this.operation.getName() === 'hcf') return 0x0003;\r\n        if (this.operation.isPseudo()) throw new Error('Operation is pseudo-operation');\r\n        if (!this.operands) throw new Error('Operands doesnt exists');\r\n\r\n        let type = this.getType();\r\n        if (!type) throw new Error('Invalid instruction type');\r\n\r\n        let opcode = this.operation.getOpcode();\r\n        if (!type) throw new Error('Operation doesnt have opcode');\r\n\r\n        let finalCode = 0x0000;\r\n        switch (type) {\r\n            case Instruction.TYPE_R: {\r\n                let rst = architecture.getRegisterCode(this.operands[0].getValue());\r\n                let rsa = architecture.getRegisterCode(this.operands[1].getValue());\r\n                let rsb = architecture.getRegisterCode(this.operands[2].getValue());\r\n                finalCode |= opcode;    // operation code\r\n                finalCode |= 0 << 11;   // imm\r\n                finalCode |= rst << 8;\r\n                finalCode |= rsa << 5;\r\n                finalCode |= rsb << 2;\r\n                break;\r\n            }\r\n            case Instruction.TYPE_I: {\r\n                let rst = architecture.getRegisterCode(this.operands[0].getValue());\r\n                let immediate = this.operands[1].getValue();\r\n                immediate = utils.signedToUnsigned(immediate, 1);\r\n\r\n                finalCode |= opcode;    // operation code\r\n                finalCode |= 1 << 11;   // imm\r\n                finalCode |= rst << 8;\r\n                finalCode |= immediate;\r\n                break;\r\n            }\r\n            default:\r\n        }\r\n        return finalCode;\r\n    }\r\n\r\n    getOperation() {\r\n        return this.operation;\r\n    }\r\n    \r\n    getOperands() {\r\n        return this.operands;\r\n    }\r\n\r\n    async execute(simulation) {\r\n        if (!this.operation) throw new Error('Instruction has no operation');\r\n\r\n        let type = this.getType();\r\n        if (!type) throw new Error('Invalid instruction type');\r\n\r\n        switch (type) {\r\n            case Instruction.TYPE_R: {\r\n                let rst = this.operands[0].getValue();\r\n                let rsa = this.operands[1].getValue();\r\n                let rsb = this.operands[2].getValue();\r\n                \r\n                if (typeof this.operation.executeR === 'function') {\r\n                    await this.operation.executeR(simulation, rst, rsa, rsb);\r\n                } else {\r\n                    throw new Error('The operation \"' + this.operation.getName() + '\" doesnt support type R');\r\n                }\r\n                break;\r\n            }\r\n            case Instruction.TYPE_I: {\r\n                let rst = this.operands[0].getValue();\r\n                let immediate = this.operands[1].getValue();\r\n                \r\n                if (typeof this.operation.executeI === 'function') {\r\n                    await this.operation.executeI(simulation, rst, immediate);\r\n                } else {\r\n                    throw new Error('The operation \"' + this.operation.getName() + '\" doesnt support type I');\r\n                }\r\n                break;\r\n            }\r\n            default:\r\n        }\r\n    }\r\n\r\n    toString() {\r\n        return this.operation.getName() + ' ' + this.operands.map(operand => {\r\n            let value = operand.getValue();\r\n            if (operand.getType() === Operand.LITERAL) {\r\n                value = '0x'+utils.signedNumberToHex(value, 1);\r\n            }\r\n            return value;\r\n        }).join(',');\r\n    }\r\n}\r\n\r\nexport default Instruction;","\r\nlet basicOps = [];\r\nlet pseudoOps = [];\r\nlet basicOpsByOpcode = {};\r\nlet basicOpsByName = {};\r\nlet pseudoOpsByName = {};\r\nlet basicOpsNames = [];\r\nlet pseudoOpsNames = [];\r\nlet opsNames = [];\r\n\r\nfunction setup() {\r\n    const basicMs = require.context('./', true, /basic\\/.+\\.js$/);\r\n    basicOps = basicMs.keys().map(key => basicMs(key, true).default);\r\n    const pseudoMs = require.context('./', true, /pseudo\\/.+\\.js$/);\r\n    pseudoOps = pseudoMs.keys().map(key => pseudoMs(key, true).default);\r\n\r\n    basicOpsByOpcode = Object.fromEntries(\r\n        basicOps.map(op => [\r\n            op.getOpcode(), // key\r\n            op              // value\r\n        ])\r\n    );\r\n\r\n    basicOpsByName = Object.fromEntries(\r\n        basicOps.map(op => [\r\n            op.getName(),   // key\r\n            op              // value\r\n        ])\r\n    );\r\n    pseudoOpsByName = Object.fromEntries(\r\n        pseudoOps.map(op => [\r\n            op.getName(),   // key\r\n            op              // value\r\n        ])\r\n    );\r\n\r\n    basicOpsNames = Object.keys(basicOpsByName);\r\n    pseudoOpsNames = Object.keys(pseudoOpsByName);\r\n    opsNames = basicOpsNames.concat(pseudoOpsNames);\r\n}\r\n\r\nfunction getOperationNames() {\r\n    return opsNames;\r\n}\r\n\r\nfunction getOperationByName(name) {\r\n    return basicOpsByName[name] || pseudoOpsByName[name];\r\n}\r\n\r\nfunction getBasicOperationByName(name) {\r\n    return basicOpsByName[name];\r\n}\r\n\r\nfunction getPseudoOperationByName(name) {\r\n    return pseudoOpsByName[name];\r\n}\r\n\r\nfunction isOperationName(name) {\r\n    return getOperationByName(name) != null;\r\n}\r\n\r\nfunction isBasicOperationName(name) {\r\n    return basicOpsByName[name] != null;\r\n}\r\n\r\nfunction isPseudoOperationName(name) {\r\n    return pseudoOpsByName[name] != null;\r\n}\r\n\r\nfunction getOperationByOpcode(opcode) {\r\n    return basicOpsByOpcode[opcode];\r\n}\r\n\r\nconst operationsManager = {\r\n    setup,\r\n    getOperationNames,\r\n    getOperationByName,\r\n    getBasicOperationByName,\r\n    getPseudoOperationByName,\r\n    isOperationName,\r\n    isBasicOperationName,\r\n    isPseudoOperationName,\r\n    getOperationByOpcode,\r\n};\r\n\r\nexport default operationsManager;","function signedNumberToHex(number, byteWidth=4) {\r\n    return signedToUnsigned(number, byteWidth).toString(16).padStart(byteWidth * 2, '0');\r\n}\r\n\r\nfunction signedToUnsigned(number, byteWidth=2) {\r\n    let mask = Math.pow(2, byteWidth * 8) - 1;\r\n    return (((number >>> 0) & mask) >>> 0);\r\n}\r\n\r\nfunction unsignedToSigned(number, byteWidth=2) {\r\n\tlet mask = Math.pow(2, byteWidth * 8) - 1;\r\n\tlet isNegative = (number >> (byteWidth * 8 - 1)) & 1;\r\n\tif (isNegative) {\r\n\t\treturn -(((~number+1) & mask) >>> 0);\r\n\t} else {\r\n\t\treturn number & mask;\r\n\t}\r\n}\r\n\r\nfunction numberToBytes(number, byteWidth=2) {\r\n    let bytes = [];\r\n    for (let i = 0; i < byteWidth; i++) {\r\n        bytes.unshift(number & 0xff);\r\n        number >>= 8;\r\n    }\r\n    return bytes;\r\n}\r\n\r\nfunction bytesToNumber(bytes) {\r\n    let number = 0;\r\n    for (let byte of bytes) {\r\n        number <<= 8;\r\n        number |= byte;\r\n    }\r\n    return number;\r\n}\r\n\r\nfunction isInteger(str) {\r\n    return !isNaN(parseInt(str));\r\n}\r\n\r\nfunction sleep(ms) {\r\n    if (ms <= 0) return 0;\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nconst utils = {\r\n    signedNumberToHex,\r\n    signedToUnsigned,\r\n    unsignedToSigned,\r\n    numberToBytes,\r\n    bytesToNumber,\r\n    isInteger,\r\n    sleep,\r\n};\r\n\r\nexport default utils;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Control_container__Day7V\",\"content\":\"Control_content__3iIfu\",\"title\":\"Control_title__Fct6q\",\"cycleArea\":\"Control_cycleArea__3W0Sp\",\"cycleLabel\":\"Control_cycleLabel__o6-yf\",\"btn\":\"Control_btn__S6MpS\",\"delayLabel\":\"Control_delayLabel__1Cctf\",\"delayInput\":\"Control_delayInput__lHshL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"MemoryViewer_container__36x1j\",\"content\":\"MemoryViewer_content__5lhVs\",\"memoryScroll\":\"MemoryViewer_memoryScroll__ejajI\",\"memoryAreaContainer\":\"MemoryViewer_memoryAreaContainer__31uQe\",\"memoryArea\":\"MemoryViewer_memoryArea__1TCDi\",\"memoryData\":\"MemoryViewer_memoryData__2-C4U\",\"memoryRowNumber\":\"MemoryViewer_memoryRowNumber__3Fx2o\",\"memoryColumnNumber\":\"MemoryViewer_memoryColumnNumber__c5w2Q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Registers_container__2s4UW\",\"title\":\"Registers_title__1C9vy\",\"content\":\"Registers_content__3IXg7\",\"generalRegisterList\":\"Registers_generalRegisterList__FB2qd\",\"pcRegister\":\"Registers_pcRegister__3EfW7\",\"registerContainer\":\"Registers_registerContainer__3HYMJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"SymbolTable_container__-A6je\",\"title\":\"SymbolTable_title__1Uqqp\",\"gridContainer\":\"SymbolTable_gridContainer__1AJgG\",\"row\":\"SymbolTable_row__3egus\",\"cell\":\"SymbolTable_cell__fWKNX\",\"root\":\"SymbolTable_root__2PCcv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Console_container__3nKjQ\",\"output\":\"Console_output__3CcGx\",\"inputBuffer\":\"Console_inputBuffer__2jMXE\",\"outAndInBufContainer\":\"Console_outAndInBufContainer__ZSkiW\",\"title\":\"Console_title__2sfHt\",\"inputText\":\"Console_inputText__rkhPv\"};","\r\nfunction callLimiter(func, delay) {\r\n  let thId = null;\r\n  let lastArgs = null;\r\n  return (...args) => {\r\n    lastArgs = args;\r\n    if (thId == null) {\r\n      thId = setTimeout(() => {\r\n        func(...lastArgs);\r\n        thId = null;\r\n      }, delay);\r\n    }\r\n  }\r\n}\r\n\r\nconst utils = {\r\n  callLimiter,\r\n};\r\n\r\nexport default utils;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Assembled_container__1jNx0\",\"editor\":\"Assembled_editor__3jQwh\",\"title\":\"Assembled_title__kk-F7\",\"breakpoint\":\"Assembled_breakpoint__2cdAw\",\"currentLineRunning\":\"Assembled_currentLineRunning__eYaaP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Window_container__3JkxK\",\"header\":\"Window_header__ygOBE\",\"title\":\"Window_title__2aHbv\",\"description\":\"Window_description__1NaN6\",\"content\":\"Window_content__3bL7I\"};","let pseudos = [];\r\n\r\nfunction setup() {\r\n    const pseudosMs = require.context('./', true, /pseudos\\/.+\\.js$/);\r\n    pseudos = pseudosMs.keys().map(key => pseudosMs(key, true).default);\r\n}\r\n\r\nfunction getPseudoInstructions() {\r\n    return pseudos;\r\n}\r\n\r\nconst pseudoManager = {\r\n    setup,\r\n    getPseudoInstructions,\r\n};\r\n\r\nexport default pseudoManager;","import Architecture from './architecture';\r\n\r\nlet _16;\r\nlet _32;\r\n\r\nfunction setup() {\r\n    _16 = new Architecture({\r\n        bitWidth: 16,\r\n        registers: {\r\n            'r0': { code: 0, aliases: [ 'at' ] },\r\n            'r1': { code: 1, aliases: [] },\r\n            'r2': { code: 2, aliases: [] },\r\n            'r3': { code: 3, aliases: [] },\r\n            'r4': { code: 4, aliases: [] },\r\n            'r5': { code: 5, aliases: [ 'sr' ] },\r\n            'r6': { code: 6, aliases: [ 'lr' ] },\r\n            'r7': { code: 7, aliases: [ 'sp' ] },\r\n        },\r\n    });\r\n    _32 = new Architecture({\r\n        bitWidth: 32,\r\n        registers: {\r\n            'r0': { code: 0, aliases: [ 'at' ] },\r\n            'r1': { code: 1, aliases: [] },\r\n            'r2': { code: 2, aliases: [] },\r\n            'r3': { code: 3, aliases: [] },\r\n            'r4': { code: 4, aliases: [] },\r\n            'r5': { code: 5, aliases: [ 'sr' ] },\r\n            'r6': { code: 6, aliases: [ 'lr' ] },\r\n            'r7': { code: 7, aliases: [ 'sp' ] },\r\n        },\r\n    });\r\n}\r\n\r\nfunction getViking16Arch() {\r\n    return _16;\r\n}\r\n\r\nfunction getViking32Arch() {\r\n    return _32;\r\n}\r\n\r\nconst architectureManager = {\r\n    setup,\r\n    getViking16Arch,\r\n    getViking32Arch,\r\n};\r\n\r\nexport default architectureManager;","export default class Architecture {\r\n    constructor({ bitWidth, registers }) {\r\n        this.bitWidth = bitWidth;\r\n        this.byteWidth = bitWidth / 8;\r\n        this.mask = Math.pow(2, bitWidth) - 1;\r\n\r\n        this.registers = registers;\r\n\r\n        this.registersByName = Object.fromEntries(\r\n            Object.entries(registers)\r\n            .map(([registerName, register]) => [\r\n                [\r\n                    registerName,   // key      registerName\r\n                    register,       // value    register\r\n                ],\r\n                ...register.aliases.map(aliasName => [\r\n                        aliasName,  // key      registerName\r\n                        register,   // value    register\r\n                    ]\r\n                )\r\n            ])\r\n            .reduce((a, b) => a.concat(b))\r\n        );\r\n        this.registersNameByCode = Object.fromEntries(\r\n            Object.entries(registers)\r\n            .map(([registerName, register]) => [\r\n                [\r\n                    register.code,  // key      registerName\r\n                    registerName,   // value    register\r\n                ],\r\n            ])\r\n            .reduce((a, b) => a.concat(b))\r\n        );\r\n    }\r\n\r\n    getMask() {\r\n        return this.mask;\r\n    }\r\n\r\n    getBitWidth() {\r\n        return this.bitWidth;\r\n    }\r\n\r\n    getByteWidth() {\r\n        return this.byteWidth;\r\n    }\r\n\r\n    hasRegisterName(name) {\r\n        return this.registersByName[name] != null;\r\n    }\r\n\r\n    getRegisterNames() {\r\n        return Object.keys(this.registersByName);\r\n    }\r\n\r\n    getRegisters() {\r\n        return this.registers;\r\n    }\r\n\r\n    getRegisterNameByCode(code) {\r\n        return this.registersNameByCode[code];\r\n    }\r\n\r\n    getRegisterCode(name) {\r\n        if (!this.hasRegisterName(name)) throw new Error('Register doesnt exists');\r\n        return this.registersByName[name].code;\r\n    }\r\n}","import { EventEmitter } from 'events';\r\nimport MemoryStorage16 from './memoryStorage16';\r\n\r\nclass Memory extends EventEmitter {\r\n    static createFromArchitecture (architecture, ...args) {\r\n        let bitWidth = architecture.getBitWidth();\r\n        let storage;\r\n        switch (bitWidth) {\r\n            case 16:\r\n                storage = new MemoryStorage16();\r\n                break;\r\n            /*case 32:\r\n                storage = new MemoryStorage16();\r\n                break;*/\r\n            default:\r\n                throw new Error('Memory for this architecture doesnt exists (implementation doesnt exists)');\r\n        }\r\n        return new Memory(storage);\r\n    }\r\n\r\n    constructor(storage) {\r\n        super();\r\n        this.storage = storage;\r\n    }\r\n\r\n    async reset(...args) {\r\n        let result = this.storage.reset(...args);\r\n        this.emit('reset');\r\n        return result;\r\n    }\r\n    \r\n    async getDataLength(...args) {\r\n        return this.storage.getDataLength(...args);\r\n    }\r\n    \r\n    async getBytesFromRange(...args) {\r\n        return this.storage.getBytesFromRange(...args);\r\n    }\r\n    \r\n    async getWordsFromRange(...args) {\r\n        return this.storage.getWordsFromRange(...args);\r\n    }\r\n    \r\n    async readByte(address) {\r\n        if (this.onReadByte) {\r\n            let newValue = await this.onReadByte(address);\r\n            if (newValue != null) {\r\n                return newValue;\r\n            }\r\n        }\r\n        let result = this.storage.readByte(address);\r\n        this.emit('storage read byte', address);\r\n        return result;\r\n    }\r\n    \r\n    async readWord(address) {\r\n        if (this.onReadWord) {\r\n            let newValue = await this.onReadWord(address);\r\n            if (newValue != null) {\r\n                return newValue;\r\n            }\r\n        }\r\n        let result = this.storage.readWord(address);\r\n        this.emit('storage read word', address);\r\n        return result;\r\n    }\r\n\r\n    async writeByte(address, byte) {\r\n        if (this.onWriteByte) {\r\n            if (!await this.onWriteByte(address, byte)) {\r\n                return false;\r\n            }\r\n        }\r\n        let result = this.storage.writeByte(address, byte);\r\n        this.emit('storage write byte', address, byte);\r\n        return result;\r\n    }\r\n    \r\n    async writeWord(address, word) {\r\n        if (this.onWriteWord) {\r\n            if(!await this.onWriteWord(address, word)) {\r\n                return false;\r\n            }\r\n        }\r\n        let result = this.storage.writeWord(address, word);\r\n        this.emit('storage write word', address, word);\r\n        return result;\r\n    }\r\n}\r\n\r\nexport default Memory;","export default class MemoryStorage16 {\r\n    constructor() {\r\n        this.data = new Array(0xFFFF + 1).fill(0);\r\n    }\r\n\r\n    reset() {\r\n        for (let i = 0; i < this.data.length; i++) {\r\n            this.data[i] = 0;\r\n        }\r\n    }\r\n\r\n    async readByte(address) {\r\n        return this.data[address];\r\n    }\r\n\r\n    async readWord(address) {\r\n        let byte0 = this.data[address];\r\n        let byte1 = this.data[address+1];\r\n        return (byte0 << 8) | byte1;\r\n    }\r\n\r\n    async writeByte(address, byte) {\r\n        this.data[address] = byte & 0xFF;\r\n    }\r\n\r\n    async writeWord(address, word) {\r\n        let byte0 = (word >> 8) & 0xFF;\r\n        let byte1 = word & 0xFF;\r\n        this.data[address] = byte0;\r\n        this.data[address+1] = byte1;\r\n    }\r\n\r\n    getDataLength() {\r\n        return this.data.length;\r\n    }\r\n\r\n    getData() {\r\n        return this.data;\r\n    }\r\n\r\n    getBytesFromRange(start, end) {\r\n        return this.data.slice(start, end);\r\n    }\r\n    \r\n    getWordsFromRange(start, end) {\r\n        let byte0;\r\n        let words = [];\r\n        for (let i = start; i < end; i++) {\r\n            if (i % 2 === 0) {\r\n                byte0 = this.data[i];\r\n            } else {\r\n                let byte1 = this.data[i];\r\n                let word = (byte0 << 8) | byte1;\r\n                words.push(word);\r\n            }\r\n        }\r\n        return words;\r\n    }\r\n}","import { EventEmitter } from 'events';\r\nimport utils from '../../utils';\r\n\r\nexport default class RegisterBank extends EventEmitter {\r\n\r\n    static createFromArchitecture (architecture, ...args) {\r\n        let archRegisters = architecture.getRegisters();\r\n        return new RegisterBank(archRegisters, architecture.getByteWidth(), ...args);\r\n    }\r\n\r\n    constructor (registerInfos, registerByteWidth) {\r\n        super();\r\n        this.registerInfos = registerInfos;\r\n        this.registerByteWidth = registerByteWidth;\r\n        this.setup();\r\n    }\r\n\r\n    getRegisterInfos() {\r\n        return this.registerInfos;\r\n    }\r\n\r\n    getRegisterInfo(name) {\r\n        return this.registerInfos[name];\r\n    }\r\n\r\n    setup() {\r\n        this.mask = Math.pow(2, 8 * this.registerByteWidth) - 1;\r\n\r\n        this.registers = {};\r\n        for (let registerName in this.registerInfos) {\r\n            let registerInfo = this.registerInfos[registerName];\r\n            let { aliases } = registerInfo;\r\n\r\n            let register = {\r\n                name: registerName,\r\n                aliases,\r\n                value: 0,\r\n            };\r\n            \r\n            this.registers[registerName] = register;\r\n            aliases.forEach(aliasName => this.registers[aliasName] = register);\r\n        }\r\n    }\r\n\r\n    reset() {\r\n        for (let registerName in this.registers) {\r\n            this.setValue(registerName, 0);\r\n        }\r\n    }\r\n\r\n    setValue(registerName, newValue) {\r\n        newValue = (newValue & this.mask) >>> 0;\r\n        let register = this.registers[registerName];\r\n        let oldValue = register.value;\r\n        register.value = newValue;\r\n        this.emit('value update', { registerName: register.name, oldValue, newValue });\r\n    }\r\n\r\n    getValue(registerName) {\r\n        return utils.unsignedToSigned(this.registers[registerName].value, this.registerByteWidth);\r\n    }\r\n    \r\n    getUValue(registerName) {\r\n        return this.registers[registerName].value;\r\n    }\r\n}","import { EventEmitter } from 'events';\r\nimport Instruction from '../instruction';\r\nimport utils from '../../utils';\r\n\r\nconst endSimulationCode = 0x0003;\r\nconst defaultBreakpointHandler = (simulation, pc) => false;\r\n\r\nexport default class Simulation extends EventEmitter {\r\n    constructor(architecture, memory, registerBank) {\r\n        super();\r\n\r\n        this.architecture = architecture;\r\n        this.memory = memory;\r\n        this.registerBank = registerBank;\r\n        this.codeExecutionMaxPC = 0;\r\n        this.runId = null;\r\n        this.running = false;\r\n        this.ended = false;\r\n        this.stopping = false;\r\n        this.waitingInput = false;\r\n        this.stepInterval = 50;\r\n        this.cycles = 0;\r\n        this.pc = 0;\r\n        this.inputBytes = [];\r\n\r\n        this.breakpointHandler = defaultBreakpointHandler;\r\n        this.setupMemoryHandlers();\r\n    }\r\n\r\n    async reset() {\r\n        if (this.running && !this.stopping) await this.stop();\r\n        this.ended = false;\r\n        this.carry = 0;\r\n        this.setPC(0);\r\n        this.setCycles(0);\r\n        this.resetInput();\r\n        this.registerBank.reset();\r\n        this.registerBank.setValue('sp', 0xdffe);\r\n        this.memory.reset();\r\n        await this.writeObjCodeMemory();\r\n        this.emit('reset');\r\n    }\r\n\r\n    setupMemoryHandlers() {\r\n        this.memory.onReadWord = async (address) => {\r\n            if (address < 0xe000) return; // ok\r\n\r\n            switch (address) {\r\n                case 0xf004:\r\n                    this.waitingInput = true;\r\n                    while(!this.stopping && this.inputBytes.length < 1) await utils.sleep(50);\r\n                    this.waitingInput = false;\r\n                    if (this.stopping) throw new Error('User stopped simulation without give input');\r\n                    return this.readInputChar();\r\n                case 0xf006:\r\n                    this.waitingInput = true;\r\n                    while(!this.stopping && this.inputBytes.length < 2) await utils.sleep(50);\r\n                    this.waitingInput = false;\r\n                    if (this.stopping) throw new Error('User stopped simulation without give input');\r\n                    return this.readInputInt();\r\n                default:\r\n                    // read on unauthorized location\r\n                    this.emit('run error', new Error('read on unauthorized location [' + address.toString(16) + ']'));\r\n                    await this.stop();\r\n            }\r\n        };\r\n        \r\n        this.memory.onWriteWord = async (address, value) => {\r\n            if (address < 0xe000) return true; // ok\r\n\r\n            switch (address) {\r\n                case 0xf000:\r\n                    this.emit('console write char', String.fromCharCode(value));\r\n                    return true;\r\n                case 0xf002:\r\n                    this.emit('console write int', utils.unsignedToSigned(value));\r\n                    return true;\r\n                default:\r\n                    // write on unauthorized location\r\n                    this.emit('run error', new Error('write on unauthorized location [' + address.toString(16) + '] = ' + value.toString(16)));\r\n                    await this.stop();\r\n                    return false;\r\n            }\r\n        };\r\n    }\r\n\r\n    readInputChar() {\r\n        if (this.inputBytes.length === 0) throw new Error('Empty input');\r\n        let byte = this.getNextInputByte();\r\n        return byte;\r\n    }\r\n    \r\n    readInputInt() {\r\n        if (this.inputBytes.length === 0) throw new Error('Empty input');\r\n        let zeroCharCode = '0'.charCodeAt(0);\r\n        let nineCharCode = '9'.charCodeAt(0);\r\n        let minusCharCode = '-'.charCodeAt(0);\r\n\r\n        function isMinusChar(c) {\r\n            return minusCharCode === c;\r\n        }\r\n\r\n        function isNumberChar(c) {\r\n            return c >= zeroCharCode && c <= nineCharCode;\r\n        }\r\n\r\n        function charToNumber(c) {\r\n            return c - zeroCharCode;\r\n        }\r\n\r\n        let int = 0;\r\n        let firstC = this.getNextInputByte();\r\n        if (isNumberChar(firstC) || isMinusChar(firstC)) {\r\n            if (isNumberChar(firstC)) {\r\n                int = charToNumber(firstC);\r\n            }\r\n\r\n            let length = this.inputBytes.length;\r\n            for (let i = 0; i < length; i++) {\r\n                let c = this.getNextInputByte();\r\n                if (isNumberChar(c)) {\r\n                    let number = charToNumber(c);\r\n                    int *= 10;\r\n                    int += number;\r\n                } else {\r\n                    if (c === 0) {\r\n                        this.getNextInputByte();\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (isMinusChar(firstC)) {\r\n                int *= -1;\r\n            }\r\n        } else {\r\n            // lê os bytes do inputs até acabar ou até o byteWidth da arquitetura\r\n            // se o inputBytes tiver 1 byte e o byteWidth da arquitetura for 2 bytes, 16 bits, vai ler apenas 1 byte\r\n            // se o inputBytes tiver 5 bytes e o byteWidth da arquitetura for 2 bytes, vai ler apenas 2 bytes\r\n            int = firstC;\r\n            let length = Math.min(this.architecture.getByteWidth() - 1, this.inputBytes.length);\r\n            for (let i = 0; i < length; i++) {\r\n                let c = this.getNextInputByte();\r\n                this.emit('input buffer', this.inputBytes);\r\n                int = (int << 8) | c;\r\n            }\r\n        }\r\n        \r\n        return int;\r\n    }\r\n\r\n    setRawObjCode(rawObjCode) {\r\n        if (rawObjCode.length > 0xf000 * 2) throw new Error('Object code too big for the memory');\r\n        this.rawObjCode = rawObjCode;\r\n    }\r\n\r\n    async writeObjCodeMemory() {\r\n        if (!this.rawObjCode) return;\r\n        let wordArray = this.rawObjCode\r\n            .match(/.{1,4}/g)\r\n            .map(x => parseInt(x, 16));\r\n        for (let i = 0; i < wordArray.length; i++) {\r\n            let word = wordArray[i];\r\n            await this.memory.writeWord(i*2, word);\r\n        }\r\n\r\n        this.codeExecutionMaxPC = wordArray.length * 2;\r\n    }\r\n\r\n    async step() {\r\n        if (this.pc >= this.codeExecutionMaxPC) throw new Error('PC run out of program bounds');\r\n\r\n        let code = await this.memory.readWord(this.pc);\r\n        if (code === endSimulationCode) {\r\n            this.ended = true;\r\n            this.emit('run ended');\r\n            return await this.stop();\r\n        }\r\n\r\n        let instruction = Instruction.disassemble(code, this.architecture);\r\n        await instruction.execute(this);\r\n\r\n        this.incrementPC(2);\r\n        this.incrementCycles(1);\r\n        \r\n        if (this.breakpointHandler(this, this.pc)) {\r\n            this.emit('breakpoint', this.pc);\r\n            await this.stop();\r\n        }\r\n    }\r\n\r\n    async runner() {\r\n        this.emit('run started');\r\n        try {\r\n            while(!this.stopping) {\r\n                await this.step();\r\n                if (this.stepInterval > 0) await utils.sleep(this.stepInterval);\r\n            }\r\n        } catch (error) {\r\n            console.error(error);\r\n            this.emit('run error', error);\r\n        }\r\n        this.running = false;\r\n        this.stopping = false;\r\n    }\r\n\r\n    isRunning() {\r\n        return this.running;\r\n    }\r\n\r\n    isStopping() {\r\n        return this.stopping;\r\n    }\r\n\r\n    hasEnded() {\r\n        return this.ended;\r\n    }\r\n\r\n    async stop() {\r\n        if (!this.running) throw new Error('Simulation already stopped');\r\n        if (this.stopping) throw new Error('Simulation already stopping');\r\n        this.stopping = true;\r\n        while(this.waitingInput) await utils.sleep(50);\r\n        clearTimeout(this.runId);\r\n        this.runId = null;\r\n    }\r\n\r\n    async run() {\r\n        if (this.running) throw new Error('Simulation already running');\r\n        if (this.stopping) throw new Error('Simulation stopping');\r\n        this.running = true;\r\n        this.stopping = false;\r\n        this.runId = setTimeout(this.runner.bind(this));\r\n    }\r\n\r\n    getNextInputByte() {\r\n        let byte = this.inputBytes.shift();\r\n        this.emit('input buffer', this.inputBytes);\r\n        return byte;\r\n    }\r\n\r\n    resetInput() {\r\n        this.inputBytes.length = 0;\r\n        this.emit('input buffer', this.inputBytes);\r\n    }\r\n\r\n    addInput(inputBytes) {\r\n        for (let byte of inputBytes) \r\n            this.inputBytes.push(byte & 0xFF);\r\n        this.emit('input buffer', this.inputBytes);\r\n    }\r\n\r\n    getInput() {\r\n        return this.inputBytes;\r\n    }\r\n\r\n    getRegisterBank() {\r\n        return this.registerBank;\r\n    }\r\n\r\n    getMemory() {\r\n        return this.memory;\r\n    }\r\n\r\n    getCarry() {\r\n        return this.carry;\r\n    }\r\n\r\n    setCarry(carry) {\r\n        this.carry = carry;\r\n    }\r\n\r\n    setPC(pc) {\r\n        this.pc = (pc >>> 0) & this.architecture.getMask();\r\n        this.emit('pc update', this.pc);\r\n    }\r\n\r\n    incrementPC(value) {\r\n        this.setPC(this.getPC() + value);\r\n    }\r\n\r\n    getPC() {\r\n        return this.pc;\r\n    }\r\n    \r\n    setCycles(cycles) {\r\n        this.cycles = cycles;\r\n        this.emit('cycles update', this.cycles);\r\n    }\r\n\r\n    incrementCycles(value) {\r\n        this.cycles += value;\r\n        this.emit('cycles update', this.cycles);\r\n    }\r\n\r\n    getCycles() {\r\n        return this.cycles;\r\n    }\r\n\r\n    getArchitecture() {\r\n        return this.architecture;\r\n    }\r\n\r\n    setBreakpointHandler(handler) {\r\n        if (!handler) return this.breakpointHandler = defaultBreakpointHandler;\r\n        if (typeof handler != 'function') throw new Error('handler isnt function');\r\n        this.breakpointHandler = handler;\r\n    }\r\n\r\n    setStepInterval(ms) {\r\n        this.stepInterval = ms;\r\n    }\r\n\r\n    getStepInterval() {\r\n        return this.stepInterval;\r\n    }\r\n}","\r\nexport default class PseudoConverter {\r\n    constructor(pseudos) {\r\n        this.pseudos = pseudos;\r\n    }\r\n\r\n    convert(instruction, architecture) {\r\n        for (let pseudo of this.pseudos) {\r\n            let instructions = pseudo.getNonPseudoInstructions(instruction, architecture);\r\n            if (instructions.length > 0) {\r\n                for (let i = 0; i < instructions.length; i++) {\r\n                    let convInstruction = instructions[i];\r\n                    let convInstructions = this.convert(convInstruction, architecture);\r\n\r\n                    if (convInstructions.length > 0) {\r\n                        instructions.splice(i, 1, ...convInstructions);\r\n                    }\r\n                }\r\n                return instructions;\r\n            }\r\n        }\r\n        return [];\r\n    }\r\n}","import Instruction from '../instruction';\r\n\r\nclass Disassembler {\r\n    constructor(architecture) {\r\n        this.architecture = architecture;\r\n    }\r\n\r\n    disassemble(rawHex) {\r\n        if (rawHex.length === 0) return [];\r\n\r\n        let result = [];\r\n        let arrayLiteral = rawHex\r\n            .match(/.{1,4}/g)\r\n            .map(x => parseInt(x, 16));\r\n        \r\n        let pc = 0;\r\n        for (let code of arrayLiteral) {\r\n            let instruction;\r\n            try {\r\n                instruction = Instruction.disassemble(code, this.architecture);\r\n            } catch (exc) { }\r\n\r\n            let value = instruction ? instruction.toString() : '????';\r\n\r\n            result.push({\r\n                instruction,\r\n                value,\r\n                pc,\r\n                code,\r\n            });\r\n\r\n            pc += 2;\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\nexport default Disassembler;","import operationsManager from '../operations/operationsManager';\r\nimport Instruction from '../instruction';\r\nimport Operand from '../operand';\r\nimport utils from '../../utils';\r\n\r\nexport default class InstructionParser {\r\n\r\n    constructor(architecture) {\r\n        this.architecture = architecture;\r\n    }\r\n\r\n    isInstruction(str) {\r\n        try {\r\n            let operation = this.parseOperation(str);\r\n            return operation != null;\r\n        } catch (exc) {\r\n            return false;\r\n        }\r\n    }\r\n    \r\n    parse(str) {\r\n        // parse operation & operands\r\n        let operation = this.parseOperation(str);\r\n        let operands = this.parseOperands(str);\r\n\r\n        let instruction = new Instruction(operation, operands);\r\n        return instruction;\r\n    }\r\n    \r\n\r\n    // detect if str is register\r\n    isRegisterName(str) {\r\n        return this.architecture.hasRegisterName(str);\r\n    }\r\n\r\n    // detect if str is operation\r\n    isOperationName(str) {\r\n        return operationsManager.isOperationName(str);\r\n    }\r\n\r\n    // parse operation\r\n    parseOperation(str) {\r\n        let match = str.match(/^(\\w*)[\\t ]*/);\r\n        if (!Array.isArray(match) || match.length < 2) throw new Error('Cant parse to operation');\r\n\r\n        let operationName = match[1];\r\n        if (!this.isOperationName(operationName)) throw new Error('\"' + operationName + '\" isnt operation');\r\n        \r\n        let operation = operationsManager.getOperationByName(operationName);\r\n        if (!operation) throw new Error('Operation with name \"' + operationName + '\" not found');\r\n\r\n        return operation;\r\n    }\r\n\r\n    // detect type of operand value\r\n    getInstructionOperandValueType(operandValue) {\r\n        if (typeof operandValue !== 'string') return null;\r\n        if (operandValue.length === 0) return null;\r\n\r\n        if (this.isRegisterName(operandValue)) return 'register';\r\n        if (utils.isInteger(operandValue)) return 'literal';\r\n        return 'symbol';\r\n    }\r\n    \r\n    // parse operands\r\n    parseOperands(str) {\r\n        let operands = [];\r\n\r\n        let match = str.match(/^\\w+[ \\t]+(.+)/);\r\n        if (Array.isArray(match) && match.length >= 2) {\r\n            let operandsStr = match[1];\r\n            let operandsValues = operandsStr.split(/[\\t ]*,[\\t ]*/);\r\n            for (let value of operandsValues) {\r\n                value = value.trim();\r\n                let type = this.getInstructionOperandValueType(value);\r\n                if (type === null) {\r\n                    throw new Error('Operand \"' + value + '\" cant be parsed');\r\n                }\r\n                if (type === Operand.LITERAL) {\r\n                    value = parseInt(value);\r\n                }\r\n                operands.push(new Operand(value, type));\r\n            }\r\n        }\r\n        \r\n        return operands;\r\n    }\r\n}","import utils from '../../utils';\r\nimport { unraw } from 'unraw';\r\n\r\nexport default class DataParser {\r\n    constructor(architecture) {\r\n        this.architecture = architecture;\r\n    }\r\n\r\n    parse(str) {\r\n        let byteWidth = this.architecture.getByteWidth();\r\n        let bytes = this.parseToBytes(str, byteWidth);\r\n        let data = this.bytesToData(bytes, byteWidth);\r\n        return data;\r\n    }\r\n\r\n    parseToBytes(str, byteWidth) {\r\n        let bytes = [];\r\n        let values = extractValues(str);\r\n        for (let { type, value } of values) {\r\n            switch (type) {\r\n                case 'text':\r\n                    for (let i = 0; i < value.length; i++) {\r\n                        bytes.push(value.charCodeAt(i));\r\n                    }\r\n                    bytes.push(0);\r\n                    break;\r\n                case 'others':\r\n                    let trimmed = value.trim();\r\n                    if (trimmed.length <= 0) break;\r\n\r\n                    let splitted = trimmed.split(/(?:[?: \\t]+)|,/);\r\n                    if (splitted.some(x => !utils.isInteger(x))) throw new Error('Data contains a non-literal');\r\n                    bytes.push( ...splitted.reduce( (a, b) => a.concat(utils.numberToBytes(parseInt(b), byteWidth)), [] ) );\r\n                    break;\r\n                default:\r\n            }\r\n        }\r\n        return bytes;\r\n    }\r\n\r\n    bytesToData(bytes, byteWidth) {\r\n        let data = [];\r\n        for (let i = 0; i < bytes.length; i += byteWidth) {\r\n            let curBytes = new Array(byteWidth).fill(0);\r\n            for (let j = 0; j < byteWidth; j++) {\r\n                let byte = bytes[i + j];\r\n                curBytes[j] = byte ? byte : 0;\r\n            }\r\n            data.push(utils.bytesToNumber(curBytes));\r\n        }\r\n        return data;\r\n    }\r\n}\r\n\r\nfunction extractValues(str) {\r\n    let lastC;\r\n    let startIndex = 0;\r\n    let capturingQuote = false;\r\n\r\n    let values = [];\r\n    for (let i = 0; i < str.length; i++) {\r\n        let c = str[i];\r\n\r\n        if ((c === '\"' && lastC !== '\\\\')) {            \r\n            if (capturingQuote) {\r\n                if (startIndex !== i) values.push({\r\n                    type: 'text',\r\n                    value: unraw(str.substring(startIndex, i)),\r\n                });\r\n                capturingQuote = false;\r\n                startIndex = i + 1;\r\n            } else {\r\n                capturingQuote = true;\r\n                if (startIndex !== i) values.push({\r\n                    type: 'others',\r\n                    value: str.substring(startIndex, i),\r\n                });\r\n                startIndex = i + 1;\r\n            }\r\n        }\r\n        lastC = c;\r\n    }\r\n    if (startIndex !== str.length) values.push({\r\n        type: 'others',\r\n        value: str.substring(startIndex, str.length),\r\n    });\r\n    return values;\r\n}","export default class CommentParser {\r\n    parse(str) {\r\n        let result = {\r\n            isComment: false,\r\n            comment: null,\r\n        };\r\n        let matches = str.match(/^[ \\t]*;|(?:\\/\\/)(.*)/);\r\n        if (Array.isArray(matches) && matches.length === 2) {\r\n            result.isComment = true;\r\n            result.comment = matches[1];\r\n        }\r\n        return result;\r\n    }\r\n};","export default class LineParser {\r\n\r\n    constructor(instructionParser, dataParser, commentParser) {\r\n        this.instructionParser = instructionParser;\r\n        this.dataParser = dataParser;\r\n        this.commentParser = commentParser;\r\n    }\r\n\r\n    getSymbolAndRest(str) {\r\n        let symbol;\r\n        let rest;\r\n\r\n        let match = str.match(/^(\\w*)[\\t ]*(.*)/);\r\n        if (Array.isArray(match) && match.length >= 3) {\r\n            symbol = match[1];\r\n            rest = match[2];\r\n\r\n            if (symbol.length === 0) symbol = null;\r\n        } else {\r\n            throw new Error('Cant parse line to symbol and rest');\r\n        }\r\n        \r\n        return { symbol, rest };\r\n    }\r\n\r\n    parse(line) {\r\n        let { symbol, rest } = this.getSymbolAndRest(line);\r\n        let sanitizedRest = rest.trim();\r\n\r\n        let instruction = null;\r\n        let data = null;\r\n        let { isComment, comment } = this.commentParser.parse(rest);\r\n\r\n        if (!isComment) {\r\n            if (sanitizedRest.length > 0) {\r\n                if (this.instructionParser.isInstruction(sanitizedRest)) {\r\n                    instruction = this.instructionParser.parse(sanitizedRest);\r\n                } else {\r\n                    data = this.dataParser.parse(sanitizedRest);\r\n                }\r\n            }\r\n        }\r\n\r\n        return { isComment, comment, symbol, instruction, data };\r\n    }\r\n}","import Operand from '../operand';\r\nimport InstructionParser from './instructionParser';\r\nimport DataParser from './dataParser';\r\nimport CommentParser from './commentParser';\r\nimport LineParser from './lineParser';\r\nimport utils from '../../utils';\r\n\r\nclass Assembler {\r\n    constructor(architecture, programData, pseudoConverter) {\r\n        this.architecture = architecture;\r\n        this.programData = programData;\r\n        this.pseudoConverter = pseudoConverter;\r\n        \r\n        this.lines = this.programData.split('\\n');\r\n        \r\n        this.sequence = [];\r\n        this.symbolTable = {};\r\n        this.objectCodeArray = [];\r\n        this.instructions = [];\r\n    }\r\n\r\n    assemble() {\r\n        this.pass1();\r\n        this.pass2();\r\n        this.pass3();\r\n        \r\n        return {\r\n            rawObjectCode: this.rawObjectCode,\r\n            objectCodeArray: this.objectCodeArray,\r\n            symbolTable: this.symbolTable,\r\n            instructions: this.instructions,\r\n        };\r\n    }\r\n\r\n    // Process instructions, pseudo-instructions, symbols.\r\n    // Doesnt substitute symbols in instructions.\r\n    pass1() {\r\n        let pc = 0;\r\n\r\n        let instructionParser = new InstructionParser(this.architecture);\r\n        let dataParser = new DataParser(this.architecture);\r\n        let commentParser = new CommentParser();\r\n        let lineParser = new LineParser(instructionParser, dataParser, commentParser);\r\n\r\n        for (let i = 0; i < this.lines.length; i++) {\r\n            let line = this.lines[i];\r\n\r\n            let parsed;\r\n            try {\r\n                parsed = lineParser.parse(line);\r\n            } catch (exc) {\r\n                console.error(exc);\r\n                throw new Error('Cant parse line ' + (i+1) + ' \"' + line.trim() + '\": ' + exc.message);\r\n            }\r\n            let { isComment, symbol, instruction, data } = parsed;\r\n\r\n            if (isComment) continue;\r\n\r\n            if (symbol) {\r\n                this.symbolTable[symbol] = pc;\r\n            }\r\n            if (data) {\r\n                this.sequence.push(...data);\r\n                pc += 2 * data.length;\r\n            }\r\n            if (instruction) {\r\n                // process pseudo instructions\r\n                if (instruction.isPseudo()) {\r\n                    let convInstructions = this.pseudoConverter.convert(instruction, this.architecture);\r\n                    if (convInstructions != null && convInstructions.length > 0) {\r\n                        this.instructions.push(...convInstructions);\r\n                        this.sequence.push(...convInstructions);\r\n                        pc += 2 * convInstructions.length;\r\n                    } else {\r\n                        throw new Error('The pseudo instruction on line ' + (i+1) + ' \"' + line.trim() + '\" doesnt exist');\r\n                    }\r\n                } else {\r\n                    this.instructions.push(instruction);\r\n                    this.sequence.push(instruction);\r\n                    pc += 2;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Substitute symbols with their values\r\n    pass2() {\r\n        for (let instruction of this.instructions) {\r\n            let operands = instruction.getOperands();\r\n            for (let operand of operands) {\r\n                if (operand.getType() === Operand.SYMBOL) {\r\n                    let symbolValue = this.symbolTable[operand.getValue()];\r\n                    if (symbolValue == null) throw new Error('The symbol \"' + operand.getValue() + '\" doesnt exist');\r\n                    let finalValue = 0;\r\n                    for (let i = operand.getByteRange().min; i <= operand.getByteRange().max; i++) {\r\n                        finalValue <<= 2;\r\n                        finalValue |= (symbolValue >> (this.architecture.getBitWidth() - (8 * (i + 1)))) & 0xFF;\r\n                    }\r\n                    operand.setType(Operand.LITERAL);\r\n                    operand.setValue(finalValue);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Assemble object code\r\n    pass3() {\r\n        // Assemble\r\n        for (let item of this.sequence) {     \r\n            if (Number.isInteger(item)) {\r\n                this.objectCodeArray.push(item);\r\n            } else {\r\n                this.objectCodeArray.push(item.assemble(this.architecture));\r\n            }\r\n        }\r\n        \r\n        this.rawObjectCode = this.objectCodeArray\r\n            .map(x => utils.signedNumberToHex(x, 2))\r\n            .join('');\r\n    }\r\n};\r\n\r\nexport default Assembler;","import { Component, createRef } from \"react\";\r\nimport styles from './Window.module.css'\r\n\r\nclass Window extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.containerRef = createRef();\r\n\r\n    this.name = props.name || \"Window\";\r\n    this.description = props.description || \"This is a window!\";\r\n    this.props = props;\r\n\r\n    this.state = {  }\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.props.width) this.containerRef.current.style.width = this.props.width;\r\n    if (this.props.height) this.containerRef.current.style.height = this.props.height;\r\n  }\r\n  \r\n  render() { \r\n    return (\r\n      <div className={styles.container} ref={this.containerRef}>\r\n        <div className={styles.header}>\r\n          <div className={styles.title}>{this.name}</div>-<div className={styles.description}>{this.description}</div>\r\n        </div>\r\n        <div className={styles.content}>\r\n          {this.props.children}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n \r\nexport default Window;","import styles from './Home.module.css'\r\nimport Simulator from \"../simulator/Simulator.module\";\r\nimport Window from '../window/Window.module';\r\nimport React, { Component, createRef } from 'react';\r\n\r\nclass Home extends Component {  \r\n  constructor(props) {\r\n    super(props);\r\n    Home.instance = this;\r\n    this.keyIndex = 0;\r\n    this.windowsContainerRef = createRef();\r\n    this.aboutRef = createRef();\r\n    this.state = { };\r\n\r\n    this.windows = [];\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.spawnWindow('Simulator', 'Viking CPU Simulator', 980, 700, <Simulator />)\r\n  }\r\n\r\n  closeAbout() {\r\n    this.aboutRef.current.remove();\r\n  }\r\n\r\n  spawnWindow(name, description, width, height, comp) {\r\n    let window = <Window key={this.keyIndex++} name={name} description={description} width={width + 'px'} height={height + 'px'}>{comp}</Window>;\r\n    this.windows.push(window);\r\n    this.setState({});\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={styles.container}>\r\n        <div className={styles.windowsContainer} ref={this.windowsContainerRef}>\r\n          { this.windows }\r\n        </div>\r\n        <div className={styles.aboutContainer} ref={this.aboutRef}>\r\n          <div>Developed by <a href=\"https://github.com/vanflux\">vanflux</a></div>\r\n          <div>Viking architecture by <a href=\"https://github.com/sjohann81\">sjohann81</a></div>\r\n          <div>Repo Link: <a href=\"https://github.com/vanflux/viking-sim-web\">viking-sim-web</a></div>\r\n          <button onClick={this.closeAbout.bind(this)}>Close This Pop-up</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n \r\nexport default Home;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Home_container__1pCbS\",\"windowsContainer\":\"Home_windowsContainer__1a4xb\",\"aboutContainer\":\"Home_aboutContainer__31sEf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Simulator_container__1Th6t\",\"rightArea\":\"Simulator_rightArea__3sIft\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"program\":\"Program_program__3jneg\"};","import styles from './Simulator.module.css'\r\nimport { Box } from \"@material-ui/core\";\r\nimport { Component, createRef } from 'react';\r\nimport Registers from '../registers/Registers.module';\r\nimport Memory from '../../business/asm/simulator/memory';\r\nimport architectureManager from '../../business/asm/architectureManager';\r\nimport RegisterBank from '../../business/asm/simulator/registerBank';\r\nimport Simulation from '../../business/asm/simulator/simulation';\r\nimport pseudoManager from '../../business/asm/pseudoInstructionConversions/pseudoManager';\r\nimport PseudoConverter from '../../business/asm/pseudoInstructionConversions/pseudoConverter';\r\nimport Assembler from '../../business/asm/assembler/assembler';\r\nimport Disassembler from '../../business/asm/disassembler/disassembler';\r\n// eslint-disable-next-line\r\nimport asm from '../../business/index';\r\nimport Program from '../program/Program.module';\r\nimport SymbolTable from '../symbolTable/SymbolTable.module';\r\nimport Control from '../control/Control.module';\r\nimport Console from '../console/Console.module';\r\nimport Assembled from '../assembled/Assembled.module';\r\nimport MemoryViewer from '../memoryViewer/MemoryViewer.module';\r\nimport Home from '../home/Home.module';\r\nimport utils from '../../business/utils';\r\n\r\nclass Simulator extends Component {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.programRef = createRef();\r\n\t\tthis.assembledRef = createRef();\r\n\t\tthis.symbolTableRef = createRef();\r\n\t\tthis.controlRef = createRef();\r\n\t\tthis.consoleRef = createRef();\r\n\r\n\t\tthis.curArchitecture = architectureManager.getViking16Arch();\r\n\t\tthis.memory = Memory.createFromArchitecture(this.curArchitecture);\r\n\t\tthis.registerBank = RegisterBank.createFromArchitecture(this.curArchitecture);\r\n\t\tthis.simulation = new Simulation(this.curArchitecture, this.memory, this.registerBank);\r\n\r\n\t\tthis.state = {\r\n\t\t\tstepDelay: 50,\r\n\t\t};\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\t// Open Memory Viewer\r\n\t\tHome.instance.spawnWindow(\"MemViewer\", \"Memory Viewer\", 440, 420, <MemoryViewer memory={this.memory} />);\r\n\t}\r\n\r\n\tcomponentWillMount() {\r\n\t\tthis.simulationOnRunErrorHandler = (error) => {\r\n\t\t\tthis.consoleRef.current.writeLine('');\r\n\t\t\tthis.consoleRef.current.writeLine('[Error | Simulation] ' + error.message);\r\n\t\t};\r\n\t\t\r\n\t\tthis.simulationOnRunEndedHandler = () => {\r\n\t\t\tthis.consoleRef.current.writeLine('');\r\n\t\t\tthis.consoleRef.current.writeLine('[Info | Simulation] run ended.');\r\n\t\t};\r\n\t\t\r\n\t\tthis.simulationOnBreakpointHandler = (pc) => {\r\n\t\t\tthis.consoleRef.current.writeLine('');\r\n\t\t\tthis.consoleRef.current.writeLine('[Info | Simulation] breakpoint at PC=' + pc.toString(16));\r\n\t\t};\r\n\t\t\r\n\t\tthis.simulationWriteCharHandler = (char) => {\r\n\t\t\tif (char.charCodeAt(0) !== 0) {\r\n\t\t\t\tthis.consoleRef.current.write(char);\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tthis.simulationWriteIntHandler = (int) => {\r\n\t\t\tthis.consoleRef.current.write(String(int));\r\n\t\t};\r\n\r\n\t\tthis.simulation.on('run error', this.simulationOnRunErrorHandler);\r\n\t\tthis.simulation.on('run ended', this.simulationOnRunEndedHandler);\r\n\t\tthis.simulation.on('breakpoint', this.simulationOnBreakpointHandler);\r\n\t\tthis.simulation.on('console write char', this.simulationWriteCharHandler);\r\n\t\tthis.simulation.on('console write int', this.simulationWriteIntHandler);\r\n\t}\r\n\r\n\tcomponentWillUnmount() {\r\n\t\tthis.simulation.off('run error', this.simulationOnRunErrorHandler);\r\n\t\tthis.simulation.off('run ended', this.simulationOnRunEndedHandler);\r\n\t\tthis.simulation.off('breakpoint', this.simulationOnBreakpointHandler);\r\n\t\tthis.simulation.off('console write char', this.simulationWriteCharHandler);\r\n\t\tthis.simulation.off('console write int', this.simulationWriteIntHandler);\r\n\t}\r\n\r\n\tasync assemble() {\r\n\t\tlet programData = this.programRef.current.getText();\r\n\t\ttry {\r\n\t\t\tlet pseudoInstructions = pseudoManager.getPseudoInstructions();\r\n\t\t\tlet pseudoConverter = new PseudoConverter(pseudoInstructions);\r\n\r\n\t\t\tlet assembler = new Assembler(this.curArchitecture, programData, pseudoConverter);\r\n\t\t\tlet assemblerResult = assembler.assemble();\r\n\r\n\t\t\tlet disassembler = new Disassembler(this.curArchitecture);\r\n\t\t\tlet disassemblerResult = disassembler.disassemble(assemblerResult.rawObjectCode);\r\n\r\n\t\t\tlet { symbolTable } = assemblerResult;\r\n\t\t\tlet disassembly = disassemblerResult.map(x => ({value: x.value, pc: x.pc, code: x.code}) );\r\n\r\n\t\t\tlet result = { symbolTable, disassembly };\r\n\r\n\t\t\tthis.simulation.setRawObjCode(assemblerResult.rawObjectCode);\r\n\t\t\tawait this.simulation.reset();\r\n\r\n\t\t\tthis.assembledRef.current.setAssembled(result.disassembly.map(x => x.value).join('\\n'));\r\n\t\t\tthis.symbolTableRef.current.setSymbolTable(symbolTable);\r\n\t\t\tthis.consoleRef.current.writeLine('[Info | Assembler] Successfully assembled');\r\n\r\n\t\t\treturn result;\r\n\t\t} catch (exc) {\r\n\t\t\t\tconsole.error(exc);\r\n\t\t\t\tthis.consoleRef.current.writeLine('[Error | Assembler] ' + exc.message);\r\n\t\t}\r\n\t}\r\n\r\n\tonInput(text) {\r\n\t\tlet inputBytes = new Array(text.length + 1);\r\n\t\tlet buffer = Buffer.from(text);\r\n\t\tfor (let i = 0; i < text.length; i++) {\r\n\t\t\t\tinputBytes[i] = buffer[i];\r\n\t\t}\r\n\t\t// Add \\0 byte on end\r\n\t\tinputBytes[text.length] = 0;\r\n\t\tthis.simulation.addInput(inputBytes);\r\n\t}\r\n\r\n\tonAssemble() {\r\n\t\tthis.assemble();\r\n\t}\r\n\t\r\n\tonControlError(exc) {\r\n\t\tthis.consoleRef.current.writeLine(exc);\r\n\t}\r\n\r\n\tasync onBeforeRun() {\r\n\t\tif (this.simulation.isRunning()) return false;\r\n\t\t\r\n\t\t// If simulation is already ended -> reset\r\n\t\tif (this.simulation.hasEnded()) {\r\n\t\t\tawait this.simulation.reset();\r\n\t\t\tawait utils.sleep(100);\r\n\t\t}\r\n\r\n\t\t// If auto-assemble & program changed, assemble\r\n\t\tlet curText = this.programRef.current.getText();\r\n\t\tif (this.controlRef.current.getAutoAssemble()) {\r\n\t\t\tif (this.lastText !== curText) {\r\n\t\t\t\tif (!this.assemble()) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.lastText = curText;\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className={styles.container}>\r\n\t\t\t\t<Box display=\"flex\" flexDirection=\"column\" width=\"100%\" height=\"100%\">\r\n\t\t\t\t\t<Box display=\"flex\" flexDirection=\"row\" flex=\"1\" overflow=\"auto\">\r\n\t\t\t\t\t\t<Program curArchitecture={this.curArchitecture} ref={this.programRef} />\r\n\t\t\t\t\t\t<Assembled simulation={this.simulation} ref={this.assembledRef} />\r\n\t\t\t\t\t\t<SymbolTable architecture={this.curArchitecture} ref={this.symbolTableRef} />\r\n\t\t\t\t\t\t<Box className={styles.rightArea} display=\"flex\" flexDirection=\"column\" justifyContent=\"space-between\" flex=\"1\" overflow=\"auto\">\r\n\t\t\t\t\t\t\t<Registers simulation={this.simulation} registerBank={this.registerBank} />\r\n\t\t\t\t\t\t\t<Control simulation={this.simulation} onAssemble={this.onAssemble.bind(this)} onBeforeRun={this.onBeforeRun.bind(this)} onError={this.onControlError.bind(this)} ref={this.controlRef} />\r\n\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t</Box>\r\n\t\t\t\t\t<Console simulation={this.simulation} onInput={this.onInput.bind(this)} ref={this.consoleRef} />\r\n\t\t\t\t</Box>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Simulator;\r\n","import styles from './Registers.module.css';\r\nimport { Component } from \"react\";\r\nimport utils from '../../utils';\r\n\r\nclass Registers extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    if (!props.registerBank) throw new Error('props.registerBank null');\r\n    if (!props.simulation) throw new Error('props.simulation null');\r\n\r\n    this.registerBank = props.registerBank;\r\n    this.simulation = props.simulation;\r\n\r\n    this.registerInfos = Object.entries(this.registerBank.getRegisterInfos());\r\n    \r\n    this.state = { };\r\n  }\r\n\r\n  componentDidMount() {\r\n    let self = this;\r\n    this.valueUpdateHandler = utils.callLimiter(() => {\r\n      self.setState({});\r\n    }, 50);\r\n    this.registerBank.on('value update', this.valueUpdateHandler);\r\n    this.simulation.on('pc update', this.valueUpdateHandler);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.registerBank.off('value update', this.valueUpdateHandler);\r\n    this.simulation.off('pc update', this.valueUpdateHandler);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={styles.container}>\r\n        <div className={styles.title}>Registers</div>\r\n        \r\n        <div className={styles.content}>\r\n          <div className={styles.generalRegisterList}>\r\n            { this.registerInfos.map(([name, infos], i) => <Register key={i} name={name} aliases={infos.aliases} value={this.registerBank.getUValue(name)} />) }\r\n          </div>\r\n          \r\n          <div className={styles.pcRegister}>\r\n            <Register name=\"pc\" aliases={[]} value={this.simulation.getPC()} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Register extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.props = props;\r\n  }\r\n\r\n  render() { \r\n    return (\r\n      <div className={styles.registerContainer}>\r\n        <div>{this.props.name}{this.props.aliases.length > 0 ? (' (' + this.props.aliases.join(',') + ')') : ''}</div>\r\n        <div>{this.props.value.toString(16).padStart(4, '0')}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n \r\nexport default Registers;","import { Box } from '@material-ui/core';\r\nimport Editor from '@monaco-editor/react';\r\nimport { Component } from 'react';\r\nimport operationsManager from '../../business/asm/operations/operationsManager';\r\nimport styles from './Program.module.css'\r\n\r\nconst defaultProgramData =\r\n`main\r\n    ldw\tsr,writec\r\n    ldi\tr4,str\r\n    ldi\tr3,loop\r\nloop\r\n    ldb\tr2,r4\r\n    stw\tr2,sr\r\n    add\tr4,1\r\n    bnz\tr2,r3\r\n    hcf\r\n\r\nwritec\t0xf000\r\nstr\t\"hello world!\"`;\r\n\r\nlet alreadyCreatedLang = false;\r\n\r\nclass Program extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    if (props.curArchitecture == null) throw new Error('props.curArchitecture null');\r\n\r\n    this.onChange = typeof props.onChange === 'function' ? props.onChange : ()=>{};\r\n\r\n    this.opsNames = operationsManager.getOperationNames();\r\n    this.regNames = props.curArchitecture.getRegisterNames();\r\n\r\n    this.state = {  }\r\n  }\r\n\r\n  onEditorWillMount(monaco) {\r\n    this.monaco = monaco;\r\n\r\n    if (alreadyCreatedLang) return;\r\n    alreadyCreatedLang = true;\r\n\r\n    monaco.languages.register({ id: 'vikingAsm' });\r\n        \r\n    monaco.languages.setMonarchTokensProvider('vikingAsm', {\r\n\r\n      operationKeywords: this.opsNames,\r\n      registerKeywords: this.regNames,\r\n\r\n      decimalNumbers: /\\d+/,\r\n      hexNumbers: /(?:0x|0B)[\\da-fA-F]+/,\r\n      \r\n      escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\r\n\r\n      tokenizer: {\r\n        root: [\r\n          [ /\\b@hexNumbers|@decimalNumbers\\b/i, 'number' ],\r\n          [\r\n            /\\b\\w+\\b/,\r\n            {\r\n              cases: {\r\n                '@operationKeywords': 'operationKeywords',\r\n                '@registerKeywords': 'registersKeyWords',\r\n                '@default': 'symbols',\r\n              },\r\n            },\r\n          ],\r\n\r\n          [/^[ \\t]*(?:(?:\\/\\/)|;).*$/,    'comment'],\r\n\r\n          // strings\r\n          [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid' ],  // non-teminated string\r\n          [/\"/, { token: 'string.quote', bracket: '@open', next: '@string' } ],\r\n        ],\r\n        string: [\r\n          [/[^\\\\\"]+/,  'string'],\r\n          [/@escapes/, 'string.escape'],\r\n          [/\\\\./,      'string.escape.invalid'],\r\n          [/\"/,        { token: 'string.quote', bracket: '@close', next: '@pop' } ]\r\n        ],\r\n      },\r\n    });\r\n\r\n    monaco.languages.registerCompletionItemProvider('vikingAsm', {\r\n      provideCompletionItems: () => {\r\n        let suggestions = this.opsNames.map(opName => ({\r\n          label: opName,\r\n          detail: '...',\r\n          documentation: '...',\r\n          kind: monaco.languages.CompletionItemKind.Function,\r\n          insertText: opName,\r\n        }));\r\n        return { suggestions: suggestions };\r\n      }\r\n    });\r\n    \r\n    monaco.editor.defineTheme('vikinAsmTheme', {\r\n      base: 'vs-dark',\r\n      inherit: true,\r\n      rules: [\r\n        { token: 'operationKeywords', foreground: 'e55283' },\r\n        { token: 'registersKeyWords', foreground: 'ffc100' },\r\n        { token: 'symbols', foreground: '92db57' },\r\n        { token: 'number', foreground: '7d81ea' }\r\n      ],\r\n    });\r\n  }\r\n\r\n  onEditorMount(editor, monaco) {\r\n    this.editor = editor;\r\n    \r\n    this.editor.getModel().onDidChangeContent(this.onChange);\r\n    this.onChange();\r\n  }\r\n\r\n  getText() {\r\n    if (this.editor == null) return '';\r\n    return this.editor.getValue();\r\n  }\r\n\r\n  setText(text) {\r\n    if (this.editor == null) return;\r\n    this.editor.setValue(text);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Box\r\n        className={styles.program} \r\n        display=\"flex\" \r\n        flexDirection=\"column\" \r\n        flex=\"1\" \r\n        overflow=\"hidden\"\r\n      >\r\n        <div className='areaTitle'>Program</div>\r\n        <Editor\r\n          className={styles.program}\r\n          display=\"flex\"\r\n          flex=\"1\"\r\n          overflow=\"hidden\"\r\n          \r\n          language='vikingAsm'\r\n          theme='vikinAsmTheme'\r\n          value={defaultProgramData}\r\n\r\n          beforeMount={this.onEditorWillMount.bind(this)}\r\n          onMount={this.onEditorMount.bind(this)}\r\n        />\r\n      </Box>\r\n    );\r\n  }\r\n}\r\n \r\nexport default Program;","import { DataGrid, GridDensityTypes } from '@material-ui/data-grid';\r\nimport { Component } from 'react';\r\nimport utils from '../../business/utils';\r\nimport styles from './SymbolTable.module.css'\r\n\r\nclass SymbolTable extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    if (!props.architecture) throw new Error('props.architecture null');\r\n    this.architecture = props.architecture;\r\n\r\n    this.columns = [\r\n      {\r\n        field: 'symbolName',\r\n        headerName: 'Name',\r\n      },\r\n      {\r\n        field: 'symbolValue',\r\n        headerName: 'Value',\r\n      },\r\n    ];\r\n\r\n    this.state = {\r\n      rows: [],\r\n    }\r\n  }\r\n\r\n  setSymbolTable(symbolTable) {\r\n    let newRows = Object.entries(symbolTable).map(([symbolName, symbolValue], id) => {\r\n      return Object.assign({ id }, {symbolName, symbolValue: '0x'+utils.signedNumberToHex(symbolValue, this.architecture.getByteWidth())});\r\n    });\r\n    this.setState({ rows: newRows });\r\n  }\r\n\r\n  render() { \r\n    return (\r\n      <div className={styles.container}>\r\n        <div className={styles.title}>Symbol Table</div>\r\n        <div className={styles.gridContainer}>\r\n          {\r\n            this.state.rows.length > 0 ? (\r\n              <DataGrid\r\n                classes={{root: styles.root}}\r\n                getRowClassName={() => styles.row}\r\n                getCellClassName={() => styles.cell}\r\n                rows={this.state.rows}\r\n                columns={this.columns}\r\n                disableDensitySelector={false}\r\n                disableColumnMenu={true}\r\n                disableColumnSelector={true}\r\n                hideFooter={true}\r\n                hideFooterPagination={true}\r\n                hideFooterRowCount={true}\r\n                hideFooterSelectedRowCount={true}\r\n                showCellRightBorder={false}\r\n                showColumnRightBorder={false}\r\n                headerHeight={0}\r\n                density={GridDensityTypes.Compact}\r\n              />\r\n            ) : ( <div/> )\r\n          }\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n \r\nexport default SymbolTable;","import { Component } from 'react';\r\nimport utils from '../../utils';\r\nimport styles from './Control.module.css';\r\n\r\nclass Control extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    if (!props.simulation) throw new Error('props.simulation null');\r\n\r\n    this.simulation = props.simulation;\r\n\r\n    this.onAutoAssembleChanged = typeof props.onAutoAssembleChanged === 'function' ? props.onAutoAssembleChanged : ()=>{};\r\n    this.onAssemble = typeof props.onAssemble === 'function' ? props.onAssemble : ()=>{};\r\n    this.onBeforeRun = typeof props.onBeforeRun === 'function' ? props.onBeforeRun : ()=>{};\r\n    this.onError = typeof props.onError === 'function' ? props.onError : ()=>{};\r\n\r\n    this.autoAssemble = true;\r\n\r\n    this.state = {  }\r\n  }\r\n\r\n  componentWillMount() {\r\n    this.cyclesUpdateHandler = utils.callLimiter((cycles) => {\r\n      this.setState({});\r\n    }, 50);\r\n    this.simulation.on('cycles update', this.cyclesUpdateHandler);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.simulation.off('cycles update', this.cyclesUpdateHandler);\r\n  }\r\n\r\n  stepIntervalChanged(e) {\r\n    let value = parseInt(e.target.value);\r\n    if (isNaN(value)) value = 50;\r\n    this.simulation.setStepInterval(value);\r\n    this.setState({});\r\n  }\r\n\r\n  async assembleClick() {\r\n    await this.onAssemble();\r\n  }\r\n  \r\n  async resetClick() {\r\n    try {\r\n      await this.simulation.reset();\r\n    } catch (exc) {\r\n      this.onError(exc);\r\n    }\r\n  }\r\n  \r\n  async stopClick() {\r\n    try {\r\n      await this.simulation.stop();\r\n    } catch (exc) {\r\n      this.onError(exc);\r\n    }\r\n  }\r\n  \r\n  async runClick() {\r\n    try {\r\n      if (await this.onBeforeRun() === false) return;\r\n      await this.simulation.run();\r\n    } catch (exc) {\r\n      this.onError(exc);\r\n    }\r\n  }\r\n  \r\n  async stepClick() {\r\n    try {\r\n      await this.simulation.step();\r\n    } catch (exc) {\r\n      this.onError(exc);\r\n    }\r\n  }\r\n\r\n  autoAssembleChanged(e) {\r\n    this.autoAssemble = e.target.checked;\r\n    this.onAutoAssembleChanged(this.autoAssemble);\r\n    this.setState({});\r\n  }\r\n\r\n  getAutoAssemble() {\r\n    return this.autoAssemble;\r\n  }\r\n\r\n  render() { \r\n    return (\r\n      <div className={styles.container}>\r\n        <div className={styles.title}>Control</div>\r\n\r\n        <div className={styles.content}>\r\n          <div className={styles.cycleArea}>\r\n            <div className={styles.cycleLabel}>Cycle:</div>\r\n            <div>{this.simulation.getCycles()}</div>\r\n          </div>\r\n          \r\n          <div>\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={this.autoAssemble}\r\n              onChange={this.autoAssembleChanged.bind(this)}\r\n            /><span style={{margin: '0px 0px 0px 5px'}}>Auto-assemble</span>\r\n          </div>\r\n          <button className={styles.btn} onClick={this.assembleClick.bind(this)}>Assemble</button>\r\n          <button className={styles.btn} onClick={this.resetClick.bind(this)}>Reset</button>\r\n          <button className={styles.btn} onClick={this.stopClick.bind(this)}>Pause</button>\r\n          <button className={styles.btn} onClick={this.runClick.bind(this)}>Run</button>\r\n          <button className={styles.btn} onClick={this.stepClick.bind(this)}>Step</button>\r\n\r\n          <div className={styles.delayLabel}>Delay (ms):</div>\r\n          <input className={styles.delayInput} type='number' value={this.simulation.getStepInterval()} onChange={this.stepIntervalChanged.bind(this)} min=\"0\" max=\"1000\" />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n \r\nexport default Control;","import { Component, createRef } from \"react\";\r\nimport styles from './Console.module.css';\r\n\r\nclass Console extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    if (!props.simulation) throw new Error('props.simulation null');\r\n    \r\n    this.simulation = props.simulation;\r\n    this.onInput = typeof props.onInput === 'function' ? props.onInput : ()=>{};\r\n    this.outputRef = createRef();\r\n\r\n    this.state = {  }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.simulationInBufHandler = (inputBuffer) => {\r\n      this.setInputBuffer(inputBuffer);\r\n    };\r\n\r\n    this.simulation.on('input buffer', this.simulationInBufHandler);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.simulation.off('input buffer', this.simulationInBufHandler);\r\n  }\r\n\r\n  setInputBuffer(inputBuffer) {\r\n    this.setState({});\r\n  }\r\n\r\n  write(text) {\r\n    this.outputRef.current.value += text;\r\n    this.outputRef.current.scrollTop = this.outputRef.current.scrollHeight;\r\n  }\r\n\r\n  writeLine(text) {\r\n    this.outputRef.current.value += text + '\\n';\r\n    this.outputRef.current.scrollTop = this.outputRef.current.scrollHeight;\r\n  }\r\n\r\n  inputKeyDown(e) {\r\n    if (e.key.toLowerCase() === 'enter') {\r\n      let text = e.target.value;\r\n      if (text.length > 0) {\r\n        e.target.value = '';\r\n        this.onInput(text);\r\n      }\r\n    }\r\n  }\r\n\r\n  render() { \r\n    return (\r\n      <div className={styles.container}>\r\n        <div className={styles.outAndInBufContainer}>\r\n          <div className={styles.output}>\r\n            <textarea readOnly spellCheck='false' ref={this.outputRef}></textarea>\r\n          </div>\r\n          <div className={styles.inputBuffer}>\r\n            <div className={styles.title}>Input Buffer</div>\r\n            <textarea readOnly spellCheck='false' value={this.simulation.getInput().map(x => x.toString(16).padStart(2, '0')).join(' ')}></textarea>\r\n          </div>\r\n        </div>\r\n        <input className={styles.inputText} placeholder=\"input...\" id='inputText' onKeyDown={this.inputKeyDown.bind(this)}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n \r\nexport default Console;","import { Component } from \"react\";\r\nimport Editor from \"@monaco-editor/react\";\r\nimport styles from './Assembled.module.css';\r\nimport utils from \"../../utils\";\r\n\r\nconst GUTTER_GLYPH_MARGIN = 2;\r\n\r\nclass Assembled extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    if (props.simulation == null) throw new Error('props.simulation null');\r\n    \r\n    this.simulation = props.simulation;\r\n    this.onBreakpoint = typeof props.onBreakpoint === 'function' ? props.onBreakpoint : ()=>{};\r\n    \r\n    this.breakpointDecorations = {};\r\n    this.breakpoints = new Set();\r\n    this.curLineRunningDecorationId = null;\r\n    this.curLineRunningDecoration = null;\r\n    this.monaco = null;\r\n    this.editor = null;\r\n\r\n    this.state = {  };\r\n  }\r\n\r\n  componentWillMount() {\r\n    this.simulation.setBreakpointHandler((simulation, pc) => {\r\n      return this.breakpoints.has(pc);\r\n    });\r\n\r\n    this.pcUpdateHandler = utils.callLimiter((pc) => {\r\n      this.setLineRunning(pc/2+1);\r\n    }, 20);\r\n    this.simulationResetHandler = (pc) => {\r\n      this.removeAllBreakpoints();\r\n    };\r\n    this.simulation.on('reset', this.simulationResetHandler);\r\n    this.simulation.on('pc update', this.pcUpdateHandler);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.simulation.off('reset', this.simulationResetHandler);\r\n    this.simulation.off('pc update', this.pcUpdateHandler);\r\n  }\r\n\r\n  async setBreakpoints(breakpointList) {\r\n    this.removeAllBreakpoints();\r\n    for (let pc of breakpointList) {\r\n      this.setBreakpoint(pc);\r\n    }\r\n  }\r\n  \r\n  setBreakpoint(pc) {\r\n    if (this.editor == null) return;\r\n\r\n    let lineNumber = pc / 2 + 1;    \r\n    let lineCount = this.editor.getModel().getLineCount();\r\n    if (lineNumber <= 0 || lineNumber > lineCount) return;\r\n\r\n    let bpDec = this.breakpointDecorations[pc];\r\n    if (bpDec) return;\r\n    \r\n    bpDec = this.editor.deltaDecorations([], [\r\n      {\r\n        range: new this.monaco.Range(lineNumber, 1, lineNumber, 1),\r\n        options: {\r\n          isWholeLine: false,\r\n          glyphMarginClassName: styles.breakpoint,\r\n        },\r\n      },\r\n    ]);\r\n    this.breakpoints.add(pc);\r\n    this.breakpointDecorations[pc] = bpDec;\r\n    this.onBreakpoint(pc, true);\r\n  }\r\n\r\n  removeBreakpoint(pc) {\r\n    if (this.editor == null) return;\r\n\r\n    let bpDec = this.breakpointDecorations[pc];\r\n    if (bpDec) {\r\n      delete this.breakpointDecorations[pc];\r\n      this.editor.deltaDecorations(bpDec, []);\r\n    }\r\n    this.breakpoints.delete(pc);\r\n    this.onBreakpoint(pc, false);\r\n  }\r\n\r\n  removeAllBreakpoints() {\r\n    for (let pc of this.breakpoints) {\r\n      this.removeBreakpoint(pc);\r\n    }\r\n  }\r\n\r\n  toggleBreakpoint(pc) {\r\n    let bpDec = this.breakpointDecorations[pc];\r\n    if (bpDec) {\r\n      this.removeBreakpoint(pc);\r\n    } else {\r\n      this.setBreakpoint(pc);\r\n    }\r\n  }\r\n\r\n  setAssembled(text) {\r\n    if (this.editor == null) return;\r\n    this.editor.setValue(text);\r\n  }\r\n\r\n  setLineRunning(lineNumber) {\r\n    if (this.editor == null) return;\r\n    \r\n    let lineCount = this.editor.getModel().getLineCount();\r\n    if (lineNumber <= 0 || lineNumber > lineCount) {\r\n      this.curLineRunningDecoration = [];\r\n    } else {\r\n      this.curLineRunningDecoration = [\r\n        {\r\n          range: new this.monaco.Range(lineNumber, 1, lineNumber, 1),\r\n          options: {\r\n            isWholeLine: true,\r\n            className: styles.currentLineRunning,\r\n          }\r\n        }\r\n      ];\r\n      this.editor.revealLine(lineNumber);\r\n    }\r\n\r\n    let oldDec = this.curLineRunningDecorationId ? this.curLineRunningDecorationId : [];\r\n    this.curLineRunningDecorationId = this.editor.deltaDecorations(oldDec, this.curLineRunningDecoration);\r\n  }\r\n\r\n\tonEditorMount(editor, monaco) {\r\n\t\tthis.editor = editor;\r\n    this.monaco = monaco;\r\n\r\n\t\tlet self = this;\r\n\t\tthis.editor.updateOptions({\r\n\t\t\twordBasedSuggestions: false,\r\n\t\t\tautomaticLayout: true,\r\n\t\t\tlineDecorationsWidth: 0,\r\n\t\t\tglyphMargin: true,\r\n\t\t\tminimap: {\r\n\t\t\t\tenabled: false,\r\n\t\t\t},\r\n\t\t\tlineNumbers: (n) => ((n-1)*2).toString(16).padStart(4, '0'),\r\n\t\t\treadOnly: true,\r\n\t\t});\r\n\t\t\r\n\t\tthis.editor.onMouseDown(async (e) => {\r\n\t\t\tlet { target: { type, position: { lineNumber } } } = e;\r\n\t\t\tif (type !== GUTTER_GLYPH_MARGIN) return;\r\n\t\t\tlet pc = (lineNumber - 1) * 2;\r\n\t\t\tawait self.toggleBreakpoint(pc);\r\n\t\t});\r\n\t}\r\n\r\n  render() { \r\n    return (\r\n      <div className={styles.container}>\r\n        <div className={styles.title}>Disassembly</div>\r\n        <Editor\r\n          className={styles.editor}\r\n          language='vikingAsm'\r\n          theme='vikinAsmTheme'\r\n          onMount={this.onEditorMount.bind(this)}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n \r\nexport default Assembled;","import { Component, createRef } from \"react\";\r\nimport styles from './MemoryViewer.module.css'\r\n\r\nclass MemoryViewer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    if (!props.memory) throw new Error('props.memory null');\r\n\r\n    this.memory = props.memory;\r\n\r\n    this.tbodyRef = createRef();\r\n    this.memoryScrollRef = createRef();\r\n    this.memoryScrollAuxRef = createRef();\r\n    this.memoryAreaRef = createRef();\r\n\r\n    this.columns = 8;\r\n    this.rowsToShow = 16;\r\n    this.rows = 0;\r\n    this.dataItemBytes = 2;\r\n    this.scrollHeight = 0;\r\n    this.scrollTop = 0;\r\n    this.rowOffset = 0;\r\n    this.wordHighlightContexts = {};\r\n\r\n    this.state = {  }\r\n  }\r\n\r\n  async componentDidMount() {\r\n    \r\n    // Request data count\r\n    let dataCount = null;\r\n    while(dataCount == null) dataCount = await this.getDataCount();\r\n    this.rows = dataCount / this.columns / this.dataItemBytes;\r\n\r\n    // Setup scroll\r\n    this.scrollHeight = this.rows;\r\n    this.setScrollHeight(this.scrollHeight);\r\n\r\n    // Get initial data\r\n    let data = await this.getData();\r\n    this.recreateTable(data);\r\n\r\n    // scroll logic\r\n    this.memoryAreaRef.current.onwheel = (e) => {\r\n      this.memoryScrollRef.current.scrollTop += e.deltaY > 0 ? 1 : -1;\r\n      e.preventDefault();\r\n    }\r\n    this.memoryScrollRef.current.onscroll = async (e) => {\r\n      this.scrollTop = this.memoryScrollRef.current.scrollTop;\r\n      this.rowOffset = Math.floor((this.rows - this.rowsToShow) * (this.scrollTop / (this.scrollHeight - this.memoryScrollRef.current.getBoundingClientRect().height)));\r\n      let data = await this.getData();\r\n      this.recreateTable(data);\r\n      this.wordHighlightContexts = {};\r\n      e.preventDefault();\r\n    }\r\n\r\n    // Memory Handlers\r\n\r\n    this.onResetHandler = this.reset.bind(this);\r\n\r\n    this.onStorageWriteByteHandler = (address, byte) => {\r\n      if (address >= this.dataOffset && address < this.dataOffset + this.dataCount) {\r\n        this.updateByteAt(address, byte);\r\n      }\r\n    };\r\n    \r\n    this.onStorageWriteWordHandler = (address, word) => {\r\n      if (address >= this.dataOffset && address < this.dataOffset + this.dataCount) {\r\n        this.updateByteAt(address, (word >> 8) & 0xFF);\r\n        this.updateByteAt(address + 1, word & 0xFF);\r\n      }\r\n    };\r\n    \r\n    this.memory.on('reset', this.onResetHandler);\r\n    this.memory.on('storage write byte', this.onStorageWriteByteHandler);\r\n    this.memory.on('storage write word', this.onStorageWriteWordHandler);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.memory.off('reset', this.onResetHandler);\r\n    this.memory.off('storage write byte', this.onStorageWriteByteHandler);\r\n    this.memory.off('storage write word', this.onStorageWriteWordHandler);\r\n  }\r\n\r\n  updateByteAt(address, byte) {\r\n    let tbyteDiv = this.getByteElem(address);\r\n    tbyteDiv.textContent = byte.toString(16).padStart(2, '0');\r\n    this.highlightByte(address, tbyteDiv);\r\n  }\r\n    \r\n  getByteElem(address) {\r\n    let item = Math.floor(address / this.dataItemBytes);\r\n    let offset = address % this.dataItemBytes;\r\n\r\n    let column = item % this.columns;\r\n    let row = Math.floor(item / this.columns) - this.rowOffset;\r\n    \r\n    let tRow = this.tbodyRef.current.childNodes[row+1];\r\n    let tItem = tRow.childNodes[column+1];\r\n    let tbyteDiv = tItem.childNodes[offset];\r\n    return tbyteDiv;\r\n  }\r\n\r\n  highlightByte(address, elem) {\r\n    let ctx = this.wordHighlightContexts[address];\r\n    if (ctx) {\r\n      ctx.value = 1;\r\n    } else {\r\n      ctx = { value: 1 };\r\n      this.wordHighlightContexts[address] = ctx;\r\n\r\n      let id = setInterval(async () => {\r\n        if (ctx.value <= 0) {\r\n          elem.style['background-color'] = 'rgba(255,0,0,0)';\r\n          clearInterval(id);\r\n          delete this.wordHighlightContexts[address];\r\n        } else {\r\n          elem.style['background-color'] = 'rgba(255,0,0,' + ctx.value + ')';\r\n          ctx.value -= 0.05;\r\n        }\r\n      }, 50);\r\n    }\r\n  }\r\n\r\n  setScrollHeight(height) {\r\n    this.memoryScrollAuxRef.current.style.height = height + 'px';\r\n  }\r\n\r\n  recreateTable(data) {\r\n    let rowsCount = Math.ceil(data.length / this.columns);\r\n    \r\n    let html = '';\r\n    html += '<tr>';\r\n    html += '<td>';\r\n    html += 'X';\r\n    html += '</td>';\r\n    for (let x = 0; x < this.columns * this.dataItemBytes; x += this.dataItemBytes) {\r\n      html += '<td class=\"' + styles.memoryColumnNumber + '\">';\r\n      html += x.toString(16).padStart(4, '0');\r\n      html += '</td>';\r\n    }\r\n    html += '</tr>';\r\n    \r\n    let _x = 0;\r\n    for (let y = 0; y < rowsCount; y++) {\r\n      html += '<tr>';\r\n      html += '<td class=\"' + styles.memoryRowNumber + '\">';\r\n      html += (this.rowOffset * this.dataItemBytes * this.columns + y * this.dataItemBytes * this.columns).toString(16).padStart(4, '0');\r\n      html += '</td>';\r\n      \r\n      for (let x = 0; x < this.columns; x++) {\r\n        let item = data[y * this.columns + x];\r\n        let memDataHtml = '';\r\n        for (let i = 0; i < this.dataItemBytes; i++) {\r\n          let byte = item & 0xFF;\r\n          item >>= 8;\r\n          memDataHtml = '<div style=\"display:inline\">' + byte.toString(16).padStart(2, '0') + '</div>' + memDataHtml;\r\n        }\r\n        html += '<td class=\"' + styles.memoryData + '\">' + memDataHtml + '</td>';\r\n      }\r\n      html += '</tr>';\r\n      if (_x === this.columns) {\r\n          _x = 0;\r\n      }\r\n    }\r\n\r\n    this.tbodyRef.current.innerHTML = html;\r\n  }\r\n\r\n  reset() {\r\n    for (let i = this.dataOffset; i < this.dataOffset + this.dataCount; i++) {\r\n      let tbyteDiv = this.getByteElem(i);\r\n      tbyteDiv.textContent = '00';\r\n    }\r\n  }\r\n\r\n  async getDataCount() {\r\n    return await this.memory.getDataLength();\r\n  }\r\n\r\n  async getData() {\r\n    this.dataOffset = this.rowOffset * this.columns * 2;\r\n    this.dataCount = this.columns * this.rowsToShow * 2;\r\n    let data = await this.memory.getWordsFromRange(this.dataOffset, this.dataOffset + this.dataCount);\r\n    return data;\r\n  }\r\n\r\n  render() { \r\n    return (\r\n      <div className={styles.container}>\r\n        <div className={styles.content}>\r\n          <div className={styles.memoryScroll} ref={this.memoryScrollRef}><div ref={this.memoryScrollAuxRef}></div></div>\r\n          <div className={styles.memoryAreaContainer}>\r\n            <table className={styles.memoryArea} ref={this.memoryAreaRef}>\r\n              <tbody ref={this.tbodyRef}></tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n \r\nexport default MemoryViewer;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__2U2M-\"};","var map = {\n\t\"./basic/adc.js\": 189,\n\t\"./basic/add.js\": 190,\n\t\"./basic/and.js\": 191,\n\t\"./basic/asr.js\": 192,\n\t\"./basic/bez.js\": 193,\n\t\"./basic/bnz.js\": 194,\n\t\"./basic/ldb.js\": 195,\n\t\"./basic/ldc.js\": 196,\n\t\"./basic/ldr.js\": 197,\n\t\"./basic/ldw.js\": 198,\n\t\"./basic/lsr.js\": 199,\n\t\"./basic/or.js\": 200,\n\t\"./basic/ror.js\": 201,\n\t\"./basic/sbc.js\": 202,\n\t\"./basic/slt.js\": 203,\n\t\"./basic/sltu.js\": 204,\n\t\"./basic/stb.js\": 205,\n\t\"./basic/stw.js\": 206,\n\t\"./basic/sub.js\": 207,\n\t\"./basic/xor.js\": 208\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 188;","const adc = {\r\n    getName() {\r\n        return 'adc';\r\n    },\r\n    getOpcode() {\r\n        return 0x5001;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => false,\r\n    async executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n        let carry = simulation.getCarry();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getValue(rsa) + registerBank.getValue(rsb) + carry,\r\n        );\r\n    },\r\n}\r\n\r\nexport default adc;","const add = {\r\n    getName() {\r\n        return 'add';\r\n    },\r\n    getOpcode() {\r\n        return 0x5000;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => true,\r\n    async executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getValue(rsa) + registerBank.getValue(rsb),\r\n        );\r\n    },\r\n    async executeI(simulation, rst, immediate) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getValue(rst) + immediate,\r\n        );\r\n    },\r\n}\r\n\r\nexport default add;","const and = {\r\n    getName() {\r\n        return 'and';\r\n    },\r\n    getOpcode() {\r\n        return 0x0000;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => true,\r\n    async executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getUValue(rsa) & registerBank.getUValue(rsb),\r\n        );\r\n    },\r\n    async executeI(simulation, rst, immediate) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getUValue(rst) & immediate,\r\n        );\r\n    },\r\n}\r\n\r\nexport default and;","const asr = {\r\n    getName() {\r\n        return 'asr';\r\n    },\r\n    getOpcode() {\r\n        return 0xA001;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => false,\r\n    async executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        let value = registerBank.getValue(rsa);\r\n        simulation.setCarry(value & 1);\r\n        registerBank.setValue(\r\n            rst, \r\n            value >> 1,\r\n        );\r\n    },\r\n}\r\n\r\nexport default asr;","const bez = {\r\n    getName() {\r\n        return 'bez';\r\n    },\r\n    getOpcode() {\r\n        return 0xC000;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => true,\r\n    async executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        if (registerBank.getValue(rsa) === 0) {\r\n            simulation.setPC(registerBank.getValue(rsb) - 2);\r\n        }\r\n    },\r\n    async executeI(simulation, rst, immediate) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        if (registerBank.getValue(rst) === 0) {\r\n            simulation.setPC(simulation.getPC() + immediate);\r\n        }\r\n    },\r\n}\r\n\r\nexport default bez;","const bnz = {\r\n    getName() {\r\n        return 'bnz';\r\n    },\r\n    getOpcode() {\r\n        return 0xD000;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => true,\r\n    async executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        if (registerBank.getValue(rsa) !== 0) {\r\n            simulation.setPC(registerBank.getValue(rsb) - 2);\r\n        }\r\n    },\r\n    async executeI(simulation, rst, immediate) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        if (registerBank.getValue(rst) !== 0) {\r\n            simulation.setPC(simulation.getPC() + immediate);\r\n        }\r\n    },\r\n}\r\n\r\nexport default bnz;","const ldb = {\r\n    getName() {\r\n        return 'ldb';\r\n    },\r\n    getOpcode() {\r\n        return 0x0002;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => false,\r\n    async executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n        let memory = simulation.getMemory();\r\n\r\n        registerBank.setValue(rst, await memory.readByte(registerBank.getUValue(rsb)));\r\n    },\r\n}\r\n\r\nexport default ldb;","const ldc = {\r\n    getName() {\r\n        return 'ldc';\r\n    },\r\n    getOpcode() {\r\n        return 0x9000;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => false,\r\n    supportI: () => true,\r\n    async executeI(simulation, rst, immediate) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            (registerBank.getUValue(rst) << 8) | (immediate & 0xFF),\r\n        );\r\n    },\r\n}\r\n\r\nexport default ldc;","const ldr = {\r\n    getName() {\r\n        return 'ldr';\r\n    },\r\n    getOpcode() {\r\n        return 0x8000;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => false,\r\n    supportI: () => true,\r\n    async executeI(simulation, rst, immediate) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            immediate,\r\n        );\r\n    },\r\n}\r\n\r\nexport default ldr;","const ldw = {\r\n    getName() {\r\n        return 'ldw';\r\n    },\r\n    getOpcode() {\r\n        return 0x4002;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => false,\r\n    async executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n        let memory = simulation.getMemory();\r\n\r\n        registerBank.setValue(rst, await memory.readWord(registerBank.getUValue(rsb)));\r\n    },\r\n}\r\n\r\nexport default ldw;","const lsr = {\r\n    getName() {\r\n        return 'lsr';\r\n    },\r\n    getOpcode() {\r\n        return 0xA000;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => false,\r\n    async executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        let value = registerBank.getValue(rsa);\r\n        simulation.setCarry(value & 1);\r\n        registerBank.setValue(\r\n            rst, \r\n            value >>> 1,\r\n        );\r\n    },\r\n}\r\n\r\nexport default lsr;","const or = {\r\n    getName() {\r\n        return 'or';\r\n    },\r\n    getOpcode() {\r\n        return 0x1000;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => true,\r\n    async executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getValue(rsa) | registerBank.getValue(rsb),\r\n        );\r\n    },\r\n    async executeI(simulation, rst, immediate) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getValue(rst) | immediate,\r\n        );\r\n    },\r\n}\r\n\r\nexport default or;","const ror = {\r\n    getName() {\r\n        return 'ror';\r\n    },\r\n    getOpcode() {\r\n        return 0xA002;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => false,\r\n    async executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n        let architecture = simulation.getArchitecture();\r\n\r\n        let value = registerBank.getUValue(rsa);\r\n        registerBank.setValue(\r\n            rst, \r\n            (value >> 1) | (simulation.getCarry() << (architecture.getBitWidth() - 1)),\r\n        );\r\n        simulation.setCarry(value & 1);\r\n    },\r\n}\r\n\r\nexport default ror;","const sbc = {\r\n    getName() {\r\n        return 'sbc';\r\n    },\r\n    getOpcode() {\r\n        return 0x6001;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => false,\r\n    async executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n        let carry = simulation.getCarry();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getValue(rsa) - registerBank.getValue(rsb) - carry,\r\n        );\r\n    },\r\n}\r\n\r\nexport default sbc;","const slt = {\r\n    getName() {\r\n        return 'slt';\r\n    },\r\n    getOpcode() {\r\n        return 0x3000;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => true,\r\n    async executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n        \r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getValue(rsa) < registerBank.getValue(rsb) ? 1 : 0,\r\n        );\r\n    },\r\n    async executeI(simulation, rst, immediate) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getValue(rst) < immediate ? 1 : 0,\r\n        );\r\n    },\r\n}\r\n\r\nexport default slt;","const sltu = {\r\n    getName() {\r\n        return 'sltu';\r\n    },\r\n    getOpcode() {\r\n        return 0x4000;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => true,\r\n    async executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getUValue(rsa) < registerBank.getUValue(rsb) ? 1 : 0,\r\n        );\r\n    },\r\n    async executeI(simulation, rst, immediate) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getUValue(rst) < (immediate >>> 0) ? 1 : 0,\r\n        );\r\n    },\r\n}\r\n\r\nexport default sltu;","const stb = {\r\n    getName() {\r\n        return 'stb';\r\n    },\r\n    getOpcode() {\r\n        return 0x1002;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => false,\r\n    async executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n        let memory = simulation.getMemory();\r\n\r\n        await memory.writeByte(registerBank.getUValue(rsb), registerBank.getUValue(rsa));\r\n    },\r\n}\r\n\r\nexport default stb;","const stw = {\r\n    getName() {\r\n        return 'stw';\r\n    },\r\n    getOpcode() {\r\n        return 0x5002;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => false,\r\n    async executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n        let memory = simulation.getMemory();\r\n\r\n        await memory.writeWord(registerBank.getUValue(rsb), registerBank.getUValue(rsa));\r\n    },\r\n}\r\n\r\nexport default stw;","const sub = {\r\n    getName() {\r\n        return 'sub';\r\n    },\r\n    getOpcode() {\r\n        return 0x6000;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => true,\r\n    async executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getValue(rsa) - registerBank.getValue(rsb),\r\n        );\r\n    },\r\n    async executeI(simulation, rst, immediate) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getValue(rst) - immediate,\r\n        );\r\n    },\r\n}\r\n\r\nexport default sub;","const xor = {\r\n    getName() {\r\n        return 'xor';\r\n    },\r\n    getOpcode() {\r\n        return 0x2000;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => true,\r\n    async executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getUValue(rsa) ^ registerBank.getUValue(rsb),\r\n        );\r\n    },\r\n    async executeI(simulation, rst, immediate) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getUValue(rst) ^ immediate,\r\n        );\r\n    },\r\n}\r\n\r\nexport default xor;","var map = {\n\t\"./pseudo/hcf.js\": 210,\n\t\"./pseudo/ldi.js\": 211,\n\t\"./pseudo/lsl.js\": 212,\n\t\"./pseudo/pop.js\": 213,\n\t\"./pseudo/push.js\": 214\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 209;","const hcf = {\r\n    getName() {\r\n        return 'hcf';\r\n    },\r\n    isPseudo() {\r\n        return true;\r\n    },\r\n}\r\n\r\nexport default hcf;","const ldi = {\r\n    getName() {\r\n        return 'ldi';\r\n    },\r\n    isPseudo() {\r\n        return true;\r\n    },\r\n}\r\n\r\nexport default ldi;","const lsl = {\r\n    getName() {\r\n        return 'lsl';\r\n    },\r\n    isPseudo() {\r\n        return true;\r\n    },\r\n}\r\n\r\nexport default lsl;","const pop = {\r\n    getName() {\r\n        return 'pop';\r\n    },\r\n    isPseudo() {\r\n        return true;\r\n    },\r\n}\r\n\r\nexport default pop;","const push = {\r\n    getName() {\r\n        return 'push';\r\n    },\r\n    isPseudo() {\r\n        return true;\r\n    },\r\n}\r\n\r\nexport default push;","var map = {\n\t\"./pseudos/_large_immediate.js\": 216,\n\t\"./pseudos/asr.js\": 217,\n\t\"./pseudos/bez.js\": 218,\n\t\"./pseudos/bnz.js\": 219,\n\t\"./pseudos/hcf.js\": 220,\n\t\"./pseudos/ldb.js\": 221,\n\t\"./pseudos/ldi.js\": 222,\n\t\"./pseudos/ldw.js\": 223,\n\t\"./pseudos/lsl.js\": 224,\n\t\"./pseudos/lsr.js\": 225,\n\t\"./pseudos/pop.js\": 226,\n\t\"./pseudos/push.js\": 227,\n\t\"./pseudos/ror.js\": 228,\n\t\"./pseudos/stb.js\": 229,\n\t\"./pseudos/stw.js\": 230\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 215;","import operationsManager from '../../operations/operationsManager';\r\nimport Instruction from '../../instruction';\r\nimport Operand from '../../operand';\r\n\r\nlet supportedOpNames = new Set([ 'and', 'or', 'xor', 'slt', 'add', 'sub', 'bez', 'bnz' ]);\r\n\r\nconst operationLdi = operationsManager.getOperationByName('ldi');\r\n\r\nconst _large_immediate = {\r\n    getNonPseudoInstructions: (instruction, architecture) => {\r\n        if (!supportedOpNames.has(instruction.getOperation().getName())) return [];\r\n\r\n        let operands = instruction.getOperands();\r\n        if (operands.length !== 2) return [];\r\n\r\n        if (operands[0].getType() === 'register') {\r\n            switch (operands[1].getType()) {\r\n                case 'literal':\r\n                    let literal = operands[1].getValue();\r\n                    if (literal > 127 || literal < -128) {\r\n                        return [\r\n                            new Instruction(operationLdi, [ new Operand('at', Operand.REGISTER), new Operand(literal, Operand.LITERAL) ]),\r\n                            new Instruction(instruction.getOperation(), [ operands[0], operands[0], new Operand('at', Operand.REGISTER) ]),\r\n                        ];\r\n                    }\r\n                    break;\r\n                default:\r\n            }\r\n        }\r\n\r\n        return [];\r\n    },\r\n};\r\n\r\nexport default _large_immediate;","import operationsManager from '../../operations/operationsManager';\r\nimport Instruction from '../../instruction';\r\nimport Operand from '../../operand';\r\n\r\nconst operationAsr = operationsManager.getOperationByName('asr');\r\n\r\nconst asr = {\r\n    getOperation: () => operationAsr,\r\n    getNonPseudoInstructions: (instruction, architecture) => {\r\n        if (instruction.getOperation().getName() !== operationAsr.getName()) return [];\r\n\r\n        let operands = instruction.getOperands();\r\n        if (operands.length !== 2) return [];\r\n\r\n        return [\r\n            new Instruction(operationAsr, [ operands[0], operands[1], new Operand('r0', Operand.REGISTER) ] ),\r\n        ];\r\n    },\r\n};\r\n\r\nexport default asr;","import operationsManager from '../../operations/operationsManager';\r\nimport Instruction from '../../instruction';\r\nimport Operand from '../../operand';\r\n\r\nconst operationBez = operationsManager.getOperationByName('bez');\r\nconst operationLdi = operationsManager.getOperationByName('ldi');\r\n\r\nconst bez = {\r\n    getOperation: () => operationBez,\r\n    getNonPseudoInstructions: (instruction, architecture) => {\r\n        if (instruction.getOperation().getName() !== operationBez.getName()) return [];\r\n\r\n        let operands = instruction.getOperands();\r\n        if (operands.length !== 2) return [];\r\n        \r\n        if (operands[0].getType() === 'register') {\r\n            switch (operands[1].getType()) {\r\n                case 'register':\r\n                    // bez r1, r2 -> [ bez r0, r1, r2 ]\r\n                    return [\r\n                        new Instruction(operationBez, [ new Operand('r0', Operand.REGISTER), operands[0], operands[1] ]),\r\n                    ];\r\n                case 'symbol':\r\n                    // bez r1, sym -> [ ldi at, sym   bez r0, r1, at ]\r\n                    return [\r\n                        new Instruction(operationLdi, [ new Operand('at', Operand.REGISTER), operands[1] ]),\r\n                        new Instruction(operationBez, [ new Operand('r0', Operand.REGISTER), operands[0], new Operand('at', Operand.REGISTER) ]),\r\n                    ];\r\n                default:\r\n            }\r\n        }\r\n        return [];\r\n    },\r\n};\r\n\r\nexport default bez;","import operationsManager from '../../operations/operationsManager';\r\nimport Instruction from '../../instruction';\r\nimport Operand from '../../operand';\r\n\r\nconst operationBnz = operationsManager.getOperationByName('bnz');\r\nconst operationLdi = operationsManager.getOperationByName('ldi');\r\n\r\nconst bnz = {\r\n    getOperation: () => operationBnz,\r\n    getNonPseudoInstructions: (instruction, architecture) => {\r\n        if (instruction.getOperation().getName() !== operationBnz.getName()) return [];\r\n\r\n        let operands = instruction.getOperands();\r\n        if (operands.length !== 2) return [];\r\n\r\n        if (operands[0].getType() === 'register') {\r\n            switch (operands[1].getType()) {\r\n                case 'register':\r\n                    // bnz r1, r2 -> [ bnz r0, r1, r2 ]\r\n                    return [\r\n                        new Instruction(operationBnz, [ new Operand('r0', Operand.REGISTER), operands[0], operands[1] ]),\r\n                    ];\r\n                case 'symbol':\r\n                    // bnz r1, sym -> [ ldi at, sym   bnz r0, r1, at ]\r\n                    return [\r\n                        new Instruction(operationLdi, [ new Operand('at', Operand.REGISTER), operands[1] ]),\r\n                        new Instruction(operationBnz, [ new Operand('r0', Operand.REGISTER), operands[0], new Operand('at', Operand.REGISTER) ]),\r\n                    ];\r\n                default:\r\n            }\r\n        }\r\n        return [];\r\n    },\r\n};\r\n\r\nexport default bnz;","import operationsManager from '../../operations/operationsManager';\r\nimport Instruction from '../../instruction';\r\nimport Operand from '../../operand';\r\n\r\nconst operationHcf = operationsManager.getOperationByName('hcf');\r\n\r\nconst hcf = {\r\n    getOperation: () => operationHcf,\r\n    getNonPseudoInstructions: (instruction, architecture) => {\r\n        if (instruction.getOperation().getName() !== operationHcf.getName()) return [];\r\n\r\n        let operands = instruction.getOperands();\r\n        if (operands.length !== 0) return [];\r\n\r\n        // hcf -> [ ldb r0, r0, r0 ]\r\n        return [\r\n            new Instruction(operationHcf, [ \r\n                new Operand('r0', Operand.REGISTER), \r\n                new Operand('r0', Operand.REGISTER), \r\n                new Operand('r0', Operand.REGISTER)\r\n            ]),\r\n        ];\r\n    },\r\n};\r\n\r\nexport default hcf;","import operationsManager from '../../operations/operationsManager';\r\nimport Instruction from '../../instruction';\r\nimport Operand from '../../operand';\r\n\r\nconst operationLdb = operationsManager.getOperationByName('ldb');\r\nconst operationLdi = operationsManager.getOperationByName('ldi');\r\n\r\nconst ldb = {\r\n    getOperation: () => operationLdb,\r\n    getNonPseudoInstructions: (instruction, architecture) => {\r\n        if (instruction.getOperation().getName() !== operationLdb.getName()) return [];\r\n\r\n        let operands = instruction.getOperands();\r\n        if (operands.length !== 2) return [];\r\n\r\n        if (operands[0].getType() === 'register') {\r\n            switch (operands[1].getType()) {\r\n                case 'register':\r\n                    // ldb r1, r2 -> [ ldb r1, r0, r2 ]\r\n                    return [\r\n                        new Instruction(operationLdb, [ operands[0], new Operand('r0', Operand.REGISTER), operands[1] ]),\r\n                    ];\r\n                case 'symbol':\r\n                case 'literal':\r\n                    // ldb r1, 0 -> [ ldi at, 0   ldb r1, r0, at ]\r\n                    return [\r\n                        new Instruction(operationLdi, [ new Operand('at', Operand.REGISTER), operands[1] ]),\r\n                        new Instruction(operationLdb, [ operands[0], new Operand('r0', Operand.REGISTER), new Operand('at', Operand.REGISTER) ]),\r\n                    ];\r\n                default:\r\n            }\r\n        }\r\n        return [];\r\n    },\r\n};\r\n\r\nexport default ldb;","import operationsManager from '../../operations/operationsManager';\r\nimport Instruction from '../../instruction';\r\nimport Operand from '../../operand';\r\nimport  utils from '../../../utils';\r\nconst operation = operationsManager.getOperationByName('ldi');\r\n\r\nconst operationLdr = operationsManager.getOperationByName('ldr');\r\nconst operationLdc = operationsManager.getOperationByName('ldc');\r\n\r\nconst ldi = {\r\n    getOperation: () => operation,\r\n    getNonPseudoInstructions: (instruction, architecture) => {\r\n        if (instruction.getOperation().getName() !== operation.getName()) return [];\r\n\r\n        let operands = instruction.getOperands();\r\n        if (operands.length !== 2) return [];\r\n\r\n        if (operands[0].getType() === 'register') {\r\n            switch (operands[1].getType()) {\r\n                case 'literal':\r\n                    let literal = operands[1].getValue();\r\n                    if (literal < 256 && literal > -128) {\r\n                        // ldi r1, const -> ldr r1, const\r\n                        // -128 < const < 256\r\n                        return [\r\n                            new Instruction(operationLdr, [ operands[0], operands[1] ]),\r\n                        ];\r\n                    } else {\r\n                        // ldi r1, const -> [ ldr r1, const(first byte)   ldc r1, const(second byte) ]  (16 bits)\r\n                        // -128 >= const <= 256\r\n\r\n                        let bytes = utils.numberToBytes(literal, architecture.getByteWidth());\r\n                        if (bytes.length === 0) throw new Error('Convert number to bytes error');\r\n                        //bytes = utils.removeFirstZeroes(bytes);\r\n                        if (bytes.length === 0) {\r\n                            return [ new Instruction(operationLdr, [ operands[0], new Operand(0, Operand.LITERAL) ]) ]\r\n                        } else {\r\n                            return [\r\n                                new Instruction(operationLdr, [ operands[0], new Operand(bytes.shift(), Operand.LITERAL) ]),\r\n                                ...bytes.map(byte => new Instruction(operationLdc, [ operands[0], new Operand(byte, Operand.LITERAL) ])),\r\n                            ];\r\n                        }\r\n                    }\r\n                case 'symbol':\r\n                    // ldi r1, sym -> [ ldc r1, sym+0(1 byte)   ldc r1, sym+1(1 byte) ]\r\n                    return new Array(architecture.getByteWidth()).fill(0).map(\r\n                        (x, i) => {\r\n                            return new Instruction(operationLdc, [ \r\n                                operands[0], \r\n                                new Operand(operands[1].getValue(), Operand.SYMBOL).setByteRange({ min: i, max: i}),\r\n                            ]);\r\n                        }\r\n                    );\r\n                default:\r\n            }\r\n        }\r\n        return [];\r\n    },\r\n};\r\n\r\nexport default ldi;","import operationsManager from '../../operations/operationsManager';\r\nimport Instruction from '../../instruction';\r\nimport Operand from '../../operand';\r\n\r\nconst operationLdw = operationsManager.getOperationByName('ldw');\r\nconst operationLdi = operationsManager.getOperationByName('ldi');\r\n\r\nconst ldw = {\r\n    getOperation: () => operationLdw,\r\n    getNonPseudoInstructions: (instruction, architecture) => {\r\n        if (instruction.getOperation().getName() !== operationLdw.getName()) return [];\r\n\r\n        let operands = instruction.getOperands();\r\n        if (operands.length !== 2) return [];\r\n\r\n        if (operands[0].getType() === 'register') {\r\n            switch (operands[1].getType()) {\r\n                case 'register':\r\n                    // ldw r1, r2 -> [ ldw r1, r0, r2 ]\r\n                    return [\r\n                        new Instruction(operationLdw, [ operands[0], new Operand('r0', Operand.REGISTER), operands[1] ]),\r\n                    ];\r\n                case 'symbol':\r\n                case 'literal':\r\n                    // ldw r1, lit -> [ ldi at, lit   ldb r1, r0, at ]\r\n                    return [\r\n                        new Instruction(operationLdi, [ new Operand('at', Operand.REGISTER), operands[1] ]),\r\n                        new Instruction(operationLdw, [ operands[0], new Operand('r0', Operand.REGISTER), new Operand('at', Operand.REGISTER) ]),\r\n                    ];\r\n                default:\r\n            }\r\n        }\r\n        return [];\r\n    },\r\n};\r\n\r\nexport default ldw;","import operationsManager from '../../operations/operationsManager';\r\nimport Instruction from '../../instruction';\r\n\r\nconst operationLsl = operationsManager.getOperationByName('lsl');\r\nconst operationAdd = operationsManager.getOperationByName('add');\r\n\r\nconst lsl = {\r\n    getOperation: () => operationLsl,\r\n    getNonPseudoInstructions: (instruction, architecture) => {\r\n        if (instruction.getOperation().getName() !== operationLsl.getName()) return [];\r\n\r\n        let operands = instruction.getOperands();\r\n        if (operands.length !== 2) return [];\r\n\r\n        if (operands[0].getType() === 'register') {\r\n            switch (operands[1].getType()) {\r\n                case 'register':\r\n                    // lsl r1, r2 -> [ add r1, r2, r2 ]\r\n                    return [\r\n                        new Instruction(operationAdd, [ operands[0], operands[1], operands[1] ]),\r\n                    ];\r\n                default:\r\n            }\r\n        }\r\n        return [];\r\n    },\r\n};\r\n\r\nexport default lsl;","import operationsManager from '../../operations/operationsManager';\r\nimport Instruction from '../../instruction';\r\nimport Operand from '../../operand';\r\n\r\nconst operationLsr = operationsManager.getOperationByName('lsr');\r\n\r\nconst lsr = {\r\n    getOperation: () => operationLsr,\r\n    getNonPseudoInstructions: (instruction, architecture) => {\r\n        if (instruction.getOperation().getName() !== operationLsr.getName()) return [];\r\n\r\n        let operands = instruction.getOperands();\r\n        if (operands.length !== 2) return [];\r\n\r\n        return [\r\n            new Instruction(operationLsr, [ operands[0], operands[1], new Operand('r0', Operand.REGISTER) ]),\r\n        ];\r\n    },\r\n};\r\n\r\nexport default lsr;","import operationsManager from '../../operations/operationsManager';\r\nimport Instruction from '../../instruction';\r\nimport Operand from '../../operand';\r\n\r\nconst operationPop = operationsManager.getOperationByName('pop');\r\nconst operationLdw = operationsManager.getOperationByName('ldw');\r\nconst operationAdd = operationsManager.getOperationByName('add');\r\n\r\nconst pop = {\r\n    getOperation: () => operationLdw,\r\n    getNonPseudoInstructions: (instruction, architecture) => {\r\n        if (instruction.getOperation().getName() !== operationPop.getName()) return [];\r\n\r\n        let operands = instruction.getOperands();\r\n        if (operands.length !== 1) return [];\r\n\r\n        if (operands[0].getType() === 'register') {\r\n            // pop r1 -> [ ldw r1, sp   add sp, 2 ]\r\n            return [\r\n                new Instruction(operationLdw, [ operands[0], new Operand('sp', Operand.REGISTER) ]),\r\n                new Instruction(operationAdd, [ new Operand('sp', Operand.REGISTER), new Operand(2, Operand.LITERAL) ]),\r\n            ];\r\n        }\r\n        return [];\r\n    },\r\n};\r\n\r\nexport default pop;","import operationsManager from '../../operations/operationsManager';\r\nimport Instruction from '../../instruction';\r\nimport Operand from '../../operand';\r\n\r\nconst operationPush = operationsManager.getOperationByName('push');\r\nconst operationSub = operationsManager.getOperationByName('sub');\r\nconst operationStw = operationsManager.getOperationByName('stw');\r\n\r\nconst push = {\r\n    getOperation: () => operationPush,\r\n    getNonPseudoInstructions: (instruction, architecture) => {\r\n        if (instruction.getOperation().getName() !== operationPush.getName()) return [];\r\n\r\n        let operands = instruction.getOperands();\r\n        if (operands.length !== 1) return [];\r\n\r\n        if (operands[0].getType() === 'register') {\r\n            // push r1 -> [ sub sb, 2   stw r1, sp ]\r\n            return [\r\n                new Instruction(operationSub, [ new Operand('sp', Operand.REGISTER), new Operand(2, Operand.LITERAL) ]),\r\n                new Instruction(operationStw, [ operands[0], new Operand('sp', Operand.REGISTER) ]),\r\n            ];\r\n        }\r\n        return [];\r\n    },\r\n};\r\n\r\nexport default push;","import operationsManager from '../../operations/operationsManager';\r\nimport Instruction from '../../instruction';\r\nimport Operand from '../../operand';\r\n\r\nconst operationRor = operationsManager.getOperationByName('ror');\r\n\r\nconst ror = {\r\n    getOperation: () => operationRor,\r\n    getNonPseudoInstructions: (instruction, architecture) => {\r\n        if (instruction.getOperation().getName() !== operationRor.getName()) return [];\r\n\r\n        let operands = instruction.getOperands();\r\n        if (operands.length !== 2) return [];\r\n\r\n        return [\r\n            new Instruction(operationRor, [ operands[0], operands[1], new Operand('r0', Operand.REGISTER) ]),\r\n        ];\r\n    },\r\n};\r\n\r\nexport default ror;","import operationsManager from '../../operations/operationsManager';\r\nimport Instruction from '../../instruction';\r\nimport Operand from '../../operand';\r\n\r\nconst operationStb = operationsManager.getOperationByName('stb');\r\nconst operationLdi = operationsManager.getOperationByName('ldi');\r\n\r\nconst stb = {\r\n    getOperation: () => operationStb,\r\n    getNonPseudoInstructions: (instruction, architecture) => {\r\n        if (instruction.getOperation().getName() !== operationStb.getName()) return [];\r\n\r\n        let operands = instruction.getOperands();\r\n        if (operands.length !== 2) return [];\r\n\r\n        if (operands[0].getType() === 'register') {\r\n            switch (operands[1].getType()) {\r\n                case 'register':\r\n                    // stb r1, r2 -> [ stb r0, r1, r2 ]\r\n                    return [\r\n                        new Instruction(operationStb, [ new Operand('r0', Operand.REGISTER), operands[0], operands[1] ]),\r\n                    ];\r\n                case 'symbol':\r\n                case 'literal':\r\n                    // stb r1, lit -> [ ldi at, lit   stb r0, r1, at ]\r\n                    return [\r\n                        new Instruction(operationLdi, [ new Operand('at', Operand.REGISTER), operands[1] ]),\r\n                        new Instruction(operationStb, [ new Operand('r0', Operand.REGISTER), operands[0], new Operand('at', Operand.REGISTER) ]),\r\n                    ];\r\n                default:\r\n            }\r\n        }\r\n        return [];\r\n    },\r\n};\r\n\r\nexport default stb;","import operationsManager from '../../operations/operationsManager';\r\nimport Instruction from '../../instruction';\r\nimport Operand from '../../operand';\r\n\r\nconst operationStw = operationsManager.getOperationByName('stw');\r\nconst operationLdi = operationsManager.getOperationByName('ldi');\r\n\r\nconst stw = {\r\n    getOperation: () => operationStw,\r\n    getNonPseudoInstructions: (instruction, architecture) => {\r\n        if (instruction.getOperation().getName() !== operationStw.getName()) return [];\r\n\r\n        let operands = instruction.getOperands();\r\n        if (operands.length !== 2) return [];\r\n\r\n        if (operands[0].getType() === 'register') {\r\n            switch (operands[1].getType()) {\r\n                case 'register':\r\n                    // stw r1, r2 -> [ stw r0, r1, r2 ]\r\n                    return [\r\n                        new Instruction(operationStw, [ new Operand('r0', Operand.REGISTER), operands[0], operands[1] ]),\r\n                    ];\r\n                case 'symbol':\r\n                case 'literal':\r\n                    // stw r1, lit -> [ ldi at, lit   stw r0, r1, at ]\r\n                    return [\r\n                        new Instruction(operationLdi, [ new Operand('at', Operand.REGISTER), operands[1] ]),\r\n                        new Instruction(operationStw, [ new Operand('r0', Operand.REGISTER), operands[0], new Operand('at', Operand.REGISTER) ]),\r\n                    ];\r\n                default:\r\n            }\r\n        }\r\n        return [];\r\n    },\r\n};\r\n\r\nexport default stw;","import React, { Component } from 'react';\nimport { HashRouter, Route } from \"react-router-dom\";\nimport Home from '../home/Home.module';\nimport styles from './App.module.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { };\n  }\n\n  render() {\n    return (\n     <HashRouter basename='/'>\n      <div className={styles.container}>\n       <Route exact path=\"/\" component={Home} />\n      </div>\n     </HashRouter>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app/App.module';\nimport './styles.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);","import Instruction from './instruction';\r\n\r\nimport architectureManager from './architectureManager';\r\nimport operationsManager from './operations/operationsManager';\r\nimport pseudoManager from './pseudoInstructionConversions/pseudoManager';\r\nimport pseudoConverter from './pseudoInstructionConversions/pseudoConverter';\r\n\r\nimport assembler from './assembler/assembler';\r\nimport disassembler from './disassembler/disassembler';\r\n\r\nimport memory from './simulator/memory';\r\nimport memoryStorage16 from './simulator/memoryStorage16';\r\nimport registerBank from './simulator/registerBank';\r\n\r\nimport simulation from './simulator/simulation';\r\n\r\narchitectureManager.setup();\r\noperationsManager.setup();\r\npseudoManager.setup();\r\n\r\nconst asm = {\r\n    Instruction,\r\n    architectureManager,\r\n    operationsManager,\r\n    pseudoManager,\r\n    pseudoConverter,\r\n    assembler,\r\n    disassembler,\r\n    memory,\r\n    memoryStorage16,\r\n    registerBank,\r\n    simulation,\r\n};\r\n\r\nexport default asm;"],"sourceRoot":""}