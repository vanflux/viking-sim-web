{"version":3,"sources":["business/asm/operand.js","business/asm/operations/operationsManager.js","business/asm/instruction.js","utils.js","components/control/Control.module.css","components/console/Console.module.css","components/simulator/Simulator.module.css","components/program/Program.module.css","components/memoryViewer/MemoryViewer.module.css","components/registers/Registers.module.css","components/symbolTable/SymbolTable.module.css","components/assembled/Assembled.module.css","components/canvasViewer/CanvasViewer.module.css","components/window/Window.module.css","components/home/Home.module.css","components/console/Console.module.js","components/app/App.module.css","business/asm/operations sync /basic/.+/.js$","business/asm/operations/basic/adc.js","business/asm/operations/basic/add.js","business/asm/operations/basic/and.js","business/asm/operations/basic/asr.js","business/asm/operations/basic/bez.js","business/asm/operations/basic/bnz.js","business/asm/operations/basic/ldb.js","business/asm/operations/basic/ldc.js","business/asm/operations/basic/ldr.js","business/asm/operations/basic/ldw.js","business/asm/operations/basic/lsr.js","business/asm/operations/basic/or.js","business/asm/operations/basic/ror.js","business/asm/operations/basic/sbc.js","business/asm/operations/basic/slt.js","business/asm/operations/basic/sltu.js","business/asm/operations/basic/stb.js","business/asm/operations/basic/stw.js","business/asm/operations/basic/sub.js","business/asm/operations/basic/xor.js","business/asm/operations sync /pseudo/.+/.js$","business/asm/operations/pseudo/hcf.js","business/asm/operations/pseudo/ldi.js","business/asm/operations/pseudo/lsl.js","business/asm/operations/pseudo/mov.js","business/asm/operations/pseudo/neg.js","business/asm/operations/pseudo/nop.js","business/asm/operations/pseudo/not.js","business/asm/operations/pseudo/pop.js","business/asm/operations/pseudo/push.js","business/asm/pseudoInstructionConversions sync /pseudos/.+/.js$","business/asm/pseudoInstructionConversions/pseudos/_large_immediate.js","business/asm/pseudoInstructionConversions/pseudos/asr.js","business/asm/pseudoInstructionConversions/pseudos/bez.js","business/asm/pseudoInstructionConversions/pseudos/bnz.js","business/asm/pseudoInstructionConversions/pseudos/hcf.js","business/asm/pseudoInstructionConversions/pseudos/ldb.js","business/asm/pseudoInstructionConversions/pseudos/ldi.js","business/asm/pseudoInstructionConversions/pseudos/ldw.js","business/asm/pseudoInstructionConversions/pseudos/lsl.js","business/asm/pseudoInstructionConversions/pseudos/lsr.js","business/asm/pseudoInstructionConversions/pseudos/mov.js","business/asm/pseudoInstructionConversions/pseudos/neg.js","business/asm/pseudoInstructionConversions/pseudos/nop.js","business/asm/pseudoInstructionConversions/pseudos/not.js","business/asm/pseudoInstructionConversions/pseudos/pop.js","business/asm/pseudoInstructionConversions/pseudos/push.js","business/asm/pseudoInstructionConversions/pseudos/ror.js","business/asm/pseudoInstructionConversions/pseudos/stb.js","business/asm/pseudoInstructionConversions/pseudos/stw.js","business/asm/architectureManager.js","components/registers/Registers.module.js","business/asm/simulator/memoryStorage16.js","business/asm/simulator/memory.js","business/asm/architecture.js","business/asm/simulator/registerBank.js","business/asm/asmErrors.js","business/asm/simulator/io/ioManager.js","business/asm/simulator/simulation.js","business/asm/pseudoInstructionConversions/pseudoManager.js","business/asm/pseudoInstructionConversions/pseudoConverter.js","business/asm/assembler/instructionParser.js","business/asm/assembler/dataParser.js","business/asm/assembler/commentParser.js","business/asm/assembler/lineParser.js","business/asm/assembler/assembler.js","business/asm/disassembler/disassembler.js","business/asm/index.js","assets/images/AssembleIcon.svg","components/program/Program.module.js","components/symbolTable/SymbolTable.module.js","assets/images/ResetIcon.svg","assets/images/StepIcon.svg","components/control/Control.module.js","components/assembled/Assembled.module.js","components/memoryViewer/MemoryViewer.module.js","business/asm/simulator/io/port.js","business/asm/simulator/io/devices/device.js","business/asm/simulator/io/devices/consoleDevice.js","business/asm/simulator/io/devices/canvasDevice.js","components/canvasViewer/CanvasViewer.module.js","components/simulator/Simulator.module.js","components/window/Window.module.js","components/home/Home.module.js","components/app/App.module.js","index.js"],"names":["Operand","value","type","this","byteRange","REGISTER","SYMBOL","LITERAL","basicOps","pseudoOps","basicOpsByOpcode","basicOpsByName","pseudoOpsByName","basicOpsNames","pseudoOpsNames","opsNames","getOperationByName","name","operationsManager","setup","basicMs","require","keys","map","key","default","pseudoMs","Object","fromEntries","op","getOpcode","getName","concat","getOperationNames","getBasicOperationByName","getPseudoOperationByName","isOperationName","isBasicOperationName","isPseudoOperationName","getOperationByOpcode","opcode","Instruction","operation","operands","getType","isPseudo","TYPE_R","supportR","TYPE_I","supportI","length","architecture","Error","finalCode","getRegisterCode","getValue","rst","immediate","utils","signedToUnsigned","simulation","rsa","rsb","executeR","executeI","operand","signedNumberToHex","join","code","rstCode","unsignedToSigned","getRegisterNameByCode","TypeError","rsaCode","rsbCode","number","byteWidth","mask","Math","pow","toString","padStart","isNegative","numberToBytes","bytes","i","unshift","bytesToNumber","byte","isInteger","str","isNaN","parseInt","sleep","ms","Promise","resolve","setTimeout","callLimiter","func","delay","thId","lastArgs","args","module","exports","Console","props","consoleDevice","onInput","inputRef","createRef","outputRef","isNewLine","lastNode","lastType","state","inputBuffer","waiting","inputBufferHandler","setState","waitingHandler","current","focus","writeCharHandler","char","write","writeIntHandler","int","on","off","text","textNode","document","createTextNode","appendChild","spanElem","createElement","classList","add","styles","infoColor","errorColor","textContent","scrollTop","scrollHeight","inputBytes","Array","buffer","Buffer","from","addBytes","e","toLowerCase","target","addTextInput","innerHTML","className","container","outAndInBufContainer","output","ref","title","readOnly","spellCheck","x","bottom","alertsOutline","inputText","placeholder","id","onKeyDown","inputKeyDown","bind","btn","onClick","clearOutput","Component","webpackContext","req","webpackContextResolve","__webpack_require__","o","adc","registerBank","getRegisterBank","carry","getCarry","setValue","and","getUValue","asr","setCarry","bez","setPC","getPC","bnz","ldb","memory","getMemory","readByte","ldc","ldr","ldw","readWord","lsr","or","ror","getArchitecture","getBitWidth","sbc","slt","sltu","stb","writeByte","stw","writeWord","sub","xor","hcf","ldi","lsl","mov","neg","nop","not","pop","push","supportedOpNames","Set","operationLdi","_large_immediate","getNonPseudoInstructions","instruction","has","getOperation","getOperands","literal","operationAsr","operationBez","operationBnz","operationHcf","operationLdb","operationLdr","operationLdc","getByteWidth","shift","fill","setByteRange","min","max","operationLdw","operationLsl","operationAdd","operationLsr","operationMov","operationAnd","operationNeg","operationXor","operationNop","operationNot","operationPop","operationPush","operationSub","operationStw","operationRor","operationStb","_16","_32","Registers","registerInfos","entries","getRegisterInfos","pc","valueUpdateHandler","content","generalRegisterList","infos","aliases","pcRegister","Register","registerContainer","MemoryStorage16","data","address","word","byte0","byte1","start","end","slice","words","Memory","storage","memoryRegions","result","reset","emit","getDataLength","getBytesFromRange","getWordsFromRange","onReadByte","newValue","onReadWord","onWriteByte","onWriteWord","bitWidth","getMemoryRegions","EventEmitter","Architecture","registers","registersByName","registerName","register","aliasName","reduce","a","b","registersNameByCode","hasRegisterName","architectureManager","codeData","stack","io","getViking16Arch","getViking32Arch","RegisterBank","registerByteWidth","forEach","oldValue","archRegisters","getRegisters","SimulationError","message","IOManager","ports","portHandlers","waitingPort","port","answerHandler","waitingIO","run","index","findIndex","splice","handlers","read","waitingRead","waitingWrite","defaultBreakpointHandler","Simulation","codeExecutionMaxPC","running","ended","stopping","stepInterval","cycles","ioManager","breakpointHandler","setupMemoryHandlers","stop","setCycles","writeObjCodeMemory","ioAddress","portIndex","addPort","removePort","symbolTable","getPorts","device","symbolList","rawObjCode","wordArray","match","exc","console","error","disassemble","execute","incrementPC","incrementCycles","timePerBlock","toExecFloat","toExec","floor","Date","now","step","sleepTime","runner","getMask","handler","pseudos","pseudoManager","pseudosMs","getPseudoInstructions","PseudoConverter","instructions","convInstruction","convInstructions","convert","InstructionParser","parseOperation","parseOperands","isArray","operationName","operandValue","isRegisterName","operandsValues","split","trim","getInstructionOperandValueType","DataParser","parseToBytes","bytesToData","values","lastC","startIndex","capturingQuote","c","unraw","substring","extractValues","charCodeAt","trimmed","splitted","some","curBytes","j","CommentParser","hasComment","comment","rest","replace","indexOf","LineParser","instructionParser","dataParser","commentParser","symbol","line","getSymbolAndRest","sanitizedRest","parse","isInstruction","Assembler","programData","pseudoConverter","extraSymbolTable","lines","sequence","objectCodeArray","additionalInfos","pass1","pass2","pass3","rawObjectCode","assign","lineParser","additionalInfo","lineIndex","lineNumber","parsed","symbolValue","finalValue","getByteRange","setType","item","Number","assemble","Disassembler","rawHex","arrayLiteral","_g","alreadyCreatedLang","Program","curArchitecture","infosRef","onChange","onLoadSavedRequest","onLoadDefaultRequest","onSaveRequest","portsSymbols","regNames","getRegisterNames","monaco","languages","setMonarchTokensProvider","operationKeywords","registerKeywords","decimalNumbers","hexNumbers","escapes","tokenizer","root","cases","token","bracket","next","string","registerCompletionItemProvider","provideCompletionItems","suggestions","opName","label","detail","documentation","kind","CompletionItemKind","Function","insertText","portSymbol","editor","defineTheme","base","inherit","rules","foreground","colors","getModel","onDidChangeContent","initText","saveBindHandler","addCommand","KeyMod","CtrlCmd","KeyCode","KEY_S","save","fullRange","getFullModelRange","executeEdits","range","lineCount","getLineCount","lineDec","Range","options","isWholeLine","curLineHighlight","revealLine","decId","deltaDecorations","setInfos","titleContainer","loadSaved","loadDefault","language","theme","beforeMount","onEditorWillMount","onMount","onEditorMount","SymbolTable","onSymbolNameClick","onSymbolValueClick","symbols","symbolName","border","frame","fillAllSpace","_excluded","_extends","arguments","source","prototype","hasOwnProperty","call","apply","_objectWithoutProperties","excluded","sourceKeys","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","SvgAssembleIcon","_ref","svgRef","titleId","xmlns","width","height","viewBox","preserveAspectRatio","transform","d","ForwardRef","SvgResetIcon","SvgStepIcon","Control","onAutoAssembleChanged","onStepIntervalChanged","onAssemble","onRun","onPause","onStep","onReset","autoAssemble","checked","cycleArea","cycleLabel","autoAssembleChanged","style","margin","btnList","assembleClick","btnLaterals","runClick","stopClick","stepClick","resetClick","delayLabel","delayInput","stepIntervalChanged","onKeyUp","Assembled","breakpointDecorations","pcBreakpoints","curLineRunningDecorationId","curLineRunningDecoration","removeBreakpoint","setBreakpoint","bpDec","glyphMarginClassName","breakpoint","delete","pcs","removeAllBreakpoints","linesCount","newBreakpointPCs","filter","setBreakpoints","setCurrentPC","currentLineRunning","oldDec","self","updateOptions","wordBasedSuggestions","automaticLayout","lineDecorationsWidth","glyphMargin","minimap","enabled","lineNumbers","n","onMouseDown","position","toggleBreakpoint","MemoryViewer","tbodyRef","memoryScrollRef","memoryScrollAuxRef","memoryAreaRef","columns","rowsToShow","rows","dataItemBytes","rowOffset","wordHighlightContexts","dataCount","getDataCount","setScrollHeight","getData","recreateTable","onwheel","deltaY","preventDefault","onscroll","getBoundingClientRect","onResetHandler","onStorageWriteByteHandler","dataOffset","updateByteAt","onStorageWriteWordHandler","tbyteDiv","getByteElem","highlightByte","offset","column","row","childNodes","elem","ctx","setInterval","clearInterval","rowHeight","newRowsToShow","rowsCount","ceil","html","memoryColumnNumber","_x","y","memoryRowNumber","memDataHtml","memoryData","MemoryArea","useResizeDetector","memoryAreaContainer","handleHeight","memoryArea","memoryScroll","Port","readHandler","writeHandler","Device","_waiting","ConsoleDevice","readCharPort","readChar","readIntPort","readInt","writeCharPort","writeChar","writeIntPort","writeInt","zeroCharCode","nineCharCode","minusCharCode","isMinusChar","isNumberChar","charToNumber","firstC","nextByte","String","fromCharCode","endReadWaiting","CanvasDevice","p1X","p1Y","p2X","p2Y","setXPort","setX","setYPort","setY","drawPixelPort","drawPixel","clearPixelPort","clearPixel","setP1Port","setP1","setP2Port","setP2","drawLinePort","drawLine","clearLinePort","clearLine","clearPort","clear","fillColor","clearColor","CanvasViewer","canvasDevice","canvasRef","lineAlg","x0","y0","x1","y1","onpixel","dx","abs","sx","dy","sy","err","e2","getContext","imageSmoothingEnabled","resetHandler","clearHandler","fillStyle","fillRect","drawPixelHandler","clearPixelHandler","drawLineHandler","clearLineHandler","new","canvasContainer","canvas","Simulator","programRef","assembledRef","symbolTableRef","registersRef","controlRef","consoleRef","createFromArchitecture","registerPorts","simulationOnRunErrorHandler","writeLine","simulationOnRunEndedHandler","simulationOnBreakpointHandler","simulationPcUpdateHandler","simulationCyclesUpdateHandler","simulationResetHandler","setBreakpointHandler","_","hasBreakpoint","loadAsmCode","Home","instance","spawnWindow","log","localStorage","getItem","getText","ioPortSymbolTable","getPortsSymbolTable","pseudoInstructions","assembler","addExtraSymbolTable","assemblerResult","curAssembleResult","disassemblerResult","disassembly","setRawObjCode","setAssembled","setSymbolTable","isRunning","hasEnded","curText","getAutoAssemble","lastText","setStepInterval","additionInfo","find","highlightLine","setItem","asmCode","setText","components","sym","prog","getPortsSymbolsList","asm","reg","ctr","pause","con","can","top","programContainer","assembledContainer","symbolTableContainer","registersControlArea","consoleContainer","Window","containerRef","description","children","header","keyIndex","windowsContainerRef","aboutRef","windowObjs","remove","reject","winObj","window","windowsContainer","aboutContainer","href","closeAbout","App","basename","exact","path","component","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.68fb8efd.chunk.js","sourcesContent":["export default class Operand {\r\n    static REGISTER = 'register';\r\n    static SYMBOL = 'symbol';\r\n    static LITERAL = 'literal';\r\n\r\n    constructor(value, type) {\r\n        this.value = value;\r\n        this.type = type;\r\n        this.byteRange = null;\r\n    }\r\n\r\n    setByteRange(byteRange) {\r\n        this.byteRange = byteRange;\r\n        return this;\r\n    }\r\n\r\n    setValue(value) {\r\n        this.value = value;\r\n        return this;\r\n    }\r\n    \r\n    setType(type) {\r\n        this.type = type;\r\n        return this;\r\n    }\r\n\r\n    getValue() {\r\n        return this.value;\r\n    }\r\n    \r\n    getType() {\r\n        return this.type;\r\n    }\r\n\r\n    getByteRange() {\r\n        return this.byteRange;\r\n    }\r\n}","\r\nlet basicOps = [];\r\nlet pseudoOps = [];\r\nlet basicOpsByOpcode = {};\r\nlet basicOpsByName = {};\r\nlet pseudoOpsByName = {};\r\nlet basicOpsNames = [];\r\nlet pseudoOpsNames = [];\r\nlet opsNames = [];\r\n\r\nfunction setup() {\r\n    const basicMs = require.context('./', true, /basic\\/.+\\.js$/);\r\n    basicOps = basicMs.keys().map(key => basicMs(key, true).default);\r\n    const pseudoMs = require.context('./', true, /pseudo\\/.+\\.js$/);\r\n    pseudoOps = pseudoMs.keys().map(key => pseudoMs(key, true).default);\r\n\r\n    basicOpsByOpcode = Object.fromEntries(\r\n        basicOps.map(op => [\r\n            op.getOpcode(), // key\r\n            op              // value\r\n        ])\r\n    );\r\n\r\n    basicOpsByName = Object.fromEntries(\r\n        basicOps.map(op => [\r\n            op.getName(),   // key\r\n            op              // value\r\n        ])\r\n    );\r\n    pseudoOpsByName = Object.fromEntries(\r\n        pseudoOps.map(op => [\r\n            op.getName(),   // key\r\n            op              // value\r\n        ])\r\n    );\r\n\r\n    basicOpsNames = Object.keys(basicOpsByName);\r\n    pseudoOpsNames = Object.keys(pseudoOpsByName);\r\n    opsNames = basicOpsNames.concat(pseudoOpsNames);\r\n}\r\n\r\nfunction getOperationNames() {\r\n    return opsNames;\r\n}\r\n\r\nfunction getOperationByName(name) {\r\n    return basicOpsByName[name] || pseudoOpsByName[name];\r\n}\r\n\r\nfunction getBasicOperationByName(name) {\r\n    return basicOpsByName[name];\r\n}\r\n\r\nfunction getPseudoOperationByName(name) {\r\n    return pseudoOpsByName[name];\r\n}\r\n\r\nfunction isOperationName(name) {\r\n    return getOperationByName(name) != null;\r\n}\r\n\r\nfunction isBasicOperationName(name) {\r\n    return basicOpsByName[name] != null;\r\n}\r\n\r\nfunction isPseudoOperationName(name) {\r\n    return pseudoOpsByName[name] != null;\r\n}\r\n\r\nfunction getOperationByOpcode(opcode) {\r\n    return basicOpsByOpcode[opcode];\r\n}\r\n\r\nconst operationsManager = {\r\n    setup,\r\n    getOperationNames,\r\n    getOperationByName,\r\n    getBasicOperationByName,\r\n    getPseudoOperationByName,\r\n    isOperationName,\r\n    isBasicOperationName,\r\n    isPseudoOperationName,\r\n    getOperationByOpcode,\r\n};\r\n\r\nexport default operationsManager;","import operationsManager from './operations/operationsManager';\r\nimport Operand from './operand';\r\nimport utils from '../../utils';\r\n\r\nclass Instruction {\r\n    static TYPE_R = 'R';\r\n    static TYPE_I = 'I';\r\n    \r\n    static disassemble(code, architecture) {\r\n        let imm = (code >> 11) & 0b1;    \r\n        if (imm === 1) {\r\n            let opcode = code & 0b1111000000000000;     // 1111 0000 0000 0000\r\n            let rstCode = (code >> 8) & 0b111;          //      0111 0000 0000\r\n            let immediate = code & 0b11111111;          //           1111 1111\r\n            immediate = utils.unsignedToSigned(immediate, 1);\r\n            \r\n            let rst = architecture.getRegisterNameByCode(rstCode);\r\n            \r\n            if (!rst) throw new TypeError('rst doesnt exist');\r\n    \r\n            let operation = operationsManager.getOperationByOpcode(opcode);\r\n            if (!operation) throw new TypeError('operation doesnt exist');\r\n    \r\n            let operands = [\r\n                new Operand(rst, Operand.REGISTER),\r\n                new Operand(immediate, Operand.LITERAL),\r\n            ];\r\n            \r\n            return new Instruction(operation, operands);\r\n        } else {\r\n            let opcode = code & 0b1111000000000011;     // 1111 0000 0000 0011\r\n            let rstCode = (code >> 8) & 0b111;          //      0111 0000 0000\r\n            let rsaCode = (code >> 5) & 0b111;          //           1110 0000\r\n            let rsbCode = (code >> 2) & 0b111;          //              1 1100\r\n    \r\n            let rst = architecture.getRegisterNameByCode(rstCode);\r\n            let rsa = architecture.getRegisterNameByCode(rsaCode);\r\n            let rsb = architecture.getRegisterNameByCode(rsbCode);\r\n            if (!rst) throw new TypeError('rst doesnt exist');\r\n            if (!rsa) throw new TypeError('rsa doesnt exist');\r\n            if (!rsb) throw new TypeError('rsb doesnt exist');\r\n    \r\n            let operation = operationsManager.getOperationByOpcode(opcode);\r\n            if (!operation) throw new TypeError('operation doesnt exist');\r\n    \r\n            let operands = [\r\n                new Operand(rst, Operand.REGISTER),\r\n                new Operand(rsa, Operand.REGISTER),\r\n                new Operand(rsb, Operand.REGISTER),\r\n            ];\r\n    \r\n            return new Instruction(operation, operands);\r\n        }\r\n    }\r\n\r\n    constructor(operation, operands) {\r\n        this.operation = operation;\r\n        this.operands = operands;\r\n    }\r\n    \r\n    isPseudo() {\r\n        let type = this.getType();\r\n        if (type === null) return true;\r\n        if (this.operation === null) return true;\r\n        if (this.operation.isPseudo()) return true;\r\n        switch (type) {\r\n            case Instruction.TYPE_R:\r\n                if (!this.operation.supportR()) {\r\n                    return true;\r\n                } else {\r\n                    break;\r\n                }\r\n            case Instruction.TYPE_I:\r\n                if (!this.operation.supportI()) {\r\n                    return true;\r\n                } else {\r\n                    break;\r\n                }\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n\r\n    getType() {\r\n        if (this.operands.length === 2 && \r\n            this.operands[0].getType() === Operand.REGISTER &&\r\n            this.operands[1].getType() === Operand.LITERAL) return Instruction.TYPE_I;\r\n        if (this.operands.length === 3 && \r\n            this.operands[0].getType() === Operand.REGISTER &&\r\n            this.operands[1].getType() === Operand.REGISTER &&\r\n            this.operands[2].getType() === Operand.REGISTER) return Instruction.TYPE_R;\r\n        return null;\r\n    }\r\n\r\n    assemble(architecture) {\r\n        if (!this.operation) throw new Error('Operation doesnt exists');\r\n        if (this.operation.getName() === 'hcf') return 0x0003;\r\n        if (this.operation.isPseudo()) throw new Error('Operation is pseudo-operation');\r\n        if (!this.operands) throw new Error('Operands doesnt exists');\r\n\r\n        let type = this.getType();\r\n        if (!type) throw new Error('Invalid instruction type');\r\n\r\n        let opcode = this.operation.getOpcode();\r\n        if (!type) throw new Error('Operation doesnt have opcode');\r\n\r\n        let finalCode = 0x0000;\r\n        switch (type) {\r\n            case Instruction.TYPE_R: {\r\n                let rst = architecture.getRegisterCode(this.operands[0].getValue());\r\n                let rsa = architecture.getRegisterCode(this.operands[1].getValue());\r\n                let rsb = architecture.getRegisterCode(this.operands[2].getValue());\r\n                finalCode |= opcode;    // operation code\r\n                finalCode |= 0 << 11;   // imm\r\n                finalCode |= rst << 8;\r\n                finalCode |= rsa << 5;\r\n                finalCode |= rsb << 2;\r\n                break;\r\n            }\r\n            case Instruction.TYPE_I: {\r\n                let rst = architecture.getRegisterCode(this.operands[0].getValue());\r\n                let immediate = this.operands[1].getValue();\r\n                immediate = utils.signedToUnsigned(immediate, 1);\r\n\r\n                finalCode |= opcode;    // operation code\r\n                finalCode |= 1 << 11;   // imm\r\n                finalCode |= rst << 8;\r\n                finalCode |= immediate;\r\n                break;\r\n            }\r\n            default:\r\n        }\r\n        return finalCode;\r\n    }\r\n\r\n    getOperation() {\r\n        return this.operation;\r\n    }\r\n    \r\n    getOperands() {\r\n        return this.operands;\r\n    }\r\n\r\n    execute(simulation) {\r\n        if (!this.operation) throw new Error('Instruction has no operation');\r\n\r\n        let type = this.getType();\r\n        if (!type) throw new Error('Invalid instruction type');\r\n\r\n        switch (type) {\r\n            case Instruction.TYPE_R: {\r\n                let rst = this.operands[0].getValue();\r\n                let rsa = this.operands[1].getValue();\r\n                let rsb = this.operands[2].getValue();\r\n                \r\n                if (typeof this.operation.executeR === 'function') {\r\n                    this.operation.executeR(simulation, rst, rsa, rsb);\r\n                } else {\r\n                    throw new Error('The operation \"' + this.operation.getName() + '\" doesnt support type R');\r\n                }\r\n                break;\r\n            }\r\n            case Instruction.TYPE_I: {\r\n                let rst = this.operands[0].getValue();\r\n                let immediate = this.operands[1].getValue();\r\n                \r\n                if (typeof this.operation.executeI === 'function') {\r\n                    this.operation.executeI(simulation, rst, immediate);\r\n                } else {\r\n                    throw new Error('The operation \"' + this.operation.getName() + '\" doesnt support type I');\r\n                }\r\n                break;\r\n            }\r\n            default:\r\n        }\r\n    }\r\n\r\n    toString() {\r\n        return this.operation.getName() + ' ' + this.operands.map(operand => {\r\n            let value = operand.getValue();\r\n            if (operand.getType() === Operand.LITERAL) {\r\n                value = '0x'+utils.signedNumberToHex(value, 1);\r\n            }\r\n            return value;\r\n        }).join(',');\r\n    }\r\n}\r\n\r\nexport default Instruction;","\r\nfunction callLimiter(func, delay) {\r\n  let thId = null;\r\n  let lastArgs = null;\r\n  return (...args) => {\r\n    lastArgs = args;\r\n    if (thId == null) {\r\n      thId = setTimeout(() => {\r\n        func(...lastArgs);\r\n        thId = null;\r\n      }, delay);\r\n    }\r\n  }\r\n}\r\n\r\nfunction signedNumberToHex(number, byteWidth=4) {\r\n  return signedToUnsigned(number, byteWidth).toString(16).padStart(byteWidth * 2, '0');\r\n}\r\n\r\nfunction signedToUnsigned(number, byteWidth=2) {\r\n  let mask = Math.pow(2, byteWidth * 8) - 1;\r\n  return (((number >>> 0) & mask) >>> 0);\r\n}\r\n\r\nfunction unsignedToSigned(number, byteWidth=2) {\r\nlet mask = Math.pow(2, byteWidth * 8) - 1;\r\nlet isNegative = (number >> (byteWidth * 8 - 1)) & 1;\r\nif (isNegative) {\r\n  return -(((~number+1) & mask) >>> 0);\r\n} else {\r\n  return number & mask;\r\n}\r\n}\r\n\r\nfunction numberToBytes(number, byteWidth=2) {\r\n  let bytes = [];\r\n  for (let i = 0; i < byteWidth; i++) {\r\n      bytes.unshift(number & 0xff);\r\n      number >>= 8;\r\n  }\r\n  return bytes;\r\n}\r\n\r\nfunction bytesToNumber(bytes) {\r\n  let number = 0;\r\n  for (let byte of bytes) {\r\n      number <<= 8;\r\n      number |= byte;\r\n  }\r\n  return number;\r\n}\r\n\r\nfunction isInteger(str) {\r\n  return !isNaN(parseInt(str));\r\n}\r\n\r\nfunction sleep(ms) {\r\n  if (ms <= 0) return 0;\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nconst utils = {\r\n  signedNumberToHex,\r\n  signedToUnsigned,\r\n  unsignedToSigned,\r\n  numberToBytes,\r\n  bytesToNumber,\r\n  isInteger,\r\n  sleep,\r\n  callLimiter,\r\n};\r\n\r\nexport default utils;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Control_container__Day7V\",\"content\":\"Control_content__3iIfu\",\"title\":\"Control_title__Fct6q\",\"cycleArea\":\"Control_cycleArea__3W0Sp\",\"cycleLabel\":\"Control_cycleLabel__o6-yf\",\"btnList\":\"Control_btnList__pjvFr\",\"btn\":\"Control_btn__S6MpS\",\"btnLaterals\":\"Control_btnLaterals__g4gVg\",\"delayLabel\":\"Control_delayLabel__1Cctf\",\"delayInput\":\"Control_delayInput__lHshL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Console_container__3nKjQ\",\"output\":\"Console_output__3CcGx\",\"outAndInBufContainer\":\"Console_outAndInBufContainer__ZSkiW\",\"alertsOutline\":\"Console_alertsOutline__3cNKE\",\"blink\":\"Console_blink__25EME\",\"inputBuffer\":\"Console_inputBuffer__2jMXE\",\"title\":\"Console_title__2sfHt\",\"bottom\":\"Console_bottom__defXf\",\"inputText\":\"Console_inputText__rkhPv\",\"btn\":\"Console_btn__3BwCf\",\"infoColor\":\"Console_infoColor__3bUkv\",\"errorColor\":\"Console_errorColor__2wvUI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Simulator_container__1Th6t\",\"top\":\"Simulator_top__14lKI\",\"symbolTableContainer\":\"Simulator_symbolTableContainer__3Iq5T\",\"programContainer\":\"Simulator_programContainer__YSA2P\",\"assembledContainer\":\"Simulator_assembledContainer__19WZT\",\"registersControlArea\":\"Simulator_registersControlArea__sIcJx\",\"bottom\":\"Simulator_bottom__1n_Ol\",\"consoleContainer\":\"Simulator_consoleContainer__2Yktm\",\"canvasContainer\":\"Simulator_canvasContainer__eybxp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Program_container__ptnOO\",\"titleContainer\":\"Program_titleContainer__2wA5L\",\"infos\":\"Program_infos__3FvD7\",\"blink-green\":\"Program_blink-green__2vqx9\",\"curLineHighlight\":\"Program_curLineHighlight__3ntuk\",\"btn\":\"Program_btn__2C8NB\",\"editor\":\"Program_editor__3d99c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"MemoryViewer_container__36x1j\",\"content\":\"MemoryViewer_content__5lhVs\",\"memoryScroll\":\"MemoryViewer_memoryScroll__ejajI\",\"memoryAreaContainer\":\"MemoryViewer_memoryAreaContainer__31uQe\",\"memoryArea\":\"MemoryViewer_memoryArea__1TCDi\",\"memoryData\":\"MemoryViewer_memoryData__2-C4U\",\"memoryRowNumber\":\"MemoryViewer_memoryRowNumber__3Fx2o\",\"memoryColumnNumber\":\"MemoryViewer_memoryColumnNumber__c5w2Q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Registers_container__2s4UW\",\"title\":\"Registers_title__1C9vy\",\"content\":\"Registers_content__3IXg7\",\"generalRegisterList\":\"Registers_generalRegisterList__FB2qd\",\"pcRegister\":\"Registers_pcRegister__3EfW7\",\"registerContainer\":\"Registers_registerContainer__3HYMJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"SymbolTable_container__-A6je\",\"title\":\"SymbolTable_title__1Uqqp\",\"content\":\"SymbolTable_content__1X6lq\",\"symbolName\":\"SymbolTable_symbolName__2XffG\",\"symbolValue\":\"SymbolTable_symbolValue__3jrXO\",\"fillAllSpace\":\"SymbolTable_fillAllSpace__20mmf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Assembled_container__1jNx0\",\"editor\":\"Assembled_editor__3jQwh\",\"title\":\"Assembled_title__kk-F7\",\"breakpoint\":\"Assembled_breakpoint__2cdAw\",\"currentLineRunning\":\"Assembled_currentLineRunning__eYaaP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"CanvasViewer_container__Phf80\",\"titleContainer\":\"CanvasViewer_titleContainer__3g2xA\",\"new\":\"CanvasViewer_new__VnARG\",\"blink-red\":\"CanvasViewer_blink-red__1HwMW\",\"canvasContainer\":\"CanvasViewer_canvasContainer__TIGc4\",\"canvas\":\"CanvasViewer_canvas__2acTG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Window_container__3JkxK\",\"header\":\"Window_header__ygOBE\",\"title\":\"Window_title__2aHbv\",\"description\":\"Window_description__1NaN6\",\"content\":\"Window_content__3bL7I\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Home_container__1pCbS\",\"windowsContainer\":\"Home_windowsContainer__1a4xb\",\"aboutContainer\":\"Home_aboutContainer__31sEf\"};","import { Component, createRef } from \"react\";\r\nimport styles from './Console.module.css';\r\n\r\nclass Console extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    \r\n    if (!props.consoleDevice) throw new Error('props.consoleDevice null');\r\n\r\n    this.consoleDevice = props.consoleDevice;\r\n\r\n    this.onInput = typeof props.onInput === 'function' ? props.onInput : ()=>{};\r\n\r\n    this.inputRef = createRef();\r\n    this.outputRef = createRef();\r\n\r\n    this.isNewLine = true;\r\n    this.lastNode = null;\r\n    this.lastType = 0;\r\n\r\n    this.state = {\r\n      inputBuffer: [],\r\n      waiting: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.inputBufferHandler = (inputBuffer) => {\r\n      this.setState({inputBuffer});\r\n    };\r\n    this.waitingHandler = (waiting) => {\r\n      this.inputRef.current.focus();\r\n      this.setState({waiting});\r\n    };\r\n    this.writeCharHandler = (char) => {\r\n      this.write(char);\r\n    };\r\n    this.writeIntHandler = (int) => {\r\n      this.write(int);\r\n    };\r\n\r\n    this.consoleDevice.on('input buffer', this.inputBufferHandler);\r\n    this.consoleDevice.on('waiting', this.waitingHandler);\r\n    this.consoleDevice.on('write char', this.writeCharHandler);\r\n    this.consoleDevice.on('write int', this.writeIntHandler);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.consoleDevice.off('input buffer', this.inputBufferHandler);\r\n    this.consoleDevice.off('waiting', this.waitingHandler);\r\n    this.consoleDevice.off('write char', this.writeCharHandler);\r\n    this.consoleDevice.off('write int', this.writeIntHandler);\r\n  }\r\n\r\n  write(text, type=0) {\r\n    if (text.length === 0) return;\r\n\r\n    if (this.lastNode === null || this.lastType !== type) {\r\n      // If hasnt text node of the type, create one\r\n      let textNode = document.createTextNode(text);\r\n      if (type === 0) {\r\n        this.outputRef.current.appendChild(textNode);\r\n      } else if (type === 1) {\r\n        let spanElem = document.createElement('span');\r\n        spanElem.classList.add(styles.infoColor);\r\n        spanElem.appendChild(textNode);\r\n        this.outputRef.current.appendChild(spanElem);\r\n      } else if (type === 2) {\r\n        let spanElem = document.createElement('span');\r\n        spanElem.classList.add(styles.errorColor);\r\n        spanElem.appendChild(textNode);\r\n        this.outputRef.current.appendChild(spanElem);\r\n      }\r\n      this.lastNode = textNode;\r\n    } else {\r\n      let textNode = this.lastNode;\r\n      textNode.textContent += text;\r\n    }\r\n    this.outputRef.current.scrollTop = this.outputRef.current.scrollHeight;\r\n    this.isNewLine = false;\r\n    this.lastType = type;\r\n  }\r\n\r\n  writeLine(text, type=0) {\r\n    this.write((this.isNewLine ? '' : '\\n') + text + '\\n', type);\r\n    this.isNewLine = true;\r\n  }\r\n\r\n  addTextInput(text) {\r\n\t\tlet inputBytes = new Array(text.length + 1);\r\n\t\tlet buffer = Buffer.from(text);\r\n\t\tfor (let i = 0; i < text.length; i++) {\r\n\t\t\tinputBytes[i] = buffer[i];\r\n\t\t}\r\n\t\t// Add \\0 byte on end\r\n\t\tinputBytes[text.length] = 0;\r\n\t\tthis.consoleDevice.addBytes(inputBytes);\r\n  }\r\n\r\n  inputKeyDown(e) {\r\n    if (e.key.toLowerCase() === 'enter') {\r\n      let text = e.target.value;\r\n      if (text.length > 0) {\r\n        e.target.value = '';\r\n        this.addTextInput(text);\r\n      }\r\n    }\r\n  }\r\n\r\n  clearOutput() {\r\n    this.outputRef.current.innerHTML = '';\r\n    this.lastNode = null;\r\n    this.lastType = null;\r\n  }\r\n\r\n  render() { \r\n    return (\r\n      <div className={styles.container}>\r\n        <div className={styles.outAndInBufContainer}>\r\n          <div className={styles.output}>\r\n            <div ref={this.outputRef}></div>\r\n          </div>\r\n          <div className={styles.inputBuffer}>\r\n            <div className={styles.title}>Input Buffer</div>\r\n            <textarea readOnly spellCheck='false' value={this.state.inputBuffer.map(x => x.toString(16).padStart(2, '0')).join(' ')}></textarea>\r\n          </div>\r\n        </div>\r\n        <div className={styles.bottom}>\r\n          <input\r\n            className={(this.state.waiting ? (styles.alertsOutline + ' ') : '') + styles.inputText}\r\n            placeholder=\"input...\"\r\n            id='inputText'\r\n            onKeyDown={this.inputKeyDown.bind(this)}\r\n            ref={this.inputRef} />\r\n          <button className={styles.btn} onClick={this.clearOutput.bind(this)}>Clear Output</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n \r\nexport default Console;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__2U2M-\"};","var map = {\n\t\"./basic/adc.js\": 72,\n\t\"./basic/add.js\": 73,\n\t\"./basic/and.js\": 74,\n\t\"./basic/asr.js\": 75,\n\t\"./basic/bez.js\": 76,\n\t\"./basic/bnz.js\": 77,\n\t\"./basic/ldb.js\": 78,\n\t\"./basic/ldc.js\": 79,\n\t\"./basic/ldr.js\": 80,\n\t\"./basic/ldw.js\": 81,\n\t\"./basic/lsr.js\": 82,\n\t\"./basic/or.js\": 83,\n\t\"./basic/ror.js\": 84,\n\t\"./basic/sbc.js\": 85,\n\t\"./basic/slt.js\": 86,\n\t\"./basic/sltu.js\": 87,\n\t\"./basic/stb.js\": 88,\n\t\"./basic/stw.js\": 89,\n\t\"./basic/sub.js\": 90,\n\t\"./basic/xor.js\": 91\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 71;","const adc = {\r\n    getName() {\r\n        return 'adc';\r\n    },\r\n    getOpcode() {\r\n        return 0x5001;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => false,\r\n    executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n        let carry = simulation.getCarry();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getValue(rsa) + registerBank.getValue(rsb) + carry,\r\n        );\r\n    },\r\n}\r\n\r\nexport default adc;","const add = {\r\n    getName() {\r\n        return 'add';\r\n    },\r\n    getOpcode() {\r\n        return 0x5000;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => true,\r\n    executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getValue(rsa) + registerBank.getValue(rsb),\r\n        );\r\n    },\r\n    executeI(simulation, rst, immediate) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getValue(rst) + immediate,\r\n        );\r\n    },\r\n}\r\n\r\nexport default add;","const and = {\r\n    getName() {\r\n        return 'and';\r\n    },\r\n    getOpcode() {\r\n        return 0x0000;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => true,\r\n    executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getUValue(rsa) & registerBank.getUValue(rsb),\r\n        );\r\n    },\r\n    executeI(simulation, rst, immediate) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getUValue(rst) & immediate,\r\n        );\r\n    },\r\n}\r\n\r\nexport default and;","const asr = {\r\n    getName() {\r\n        return 'asr';\r\n    },\r\n    getOpcode() {\r\n        return 0xA001;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => false,\r\n    executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        let value = registerBank.getValue(rsa);\r\n        simulation.setCarry(value & 1);\r\n        registerBank.setValue(\r\n            rst, \r\n            value >> 1,\r\n        );\r\n    },\r\n}\r\n\r\nexport default asr;","const bez = {\r\n    getName() {\r\n        return 'bez';\r\n    },\r\n    getOpcode() {\r\n        return 0xC000;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => true,\r\n    executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        if (registerBank.getValue(rsa) === 0) {\r\n            simulation.setPC(registerBank.getValue(rsb) - 2);\r\n        }\r\n    },\r\n    executeI(simulation, rst, immediate) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        if (registerBank.getValue(rst) === 0) {\r\n            simulation.setPC(simulation.getPC() + immediate);\r\n        }\r\n    },\r\n}\r\n\r\nexport default bez;","const bnz = {\r\n    getName() {\r\n        return 'bnz';\r\n    },\r\n    getOpcode() {\r\n        return 0xD000;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => true,\r\n    executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        if (registerBank.getValue(rsa) !== 0) {\r\n            simulation.setPC(registerBank.getValue(rsb) - 2);\r\n        }\r\n    },\r\n    executeI(simulation, rst, immediate) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        if (registerBank.getValue(rst) !== 0) {\r\n            simulation.setPC(simulation.getPC() + immediate);\r\n        }\r\n    },\r\n}\r\n\r\nexport default bnz;","const ldb = {\r\n    getName() {\r\n        return 'ldb';\r\n    },\r\n    getOpcode() {\r\n        return 0x0002;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => false,\r\n    executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n        let memory = simulation.getMemory();\r\n\r\n        registerBank.setValue(rst, memory.readByte(registerBank.getUValue(rsb)));\r\n    },\r\n}\r\n\r\nexport default ldb;","const ldc = {\r\n    getName() {\r\n        return 'ldc';\r\n    },\r\n    getOpcode() {\r\n        return 0x9000;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => false,\r\n    supportI: () => true,\r\n    executeI(simulation, rst, immediate) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            (registerBank.getUValue(rst) << 8) | (immediate & 0xFF),\r\n        );\r\n    },\r\n}\r\n\r\nexport default ldc;","const ldr = {\r\n    getName() {\r\n        return 'ldr';\r\n    },\r\n    getOpcode() {\r\n        return 0x8000;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => false,\r\n    supportI: () => true,\r\n    executeI(simulation, rst, immediate) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            immediate,\r\n        );\r\n    },\r\n}\r\n\r\nexport default ldr;","const ldw = {\r\n    getName() {\r\n        return 'ldw';\r\n    },\r\n    getOpcode() {\r\n        return 0x4002;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => false,\r\n    executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n        let memory = simulation.getMemory();\r\n\r\n        registerBank.setValue(rst, memory.readWord(registerBank.getUValue(rsb)));\r\n    },\r\n}\r\n\r\nexport default ldw;","const lsr = {\r\n    getName() {\r\n        return 'lsr';\r\n    },\r\n    getOpcode() {\r\n        return 0xA000;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => false,\r\n    executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        let value = registerBank.getValue(rsa);\r\n        simulation.setCarry(value & 1);\r\n        registerBank.setValue(\r\n            rst, \r\n            value >>> 1,\r\n        );\r\n    },\r\n}\r\n\r\nexport default lsr;","const or = {\r\n    getName() {\r\n        return 'or';\r\n    },\r\n    getOpcode() {\r\n        return 0x1000;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => true,\r\n    executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getValue(rsa) | registerBank.getValue(rsb),\r\n        );\r\n    },\r\n    executeI(simulation, rst, immediate) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getValue(rst) | immediate,\r\n        );\r\n    },\r\n}\r\n\r\nexport default or;","const ror = {\r\n    getName() {\r\n        return 'ror';\r\n    },\r\n    getOpcode() {\r\n        return 0xA002;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => false,\r\n    executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n        let architecture = simulation.getArchitecture();\r\n\r\n        let value = registerBank.getUValue(rsa);\r\n        registerBank.setValue(\r\n            rst, \r\n            (value >> 1) | (simulation.getCarry() << (architecture.getBitWidth() - 1)),\r\n        );\r\n        simulation.setCarry(value & 1);\r\n    },\r\n}\r\n\r\nexport default ror;","const sbc = {\r\n    getName() {\r\n        return 'sbc';\r\n    },\r\n    getOpcode() {\r\n        return 0x6001;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => false,\r\n    executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n        let carry = simulation.getCarry();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getValue(rsa) - registerBank.getValue(rsb) - carry,\r\n        );\r\n    },\r\n}\r\n\r\nexport default sbc;","const slt = {\r\n    getName() {\r\n        return 'slt';\r\n    },\r\n    getOpcode() {\r\n        return 0x3000;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => true,\r\n    executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n        \r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getValue(rsa) < registerBank.getValue(rsb) ? 1 : 0,\r\n        );\r\n    },\r\n    executeI(simulation, rst, immediate) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getValue(rst) < immediate ? 1 : 0,\r\n        );\r\n    },\r\n}\r\n\r\nexport default slt;","const sltu = {\r\n    getName() {\r\n        return 'sltu';\r\n    },\r\n    getOpcode() {\r\n        return 0x4000;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => true,\r\n    executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getUValue(rsa) < registerBank.getUValue(rsb) ? 1 : 0,\r\n        );\r\n    },\r\n    executeI(simulation, rst, immediate) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getUValue(rst) < (immediate >>> 0) ? 1 : 0,\r\n        );\r\n    },\r\n}\r\n\r\nexport default sltu;","const stb = {\r\n    getName() {\r\n        return 'stb';\r\n    },\r\n    getOpcode() {\r\n        return 0x1002;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => false,\r\n    executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n        let memory = simulation.getMemory();\r\n\r\n        memory.writeByte(registerBank.getUValue(rsb), registerBank.getUValue(rsa));\r\n    },\r\n}\r\n\r\nexport default stb;","const stw = {\r\n    getName() {\r\n        return 'stw';\r\n    },\r\n    getOpcode() {\r\n        return 0x5002;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => false,\r\n    executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n        let memory = simulation.getMemory();\r\n\r\n        memory.writeWord(registerBank.getUValue(rsb), registerBank.getUValue(rsa));\r\n    },\r\n}\r\n\r\nexport default stw;","const sub = {\r\n    getName() {\r\n        return 'sub';\r\n    },\r\n    getOpcode() {\r\n        return 0x6000;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => true,\r\n    executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getValue(rsa) - registerBank.getValue(rsb),\r\n        );\r\n    },\r\n    executeI(simulation, rst, immediate) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getValue(rst) - immediate,\r\n        );\r\n    },\r\n}\r\n\r\nexport default sub;","const xor = {\r\n    getName() {\r\n        return 'xor';\r\n    },\r\n    getOpcode() {\r\n        return 0x2000;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => true,\r\n    executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getUValue(rsa) ^ registerBank.getUValue(rsb),\r\n        );\r\n    },\r\n    executeI(simulation, rst, immediate) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getUValue(rst) ^ immediate,\r\n        );\r\n    },\r\n}\r\n\r\nexport default xor;","var map = {\n\t\"./pseudo/hcf.js\": 93,\n\t\"./pseudo/ldi.js\": 94,\n\t\"./pseudo/lsl.js\": 95,\n\t\"./pseudo/mov.js\": 96,\n\t\"./pseudo/neg.js\": 97,\n\t\"./pseudo/nop.js\": 98,\n\t\"./pseudo/not.js\": 99,\n\t\"./pseudo/pop.js\": 100,\n\t\"./pseudo/push.js\": 101\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 92;","const hcf = {\r\n    getName() {\r\n        return 'hcf';\r\n    },\r\n    isPseudo() {\r\n        return true;\r\n    },\r\n}\r\n\r\nexport default hcf;","const ldi = {\r\n    getName() {\r\n        return 'ldi';\r\n    },\r\n    isPseudo() {\r\n        return true;\r\n    },\r\n}\r\n\r\nexport default ldi;","const lsl = {\r\n    getName() {\r\n        return 'lsl';\r\n    },\r\n    isPseudo() {\r\n        return true;\r\n    },\r\n}\r\n\r\nexport default lsl;","const mov = {\r\n\tgetName() {\r\n\t\treturn 'mov';\r\n\t},\r\n\tisPseudo() {\r\n\t\treturn true;\r\n  \t},\r\n}\r\n\r\nexport default mov;","const neg = {\r\n\tgetName() {\r\n\t\treturn 'neg';\r\n\t},\r\n\tisPseudo() {\r\n\t\treturn true;\r\n  \t},\r\n}\r\n\r\nexport default neg;","const nop = {\r\n\tgetName() {\r\n\t\treturn 'nop';\r\n\t},\r\n\tisPseudo() {\r\n\t\treturn true;\r\n  \t},\r\n}\r\n\r\nexport default nop;","const not = {\r\n\tgetName() {\r\n\t\treturn 'not';\r\n\t},\r\n\tisPseudo() {\r\n\t\treturn true;\r\n  \t},\r\n}\r\n\r\nexport default not;","const pop = {\r\n    getName() {\r\n        return 'pop';\r\n    },\r\n    isPseudo() {\r\n        return true;\r\n    },\r\n}\r\n\r\nexport default pop;","const push = {\r\n    getName() {\r\n        return 'push';\r\n    },\r\n    isPseudo() {\r\n        return true;\r\n    },\r\n}\r\n\r\nexport default push;","var map = {\n\t\"./pseudos/_large_immediate.js\": 103,\n\t\"./pseudos/asr.js\": 104,\n\t\"./pseudos/bez.js\": 105,\n\t\"./pseudos/bnz.js\": 106,\n\t\"./pseudos/hcf.js\": 107,\n\t\"./pseudos/ldb.js\": 108,\n\t\"./pseudos/ldi.js\": 109,\n\t\"./pseudos/ldw.js\": 110,\n\t\"./pseudos/lsl.js\": 111,\n\t\"./pseudos/lsr.js\": 112,\n\t\"./pseudos/mov.js\": 113,\n\t\"./pseudos/neg.js\": 114,\n\t\"./pseudos/nop.js\": 115,\n\t\"./pseudos/not.js\": 116,\n\t\"./pseudos/pop.js\": 117,\n\t\"./pseudos/push.js\": 118,\n\t\"./pseudos/ror.js\": 119,\n\t\"./pseudos/stb.js\": 120,\n\t\"./pseudos/stw.js\": 121\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 102;","import operationsManager from '../../operations/operationsManager';\r\nimport Instruction from '../../instruction';\r\nimport Operand from '../../operand';\r\n\r\nlet supportedOpNames = new Set([ 'and', 'or', 'xor', 'slt', 'add', 'sub', 'bez', 'bnz' ]);\r\n\r\nconst operationLdi = operationsManager.getOperationByName('ldi');\r\n\r\nconst _large_immediate = {\r\n    getNonPseudoInstructions: (instruction, architecture) => {\r\n        if (!supportedOpNames.has(instruction.getOperation().getName())) return [];\r\n\r\n        let operands = instruction.getOperands();\r\n        if (operands.length !== 2) return [];\r\n\r\n        if (operands[0].getType() === 'register') {\r\n            switch (operands[1].getType()) {\r\n                case 'literal':\r\n                    let literal = operands[1].getValue();\r\n                    if (literal > 127 || literal < -128) {\r\n                        return [\r\n                            new Instruction(operationLdi, [ new Operand('at', Operand.REGISTER), new Operand(literal, Operand.LITERAL) ]),\r\n                            new Instruction(instruction.getOperation(), [ operands[0], operands[0], new Operand('at', Operand.REGISTER) ]),\r\n                        ];\r\n                    }\r\n                    break;\r\n                default:\r\n            }\r\n        }\r\n\r\n        return [];\r\n    },\r\n};\r\n\r\nexport default _large_immediate;","import operationsManager from '../../operations/operationsManager';\r\nimport Instruction from '../../instruction';\r\nimport Operand from '../../operand';\r\n\r\nconst operationAsr = operationsManager.getOperationByName('asr');\r\n\r\nconst asr = {\r\n    getOperation: () => operationAsr,\r\n    getNonPseudoInstructions: (instruction, architecture) => {\r\n        if (instruction.getOperation().getName() !== operationAsr.getName()) return [];\r\n\r\n        let operands = instruction.getOperands();\r\n        if (operands.length !== 2) return [];\r\n\r\n        return [\r\n            new Instruction(operationAsr, [ operands[0], operands[1], new Operand('r0', Operand.REGISTER) ] ),\r\n        ];\r\n    },\r\n};\r\n\r\nexport default asr;","import operationsManager from '../../operations/operationsManager';\r\nimport Instruction from '../../instruction';\r\nimport Operand from '../../operand';\r\n\r\nconst operationBez = operationsManager.getOperationByName('bez');\r\nconst operationLdi = operationsManager.getOperationByName('ldi');\r\n\r\nconst bez = {\r\n    getOperation: () => operationBez,\r\n    getNonPseudoInstructions: (instruction, architecture) => {\r\n        if (instruction.getOperation().getName() !== operationBez.getName()) return [];\r\n\r\n        let operands = instruction.getOperands();\r\n        if (operands.length !== 2) return [];\r\n        \r\n        if (operands[0].getType() === 'register') {\r\n            switch (operands[1].getType()) {\r\n                case 'register':\r\n                    // bez r1, r2 -> [ bez r0, r1, r2 ]\r\n                    return [\r\n                        new Instruction(operationBez, [ new Operand('r0', Operand.REGISTER), operands[0], operands[1] ]),\r\n                    ];\r\n                case 'symbol':\r\n                    // bez r1, sym -> [ ldi at, sym   bez r0, r1, at ]\r\n                    return [\r\n                        new Instruction(operationLdi, [ new Operand('at', Operand.REGISTER), operands[1] ]),\r\n                        new Instruction(operationBez, [ new Operand('r0', Operand.REGISTER), operands[0], new Operand('at', Operand.REGISTER) ]),\r\n                    ];\r\n                default:\r\n            }\r\n        }\r\n        return [];\r\n    },\r\n};\r\n\r\nexport default bez;","import operationsManager from '../../operations/operationsManager';\r\nimport Instruction from '../../instruction';\r\nimport Operand from '../../operand';\r\n\r\nconst operationBnz = operationsManager.getOperationByName('bnz');\r\nconst operationLdi = operationsManager.getOperationByName('ldi');\r\n\r\nconst bnz = {\r\n    getOperation: () => operationBnz,\r\n    getNonPseudoInstructions: (instruction, architecture) => {\r\n        if (instruction.getOperation().getName() !== operationBnz.getName()) return [];\r\n\r\n        let operands = instruction.getOperands();\r\n        if (operands.length !== 2) return [];\r\n\r\n        if (operands[0].getType() === 'register') {\r\n            switch (operands[1].getType()) {\r\n                case 'register':\r\n                    // bnz r1, r2 -> [ bnz r0, r1, r2 ]\r\n                    return [\r\n                        new Instruction(operationBnz, [ new Operand('r0', Operand.REGISTER), operands[0], operands[1] ]),\r\n                    ];\r\n                case 'symbol':\r\n                    // bnz r1, sym -> [ ldi at, sym   bnz r0, r1, at ]\r\n                    return [\r\n                        new Instruction(operationLdi, [ new Operand('at', Operand.REGISTER), operands[1] ]),\r\n                        new Instruction(operationBnz, [ new Operand('r0', Operand.REGISTER), operands[0], new Operand('at', Operand.REGISTER) ]),\r\n                    ];\r\n                default:\r\n            }\r\n        }\r\n        return [];\r\n    },\r\n};\r\n\r\nexport default bnz;","import operationsManager from '../../operations/operationsManager';\r\nimport Instruction from '../../instruction';\r\nimport Operand from '../../operand';\r\n\r\nconst operationHcf = operationsManager.getOperationByName('hcf');\r\n\r\nconst hcf = {\r\n    getOperation: () => operationHcf,\r\n    getNonPseudoInstructions: (instruction, architecture) => {\r\n        if (instruction.getOperation().getName() !== operationHcf.getName()) return [];\r\n\r\n        let operands = instruction.getOperands();\r\n        if (operands.length !== 0) return [];\r\n\r\n        // hcf -> [ ldb r0, r0, r0 ]\r\n        return [\r\n            new Instruction(operationHcf, [ \r\n                new Operand('r0', Operand.REGISTER), \r\n                new Operand('r0', Operand.REGISTER), \r\n                new Operand('r0', Operand.REGISTER)\r\n            ]),\r\n        ];\r\n    },\r\n};\r\n\r\nexport default hcf;","import operationsManager from '../../operations/operationsManager';\r\nimport Instruction from '../../instruction';\r\nimport Operand from '../../operand';\r\n\r\nconst operationLdb = operationsManager.getOperationByName('ldb');\r\nconst operationLdi = operationsManager.getOperationByName('ldi');\r\n\r\nconst ldb = {\r\n    getOperation: () => operationLdb,\r\n    getNonPseudoInstructions: (instruction, architecture) => {\r\n        if (instruction.getOperation().getName() !== operationLdb.getName()) return [];\r\n\r\n        let operands = instruction.getOperands();\r\n        if (operands.length !== 2) return [];\r\n\r\n        if (operands[0].getType() === 'register') {\r\n            switch (operands[1].getType()) {\r\n                case 'register':\r\n                    // ldb r1, r2 -> [ ldb r1, r0, r2 ]\r\n                    return [\r\n                        new Instruction(operationLdb, [ operands[0], new Operand('r0', Operand.REGISTER), operands[1] ]),\r\n                    ];\r\n                case 'symbol':\r\n                case 'literal':\r\n                    // ldb r1, 0 -> [ ldi at, 0   ldb r1, r0, at ]\r\n                    return [\r\n                        new Instruction(operationLdi, [ new Operand('at', Operand.REGISTER), operands[1] ]),\r\n                        new Instruction(operationLdb, [ operands[0], new Operand('r0', Operand.REGISTER), new Operand('at', Operand.REGISTER) ]),\r\n                    ];\r\n                default:\r\n            }\r\n        }\r\n        return [];\r\n    },\r\n};\r\n\r\nexport default ldb;","import operationsManager from '../../operations/operationsManager';\r\nimport Instruction from '../../instruction';\r\nimport Operand from '../../operand';\r\nimport utils from '../../../../utils';\r\nconst operation = operationsManager.getOperationByName('ldi');\r\n\r\nconst operationLdr = operationsManager.getOperationByName('ldr');\r\nconst operationLdc = operationsManager.getOperationByName('ldc');\r\n\r\nconst ldi = {\r\n    getOperation: () => operation,\r\n    getNonPseudoInstructions: (instruction, architecture) => {\r\n        if (instruction.getOperation().getName() !== operation.getName()) return [];\r\n\r\n        let operands = instruction.getOperands();\r\n        if (operands.length !== 2) return [];\r\n\r\n        if (operands[0].getType() === 'register') {\r\n            switch (operands[1].getType()) {\r\n                case 'literal':\r\n                    let literal = operands[1].getValue();\r\n                    if (literal < 256 && literal > -128) {\r\n                        // ldi r1, const -> ldr r1, const\r\n                        // -128 < const < 256\r\n                        return [\r\n                            new Instruction(operationLdr, [ operands[0], operands[1] ]),\r\n                        ];\r\n                    } else {\r\n                        // ldi r1, const -> [ ldr r1, const(first byte)   ldc r1, const(second byte) ]  (16 bits)\r\n                        // -128 >= const <= 256\r\n\r\n                        let bytes = utils.numberToBytes(literal, architecture.getByteWidth());\r\n                        if (bytes.length === 0) throw new Error('Convert number to bytes error');\r\n                        return [\r\n                            new Instruction(operationLdr, [ operands[0], new Operand(bytes.shift(), Operand.LITERAL) ]),\r\n                            ...bytes.map(byte => new Instruction(operationLdc, [ operands[0], new Operand(byte, Operand.LITERAL) ])),\r\n                        ];\r\n                    }\r\n                case 'symbol':\r\n                    // ldi r1, sym -> [ ldc r1, sym+0(1 byte)   ldc r1, sym+1(1 byte) ]\r\n                    return new Array(architecture.getByteWidth()).fill(0).map(\r\n                        (x, i) => {\r\n                            return new Instruction(operationLdc, [ \r\n                                operands[0], \r\n                                new Operand(operands[1].getValue(), Operand.SYMBOL).setByteRange({ min: i, max: i}),\r\n                            ]);\r\n                        }\r\n                    );\r\n                default:\r\n            }\r\n        }\r\n        return [];\r\n    },\r\n};\r\n\r\nexport default ldi;","import operationsManager from '../../operations/operationsManager';\r\nimport Instruction from '../../instruction';\r\nimport Operand from '../../operand';\r\n\r\nconst operationLdw = operationsManager.getOperationByName('ldw');\r\nconst operationLdi = operationsManager.getOperationByName('ldi');\r\n\r\nconst ldw = {\r\n    getOperation: () => operationLdw,\r\n    getNonPseudoInstructions: (instruction, architecture) => {\r\n        if (instruction.getOperation().getName() !== operationLdw.getName()) return [];\r\n\r\n        let operands = instruction.getOperands();\r\n        if (operands.length !== 2) return [];\r\n\r\n        if (operands[0].getType() === 'register') {\r\n            switch (operands[1].getType()) {\r\n                case 'register':\r\n                    // ldw r1, r2 -> [ ldw r1, r0, r2 ]\r\n                    return [\r\n                        new Instruction(operationLdw, [ operands[0], new Operand('r0', Operand.REGISTER), operands[1] ]),\r\n                    ];\r\n                case 'symbol':\r\n                case 'literal':\r\n                    // ldw r1, lit -> [ ldi at, lit   ldb r1, r0, at ]\r\n                    return [\r\n                        new Instruction(operationLdi, [ new Operand('at', Operand.REGISTER), operands[1] ]),\r\n                        new Instruction(operationLdw, [ operands[0], new Operand('r0', Operand.REGISTER), new Operand('at', Operand.REGISTER) ]),\r\n                    ];\r\n                default:\r\n            }\r\n        }\r\n        return [];\r\n    },\r\n};\r\n\r\nexport default ldw;","import operationsManager from '../../operations/operationsManager';\r\nimport Instruction from '../../instruction';\r\n\r\nconst operationLsl = operationsManager.getOperationByName('lsl');\r\nconst operationAdd = operationsManager.getOperationByName('add');\r\n\r\nconst lsl = {\r\n    getOperation: () => operationLsl,\r\n    getNonPseudoInstructions: (instruction, architecture) => {\r\n        if (instruction.getOperation().getName() !== operationLsl.getName()) return [];\r\n\r\n        let operands = instruction.getOperands();\r\n        if (operands.length !== 2) return [];\r\n\r\n        if (operands[0].getType() === 'register') {\r\n            switch (operands[1].getType()) {\r\n                case 'register':\r\n                    // lsl r1, r2 -> [ add r1, r2, r2 ]\r\n                    return [\r\n                        new Instruction(operationAdd, [ operands[0], operands[1], operands[1] ]),\r\n                    ];\r\n                default:\r\n            }\r\n        }\r\n        return [];\r\n    },\r\n};\r\n\r\nexport default lsl;","import operationsManager from '../../operations/operationsManager';\r\nimport Instruction from '../../instruction';\r\nimport Operand from '../../operand';\r\n\r\nconst operationLsr = operationsManager.getOperationByName('lsr');\r\n\r\nconst lsr = {\r\n    getOperation: () => operationLsr,\r\n    getNonPseudoInstructions: (instruction, architecture) => {\r\n        if (instruction.getOperation().getName() !== operationLsr.getName()) return [];\r\n\r\n        let operands = instruction.getOperands();\r\n        if (operands.length !== 2) return [];\r\n\r\n        return [\r\n            new Instruction(operationLsr, [ operands[0], operands[1], new Operand('r0', Operand.REGISTER) ]),\r\n        ];\r\n    },\r\n};\r\n\r\nexport default lsr;","import operationsManager from '../../operations/operationsManager';\r\nimport Instruction from '../../instruction';\r\nimport Operand from '../../operand';\r\n\r\nconst operationMov = operationsManager.getOperationByName('mov');\r\nconst operationAnd = operationsManager.getOperationByName('and');\r\n\r\nconst mov = {\r\n    getOperation: () => operationMov,\r\n    getNonPseudoInstructions: (instruction, architecture) => {\r\n        if (instruction.getOperation().getName() !== operationMov.getName()) return [];\r\n        \r\n        let operands = instruction.getOperands();\r\n        if (operands.length !== 2) return [];\r\n        if (operands[0].type !== Operand.REGISTER) return [];\r\n        if (operands[1].type !== Operand.REGISTER) return [];\r\n\r\n        return [\r\n            new Instruction(operationAnd, [ operands[0], operands[1], operands[1] ] ),\r\n        ];\r\n    },\r\n};\r\n\r\nexport default mov;","import operationsManager from '../../operations/operationsManager';\r\nimport Instruction from '../../instruction';\r\nimport Operand from '../../operand';\r\n\r\nconst operationNeg = operationsManager.getOperationByName('neg');\r\nconst operationXor = operationsManager.getOperationByName('xor');\r\nconst operationAdd = operationsManager.getOperationByName('add');\r\n\r\nconst neg = {\r\n    getOperation: () => operationNeg,\r\n    getNonPseudoInstructions: (instruction, architecture) => {\r\n        if (instruction.getOperation().getName() !== operationNeg.getName()) return [];\r\n        \r\n        let operands = instruction.getOperands();\r\n        if (operands.length !== 1) return [];\r\n        if (operands[0].type !== Operand.REGISTER) return [];\r\n\r\n        return [\r\n            new Instruction(operationXor, [ operands[0], new Operand(-1, Operand.LITERAL) ] ),\r\n            new Instruction(operationAdd, [ operands[0], new Operand(1, Operand.LITERAL) ] ),\r\n        ];\r\n    },\r\n};\r\n\r\nexport default neg;","import operationsManager from '../../operations/operationsManager';\r\nimport Instruction from '../../instruction';\r\nimport Operand from '../../operand';\r\n\r\nconst operationAnd = operationsManager.getOperationByName('and');\r\nconst operationNop = operationsManager.getOperationByName('nop');\r\n\r\nconst nop = {\r\n    getOperation: () => operationNop,\r\n    getNonPseudoInstructions: (instruction, architecture) => {\r\n        if (instruction.getOperation().getName() !== operationNop.getName()) return [];\r\n        \r\n        return [\r\n            new Instruction(operationAnd, [ new Operand('r0', Operand.REGISTER), new Operand('r0', Operand.REGISTER), new Operand('r0', Operand.REGISTER) ] ),\r\n        ];\r\n    },\r\n};\r\n\r\nexport default nop;","import operationsManager from '../../operations/operationsManager';\r\nimport Instruction from '../../instruction';\r\nimport Operand from '../../operand';\r\n\r\nconst operationNot = operationsManager.getOperationByName('not');\r\nconst operationXor = operationsManager.getOperationByName('xor');\r\n\r\nconst not = {\r\n    getOperation: () => operationNot,\r\n    getNonPseudoInstructions: (instruction, architecture) => {\r\n        if (instruction.getOperation().getName() !== operationNot.getName()) return [];\r\n        \r\n        let operands = instruction.getOperands();\r\n        if (operands.length !== 1) return [];\r\n        if (operands[0].type !== Operand.REGISTER) return [];\r\n\r\n        return [\r\n            new Instruction(operationXor, [ operands[0], new Operand(-1, Operand.LITERAL) ] ),\r\n        ];\r\n    },\r\n};\r\n\r\nexport default not;","import operationsManager from '../../operations/operationsManager';\r\nimport Instruction from '../../instruction';\r\nimport Operand from '../../operand';\r\n\r\nconst operationPop = operationsManager.getOperationByName('pop');\r\nconst operationLdw = operationsManager.getOperationByName('ldw');\r\nconst operationAdd = operationsManager.getOperationByName('add');\r\n\r\nconst pop = {\r\n    getOperation: () => operationLdw,\r\n    getNonPseudoInstructions: (instruction, architecture) => {\r\n        if (instruction.getOperation().getName() !== operationPop.getName()) return [];\r\n\r\n        let operands = instruction.getOperands();\r\n        if (operands.length !== 1) return [];\r\n\r\n        if (operands[0].getType() === 'register') {\r\n            // pop r1 -> [ ldw r1, sp   add sp, 2 ]\r\n            return [\r\n                new Instruction(operationLdw, [ operands[0], new Operand('sp', Operand.REGISTER) ]),\r\n                new Instruction(operationAdd, [ new Operand('sp', Operand.REGISTER), new Operand(2, Operand.LITERAL) ]),\r\n            ];\r\n        }\r\n        return [];\r\n    },\r\n};\r\n\r\nexport default pop;","import operationsManager from '../../operations/operationsManager';\r\nimport Instruction from '../../instruction';\r\nimport Operand from '../../operand';\r\n\r\nconst operationPush = operationsManager.getOperationByName('push');\r\nconst operationSub = operationsManager.getOperationByName('sub');\r\nconst operationStw = operationsManager.getOperationByName('stw');\r\n\r\nconst push = {\r\n    getOperation: () => operationPush,\r\n    getNonPseudoInstructions: (instruction, architecture) => {\r\n        if (instruction.getOperation().getName() !== operationPush.getName()) return [];\r\n\r\n        let operands = instruction.getOperands();\r\n        if (operands.length !== 1) return [];\r\n\r\n        if (operands[0].getType() === 'register') {\r\n            // push r1 -> [ sub sb, 2   stw r1, sp ]\r\n            return [\r\n                new Instruction(operationSub, [ new Operand('sp', Operand.REGISTER), new Operand(2, Operand.LITERAL) ]),\r\n                new Instruction(operationStw, [ operands[0], new Operand('sp', Operand.REGISTER) ]),\r\n            ];\r\n        }\r\n        return [];\r\n    },\r\n};\r\n\r\nexport default push;","import operationsManager from '../../operations/operationsManager';\r\nimport Instruction from '../../instruction';\r\nimport Operand from '../../operand';\r\n\r\nconst operationRor = operationsManager.getOperationByName('ror');\r\n\r\nconst ror = {\r\n    getOperation: () => operationRor,\r\n    getNonPseudoInstructions: (instruction, architecture) => {\r\n        if (instruction.getOperation().getName() !== operationRor.getName()) return [];\r\n\r\n        let operands = instruction.getOperands();\r\n        if (operands.length !== 2) return [];\r\n\r\n        return [\r\n            new Instruction(operationRor, [ operands[0], operands[1], new Operand('r0', Operand.REGISTER) ]),\r\n        ];\r\n    },\r\n};\r\n\r\nexport default ror;","import operationsManager from '../../operations/operationsManager';\r\nimport Instruction from '../../instruction';\r\nimport Operand from '../../operand';\r\n\r\nconst operationStb = operationsManager.getOperationByName('stb');\r\nconst operationLdi = operationsManager.getOperationByName('ldi');\r\n\r\nconst stb = {\r\n    getOperation: () => operationStb,\r\n    getNonPseudoInstructions: (instruction, architecture) => {\r\n        if (instruction.getOperation().getName() !== operationStb.getName()) return [];\r\n\r\n        let operands = instruction.getOperands();\r\n        if (operands.length !== 2) return [];\r\n\r\n        if (operands[0].getType() === 'register') {\r\n            switch (operands[1].getType()) {\r\n                case 'register':\r\n                    // stb r1, r2 -> [ stb r0, r1, r2 ]\r\n                    return [\r\n                        new Instruction(operationStb, [ new Operand('r0', Operand.REGISTER), operands[0], operands[1] ]),\r\n                    ];\r\n                case 'symbol':\r\n                case 'literal':\r\n                    // stb r1, lit -> [ ldi at, lit   stb r0, r1, at ]\r\n                    return [\r\n                        new Instruction(operationLdi, [ new Operand('at', Operand.REGISTER), operands[1] ]),\r\n                        new Instruction(operationStb, [ new Operand('r0', Operand.REGISTER), operands[0], new Operand('at', Operand.REGISTER) ]),\r\n                    ];\r\n                default:\r\n            }\r\n        }\r\n        return [];\r\n    },\r\n};\r\n\r\nexport default stb;","import operationsManager from '../../operations/operationsManager';\r\nimport Instruction from '../../instruction';\r\nimport Operand from '../../operand';\r\n\r\nconst operationStw = operationsManager.getOperationByName('stw');\r\nconst operationLdi = operationsManager.getOperationByName('ldi');\r\n\r\nconst stw = {\r\n    getOperation: () => operationStw,\r\n    getNonPseudoInstructions: (instruction, architecture) => {\r\n        if (instruction.getOperation().getName() !== operationStw.getName()) return [];\r\n\r\n        let operands = instruction.getOperands();\r\n        if (operands.length !== 2) return [];\r\n\r\n        if (operands[0].getType() === 'register') {\r\n            switch (operands[1].getType()) {\r\n                case 'register':\r\n                    // stw r1, r2 -> [ stw r0, r1, r2 ]\r\n                    return [\r\n                        new Instruction(operationStw, [ new Operand('r0', Operand.REGISTER), operands[0], operands[1] ]),\r\n                    ];\r\n                case 'symbol':\r\n                case 'literal':\r\n                    // stw r1, lit -> [ ldi at, lit   stw r0, r1, at ]\r\n                    return [\r\n                        new Instruction(operationLdi, [ new Operand('at', Operand.REGISTER), operands[1] ]),\r\n                        new Instruction(operationStw, [ new Operand('r0', Operand.REGISTER), operands[0], new Operand('at', Operand.REGISTER) ]),\r\n                    ];\r\n                default:\r\n            }\r\n        }\r\n        return [];\r\n    },\r\n};\r\n\r\nexport default stw;","import Architecture from './architecture';\r\n\r\nlet _16;\r\nlet _32;\r\n\r\nfunction setup() {\r\n    _16 = new Architecture({\r\n        bitWidth: 16,\r\n        registers: {\r\n            'r0': { code: 0, aliases: [ 'at' ] },\r\n            'r1': { code: 1, aliases: [] },\r\n            'r2': { code: 2, aliases: [] },\r\n            'r3': { code: 3, aliases: [] },\r\n            'r4': { code: 4, aliases: [] },\r\n            'r5': { code: 5, aliases: [ 'sr' ] },\r\n            'r6': { code: 6, aliases: [ 'lr' ] },\r\n            'r7': { code: 7, aliases: [ 'sp' ] },\r\n        },\r\n        memoryRegions: {\r\n            codeData: 0x0000,\r\n            stack: 0xdffe,\r\n            io: 0xf000,\r\n        },\r\n    });\r\n    _32 = new Architecture({\r\n        bitWidth: 32,\r\n        registers: {\r\n            'r0': { code: 0, aliases: [ 'at' ] },\r\n            'r1': { code: 1, aliases: [] },\r\n            'r2': { code: 2, aliases: [] },\r\n            'r3': { code: 3, aliases: [] },\r\n            'r4': { code: 4, aliases: [] },\r\n            'r5': { code: 5, aliases: [ 'sr' ] },\r\n            'r6': { code: 6, aliases: [ 'lr' ] },\r\n            'r7': { code: 7, aliases: [ 'sp' ] },\r\n        },\r\n        memoryRegions: {\r\n            codeData: 0x00000000,\r\n            stack: 0x000ffffc,\r\n            io: 0xf0000000,\r\n        },\r\n    });\r\n}\r\n\r\nfunction getViking16Arch() {\r\n    return _16;\r\n}\r\n\r\nfunction getViking32Arch() {\r\n    return _32;\r\n}\r\n\r\nconst architectureManager = {\r\n    setup,\r\n    getViking16Arch,\r\n    getViking32Arch,\r\n};\r\n\r\nexport default architectureManager;","import styles from './Registers.module.css';\r\nimport { Component } from \"react\";\r\nimport utils from '../../utils';\r\n\r\nclass Registers extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    if (!props.registerBank) throw new Error('props.registerBank null');\r\n\r\n    this.registerBank = props.registerBank;\r\n\r\n    this.registerInfos = Object.entries(this.registerBank.getRegisterInfos());\r\n    \r\n    this.state = {\r\n      pc: 0,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.valueUpdateHandler = utils.callLimiter(() => {\r\n      this.setState({});\r\n    }, 50);\r\n    this.registerBank.on('value update', this.valueUpdateHandler);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.registerBank.off('value update', this.valueUpdateHandler);\r\n  }\r\n\r\n  setPC(pc) {\r\n    this.setState({pc});\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={styles.container}>\r\n        <div className={styles.title}>Registers</div>\r\n        \r\n        <div className={styles.content}>\r\n          <div className={styles.generalRegisterList}>\r\n            { this.registerInfos.map(([name, infos], i) => <Register key={i} name={name} aliases={infos.aliases} value={this.registerBank.getUValue(name)} />) }\r\n          </div>\r\n          \r\n          <div className={styles.pcRegister}>\r\n            <Register name=\"pc\" aliases={[]} value={this.state.pc} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Register extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.props = props;\r\n  }\r\n\r\n  render() { \r\n    return (\r\n      <div className={styles.registerContainer}>\r\n        <div>{this.props.name}{this.props.aliases.length > 0 ? (' (' + this.props.aliases.join(',') + ')') : ''}</div>\r\n        <div>{this.props.value.toString(16).padStart(4, '0')}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n \r\nexport default Registers;","export default class MemoryStorage16 {\r\n    constructor() {\r\n        this.data = new Array(0xFFFF + 1).fill(0);\r\n    }\r\n\r\n    reset() {\r\n        for (let i = 0; i < this.data.length; i++) {\r\n            this.data[i] = 0;\r\n        }\r\n    }\r\n\r\n    readByte(address) {\r\n        return this.data[address];\r\n    }\r\n\r\n    readWord(address) {\r\n        let byte0 = this.data[address];\r\n        let byte1 = this.data[address+1];\r\n        return (byte0 << 8) | byte1;\r\n    }\r\n\r\n    writeByte(address, byte) {\r\n        this.data[address] = byte & 0xFF;\r\n    }\r\n\r\n    writeWord(address, word) {\r\n        let byte0 = (word >> 8) & 0xFF;\r\n        let byte1 = word & 0xFF;\r\n        this.data[address] = byte0;\r\n        this.data[address+1] = byte1;\r\n    }\r\n\r\n    getDataLength() {\r\n        return this.data.length;\r\n    }\r\n\r\n    getData() {\r\n        return this.data;\r\n    }\r\n\r\n    getBytesFromRange(start, end) {\r\n        return this.data.slice(start, end);\r\n    }\r\n    \r\n    getWordsFromRange(start, end) {\r\n        let byte0;\r\n        let words = [];\r\n        for (let i = start; i < end; i++) {\r\n            if (i % 2 === 0) {\r\n                byte0 = this.data[i];\r\n            } else {\r\n                let byte1 = this.data[i];\r\n                let word = (byte0 << 8) | byte1;\r\n                words.push(word);\r\n            }\r\n        }\r\n        return words;\r\n    }\r\n}","import { EventEmitter } from 'events';\r\nimport MemoryStorage16 from './memoryStorage16';\r\n\r\nclass Memory extends EventEmitter {\r\n    static createFromArchitecture (architecture, ...args) {\r\n        let bitWidth = architecture.getBitWidth();\r\n        let memoryRegions = architecture.getMemoryRegions();\r\n        let storage;\r\n        switch (bitWidth) {\r\n            case 16:\r\n                storage = new MemoryStorage16();\r\n                break;\r\n            /*case 32:\r\n                storage = new MemoryStorage16();\r\n                break;*/\r\n            default:\r\n                throw new Error('Memory for this architecture doesnt exists (implementation doesnt exists)');\r\n        }\r\n        return new Memory(storage, memoryRegions);\r\n    }\r\n\r\n    constructor(storage, memoryRegions) {\r\n        super();\r\n        this.storage = storage;\r\n        this.memoryRegions = memoryRegions;\r\n    }\r\n\r\n    getMemoryRegions() {\r\n        return this.memoryRegions;\r\n    }\r\n\r\n    reset(...args) {\r\n        let result = this.storage.reset(...args);\r\n        this.emit('reset');\r\n        return result;\r\n    }\r\n    \r\n    getDataLength(...args) {\r\n        return this.storage.getDataLength(...args);\r\n    }\r\n    \r\n    getBytesFromRange(...args) {\r\n        return this.storage.getBytesFromRange(...args);\r\n    }\r\n    \r\n    getWordsFromRange(...args) {\r\n        return this.storage.getWordsFromRange(...args);\r\n    }\r\n    \r\n    readByte(address) {\r\n        if (this.onReadByte) {\r\n            let newValue = this.onReadByte(address);\r\n            if (newValue != null) {\r\n                return newValue;\r\n            }\r\n        }\r\n        let result = this.storage.readByte(address);\r\n        this.emit('storage read byte', address);\r\n        return result;\r\n    }\r\n    \r\n    readWord(address) {\r\n        if (this.onReadWord) {\r\n            let newValue = this.onReadWord(address);\r\n            if (newValue != null) {\r\n                return newValue;\r\n            }\r\n        }\r\n        let result = this.storage.readWord(address);\r\n        this.emit('storage read word', address);\r\n        return result;\r\n    }\r\n\r\n    writeByte(address, byte) {\r\n        if (this.onWriteByte) {\r\n            if (!this.onWriteByte(address, byte)) {\r\n                return false;\r\n            }\r\n        }\r\n        let result = this.storage.writeByte(address, byte);\r\n        this.emit('storage write byte', address, byte);\r\n        return result;\r\n    }\r\n    \r\n    writeWord(address, word) {\r\n        if (this.onWriteWord) {\r\n            if(!this.onWriteWord(address, word)) {\r\n                return false;\r\n            }\r\n        }\r\n        let result = this.storage.writeWord(address, word);\r\n        this.emit('storage write word', address, word);\r\n        return result;\r\n    }\r\n}\r\n\r\nexport default Memory;","export default class Architecture {\r\n    constructor({ bitWidth, registers, memoryRegions }) {\r\n        this.bitWidth = bitWidth;\r\n        this.byteWidth = bitWidth / 8;\r\n        this.memoryRegions = memoryRegions;\r\n        this.mask = Math.pow(2, bitWidth) - 1;\r\n\r\n        this.registers = registers;\r\n\r\n        this.registersByName = Object.fromEntries(\r\n            Object.entries(registers)\r\n            .map(([registerName, register]) => [\r\n                [\r\n                    registerName,   // key      registerName\r\n                    register,       // value    register\r\n                ],\r\n                ...register.aliases.map(aliasName => [\r\n                        aliasName,  // key      registerName\r\n                        register,   // value    register\r\n                    ]\r\n                )\r\n            ])\r\n            .reduce((a, b) => a.concat(b))\r\n        );\r\n        this.registersNameByCode = Object.fromEntries(\r\n            Object.entries(registers)\r\n            .map(([registerName, register]) => [\r\n                [\r\n                    register.code,  // key      registerName\r\n                    registerName,   // value    register\r\n                ],\r\n            ])\r\n            .reduce((a, b) => a.concat(b))\r\n        );\r\n    }\r\n\r\n    getMask() {\r\n        return this.mask;\r\n    }\r\n\r\n    getBitWidth() {\r\n        return this.bitWidth;\r\n    }\r\n\r\n    getByteWidth() {\r\n        return this.byteWidth;\r\n    }\r\n\r\n    hasRegisterName(name) {\r\n        return this.registersByName[name] != null;\r\n    }\r\n\r\n    getRegisterNames() {\r\n        return Object.keys(this.registersByName);\r\n    }\r\n\r\n    getRegisters() {\r\n        return this.registers;\r\n    }\r\n\r\n    getRegisterNameByCode(code) {\r\n        return this.registersNameByCode[code];\r\n    }\r\n\r\n    getRegisterCode(name) {\r\n        if (!this.hasRegisterName(name)) throw new Error('Register doesnt exists');\r\n        return this.registersByName[name].code;\r\n    }\r\n\r\n    getMemoryRegions() {\r\n        return this.memoryRegions;\r\n    }\r\n}","import { EventEmitter } from 'events';\r\nimport utils from '../../../utils';\r\n\r\nexport default class RegisterBank extends EventEmitter {\r\n\r\n    static createFromArchitecture (architecture, ...args) {\r\n        let archRegisters = architecture.getRegisters();\r\n        return new RegisterBank(archRegisters, architecture.getByteWidth(), ...args);\r\n    }\r\n\r\n    constructor (registerInfos, registerByteWidth) {\r\n        super();\r\n        this.registerInfos = registerInfos;\r\n        this.registerByteWidth = registerByteWidth;\r\n        this.setup();\r\n    }\r\n\r\n    getRegisterInfos() {\r\n        return this.registerInfos;\r\n    }\r\n\r\n    getRegisterInfo(name) {\r\n        return this.registerInfos[name];\r\n    }\r\n\r\n    setup() {\r\n        this.mask = Math.pow(2, 8 * this.registerByteWidth) - 1;\r\n\r\n        this.registers = {};\r\n        for (let registerName in this.registerInfos) {\r\n            let registerInfo = this.registerInfos[registerName];\r\n            let { aliases } = registerInfo;\r\n\r\n            let register = {\r\n                name: registerName,\r\n                aliases,\r\n                value: 0,\r\n            };\r\n            \r\n            this.registers[registerName] = register;\r\n            aliases.forEach(aliasName => this.registers[aliasName] = register);\r\n        }\r\n    }\r\n\r\n    reset() {\r\n        for (let registerName in this.registers) {\r\n            this.setValue(registerName, 0);\r\n        }\r\n    }\r\n\r\n    setValue(registerName, newValue) {\r\n        newValue = (newValue & this.mask) >>> 0;\r\n        let register = this.registers[registerName];\r\n        let oldValue = register.value;\r\n        register.value = newValue;\r\n        this.emit('value update', { registerName: register.name, oldValue, newValue });\r\n    }\r\n\r\n    getValue(registerName) {\r\n        return utils.unsignedToSigned(this.registers[registerName].value, this.registerByteWidth);\r\n    }\r\n    \r\n    getUValue(registerName) {\r\n        return this.registers[registerName].value;\r\n    }\r\n}","export class AsmError extends Error {\r\n  constructor(message) {\r\n    super(message);\r\n    this.name = \"AsmError\";\r\n  }\r\n}\r\n\r\nexport class SimulationError extends AsmError {\r\n  constructor(message) {\r\n    super(message);\r\n    this.name = \"SimulationError\";\r\n  }\r\n}","export default class IOManager {\r\n  constructor(simulation) {\r\n    this.simulation = simulation;\r\n    this.ports = [];\r\n    this.portHandlers = [];\r\n    this.waitingPort = null;\r\n  }\r\n\r\n  reset() {\r\n    this.ports.forEach(port => port.reset());\r\n  }\r\n\r\n  getPorts() {\r\n    return this.ports;\r\n  }\r\n\r\n  addPort(port) {\r\n    this.ports.push(port);\r\n\r\n    let answerHandler = () => {\r\n      if (!this.simulation.waitingIO) return;\r\n      if (this.waitingPort !== port) return;\r\n      this.simulation.waitingIO = false;\r\n      this.simulation.run();\r\n    };\r\n\r\n    port.on('read wait end', answerHandler);\r\n    port.on('write wait end', answerHandler);\r\n\r\n    this.portHandlers.push({answerHandler});\r\n  }\r\n\r\n  removePort(port) {\r\n    let index = this.ports.findIndex(x => x === port);\r\n    if (index < 0) return;\r\n    this.ports.splice(index, 1);\r\n    let handlers = this.portHandlers[index];\r\n    this.portHandlers.splice(index, 1);\r\n    port.off('read answer', handlers.answerHandler);\r\n    port.off('write answer', handlers.answerHandler);\r\n  }\r\n\r\n  read(index) {\r\n    if (index >= this.ports.length) throw new Error('Inexistent IO port');\r\n    let result = this.ports[index].read(this.simulation);\r\n    if (this.ports[index].waitingRead) {\r\n      this.waitingPort = this.ports[index];\r\n      this.simulation.waitingIO = true;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  write(index, value) {\r\n    if (index >= this.ports.length) throw new Error('Inexistent IO port');\r\n    let result = this.ports[index].write(this.simulation, value);\r\n    if (this.ports[index].waitingWrite) {\r\n      this.waitingPort = this.ports[index];\r\n      this.simulation.waitingIO = true;\r\n    }\r\n    return result;\r\n  }\r\n}","import { EventEmitter } from 'events';\r\nimport utils from '../../../utils';\r\nimport { SimulationError } from '../asmErrors';\r\nimport Instruction from '../instruction';\r\nimport IOManager from './io/ioManager';\r\n\r\nconst endSimulationCode = 0x0003;\r\nconst defaultBreakpointHandler = (simulation, pc) => false;\r\n\r\nexport default class Simulation extends EventEmitter {\r\n\tconstructor(architecture, memory, registerBank) {\r\n\t\tsuper();\r\n\r\n\t\tthis.architecture = architecture;\r\n\t\tthis.memory = memory;\r\n\t\tthis.registerBank = registerBank;\r\n\t\tthis.codeExecutionMaxPC = 0;\r\n\t\tthis.running = false;\r\n\t\tthis.ended = false;\r\n\t\tthis.stopping = false;\r\n\t\tthis.stepInterval = 50;\r\n\t\tthis.cycles = 0;\r\n\t\tthis.pc = 0;\r\n\t\tthis.ioManager = new IOManager(this);\r\n\t\tthis.waitingIO = false;\r\n\t\tthis.memoryRegions = this.architecture.getMemoryRegions();\r\n\r\n\t\tthis.breakpointHandler = defaultBreakpointHandler;\r\n\t\tthis.setupMemoryHandlers();\r\n\t}\r\n\r\n\treset() {\r\n\t\tif (this.running && !this.stopping) this.stop();\r\n\t\tthis.ended = false;\r\n\t\tthis.waitingIO = false;\r\n\t\tthis.carry = 0;\r\n\t\tthis.setPC(0);\r\n\t\tthis.setCycles(0);\r\n\t\tthis.registerBank.reset();\r\n\t\tthis.registerBank.setValue('sp', this.memoryRegions.stack);\r\n\t\tthis.memory.reset();\r\n\t\tthis.ioManager.reset();\r\n\t\tthis.writeObjCodeMemory();\r\n\t\tthis.emit('reset');\r\n\t}\r\n\r\n\tsetupMemoryHandlers() {\r\n\t\tlet ioAddress = this.memoryRegions.io;\r\n\r\n\t\tthis.memory.onReadWord = (address) => {\r\n\t\t\tif (address < ioAddress) return;\r\n\t\t\tlet portIndex = (address - ioAddress) / this.architecture.getByteWidth();\r\n\t\t\treturn this.ioManager.read(portIndex);\r\n\t\t};\r\n\r\n\t\tthis.memory.onWriteWord = (address, value) => {\r\n\t\t\tif (address < ioAddress) return true;\r\n\t\t\tlet portIndex = (address - ioAddress) / this.architecture.getByteWidth();\r\n\t\t\treturn this.ioManager.write(portIndex, value);\r\n\t\t};\r\n\t}\r\n\r\n\tregisterPorts(ports) {\r\n\t\tports.forEach(port => this.ioManager.addPort(port));\r\n\t}\r\n\t\r\n\tunregisterPorts(ports) {\r\n\t\tports.forEach(port => this.ioManager.removePort(port));\r\n\t}\r\n\r\n\tgetPortsSymbolTable() {\r\n\t\tlet symbolTable = {};\r\n\t\tlet ports = this.ioManager.getPorts();\r\n\t\tlet value = this.memoryRegions.io;\r\n\t\tfor (let port of ports) {\r\n\t\t\tif (port.device === null) continue;\r\n\t\t\tsymbolTable[port.device.name + '_' + port.name] = value;\r\n\t\t\tvalue += this.architecture.getByteWidth();\r\n\t\t}\r\n\t\treturn symbolTable;\r\n\t}\r\n\r\n\tgetPortsSymbolsList() {\r\n\t\tlet symbolList = [];\r\n\t\tlet ports = this.ioManager.getPorts();\r\n\t\tfor (let port of ports) {\r\n\t\t\tif (port.device === null) continue;\r\n\t\t\tsymbolList.push(port.device.name + '_' + port.name);\r\n\t\t}\r\n\t\treturn symbolList;\r\n\t}\r\n\r\n\tsetRawObjCode(rawObjCode) {\r\n\t\tif (rawObjCode.length > this.memoryRegions.io * 2) throw new SimulationError('Object code too big for the memory');\r\n\t\tthis.rawObjCode = rawObjCode;\r\n\t}\r\n\r\n\twriteObjCodeMemory() {\r\n\t\tif (!this.rawObjCode) return;\r\n\t\tlet wordArray = this.rawObjCode\r\n\t\t\t.match(/.{1,4}/g)\r\n\t\t\t.map(x => parseInt(x, 16));\r\n\t\tfor (let i = 0; i < wordArray.length; i++) {\r\n\t\t\tlet word = wordArray[i];\r\n\t\t\tthis.memory.writeWord(i * 2, word);\r\n\t\t}\r\n\r\n\t\tthis.codeExecutionMaxPC = wordArray.length * 2;\r\n\t}\r\n\r\n\tstep() {\r\n\t\tif (this.pc >= this.codeExecutionMaxPC) throw new SimulationError('PC run out of program bounds');\r\n\r\n\t\tlet code;\r\n\r\n\t\ttry {\r\n\t\t\tcode = this.memory.readWord(this.pc);\r\n\t\t} catch (exc) {\r\n\t\t\tconsole.error(exc);\r\n\t\t\tthis.emit('run error', exc);\r\n\t\t\treturn this.stop();\r\n\t\t}\r\n\r\n\t\tif (code === endSimulationCode) {\r\n\t\t\tthis.ended = true;\r\n\t\t\tthis.emit('run ended');\r\n\t\t\treturn this.stop();\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tlet instruction = Instruction.disassemble(code, this.architecture);\r\n\t\t\tinstruction.execute(this);\r\n\t\t} catch (exc) {\r\n\t\t\tconsole.error(exc);\r\n\t\t\tthis.emit('run error', exc);\r\n\t\t\treturn this.stop();\r\n\t\t}\r\n\r\n\t\tif (this.waitingIO) {\r\n\t\t\treturn this.stop();\r\n\t\t}\r\n\r\n\t\tthis.incrementPC(2);\r\n\t\tthis.incrementCycles(1);\r\n\r\n\t\tif (this.breakpointHandler(this, this.pc)) {\r\n\t\t\tthis.emit('breakpoint', this.pc);\r\n\t\t\tthis.stop();\r\n\t\t}\r\n\t}\r\n\r\n\tasync runner() {\r\n\t\tthis.emit('run started');\r\n\t\ttry {\r\n\t\t\tlet timePerBlock = 50;\r\n\t\t\tlet toExecFloat = 0;\r\n\t\t\trunLoop:\r\n\t\t\twhile (!this.stopping) {\r\n\t\t\t\tif (this.stepInterval > 0) {\r\n\t\t\t\t\ttoExecFloat += timePerBlock / this.stepInterval;\r\n\t\t\t\t\tif (toExecFloat >= 1) {\r\n\t\t\t\t\t\tlet toExec = Math.floor(toExecFloat);\r\n\t\t\t\t\t\ttoExecFloat -= toExec;\r\n\t\t\t\t\t\tlet start = Date.now();\r\n\t\t\t\t\t\tfor (let i = 0; i < toExec; i++) {\r\n\t\t\t\t\t\t\tif (this.stopping) break runLoop;\r\n\t\t\t\t\t\t\tthis.step();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tlet sleepTime = timePerBlock - (Date.now() - start);\r\n\t\t\t\t\t\tif (sleepTime > 0) await utils.sleep(sleepTime);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tawait utils.sleep(timePerBlock);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.step();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(error);\r\n\t\t\tthis.emit('run error', error);\r\n\t\t}\r\n\t\tthis.running = false;\r\n\t\tthis.stopping = false;\r\n\t}\r\n\r\n\tstop() {\r\n\t\tif (!this.running) throw new Error('Simulation already stopped');\r\n\t\tif (this.stopping) throw new Error('Simulation already stopping');\r\n\t\tthis.stopping = true;\r\n\t}\r\n\r\n\trun() {\r\n\t\tif (this.running) throw new Error('Simulation already running');\r\n\t\tif (this.stopping) throw new Error('Simulation stopping');\r\n\t\tthis.running = true;\r\n\t\tthis.stopping = false;\r\n\t\tsetTimeout(this.runner.bind(this));\r\n\t}\r\n\r\n\tisWaitingIO() {\r\n\t\treturn this.waitingIO;\r\n\t}\r\n\r\n\tisRunning() {\r\n\t\treturn this.running;\r\n\t}\r\n\r\n\tisStopping() {\r\n\t\treturn this.stopping;\r\n\t}\r\n\r\n\thasEnded() {\r\n\t\treturn this.ended;\r\n\t}\r\n\r\n\tgetRegisterBank() {\r\n\t\treturn this.registerBank;\r\n\t}\r\n\r\n\tgetMemory() {\r\n\t\treturn this.memory;\r\n\t}\r\n\r\n\tgetCarry() {\r\n\t\treturn this.carry;\r\n\t}\r\n\r\n\tsetCarry(carry) {\r\n\t\tthis.carry = carry;\r\n\t}\r\n\r\n\tsetPC(pc) {\r\n\t\tthis.pc = (pc >>> 0) & this.architecture.getMask();\r\n\t\tthis.emit('pc update', this.pc);\r\n\t}\r\n\r\n\tincrementPC(value) {\r\n\t\tthis.setPC(this.getPC() + value);\r\n\t}\r\n\r\n\tgetPC() {\r\n\t\treturn this.pc;\r\n\t}\r\n\r\n\tsetCycles(cycles) {\r\n\t\tthis.cycles = cycles;\r\n\t\tthis.emit('cycles update', this.cycles);\r\n\t}\r\n\r\n\tincrementCycles(value) {\r\n\t\tthis.cycles += value;\r\n\t\tthis.emit('cycles update', this.cycles);\r\n\t}\r\n\r\n\tgetCycles() {\r\n\t\treturn this.cycles;\r\n\t}\r\n\r\n\tgetArchitecture() {\r\n\t\treturn this.architecture;\r\n\t}\r\n\r\n\tsetBreakpointHandler(handler) {\r\n\t\tif (!handler) return this.breakpointHandler = defaultBreakpointHandler;\r\n\t\tif (typeof handler != 'function') throw new Error('handler isnt function');\r\n\t\tthis.breakpointHandler = handler;\r\n\t}\r\n\r\n\tsetStepInterval(ms) {\r\n\t\tthis.stepInterval = ms;\r\n\t}\r\n\r\n\tgetStepInterval() {\r\n\t\treturn this.stepInterval;\r\n\t}\r\n}","let pseudos = [];\r\n\r\nfunction setup() {\r\n    const pseudosMs = require.context('./', true, /pseudos\\/.+\\.js$/);\r\n    pseudos = pseudosMs.keys().map(key => pseudosMs(key, true).default);\r\n}\r\n\r\nfunction getPseudoInstructions() {\r\n    return pseudos;\r\n}\r\n\r\nconst pseudoManager = {\r\n    setup,\r\n    getPseudoInstructions,\r\n};\r\n\r\nexport default pseudoManager;","\r\nexport default class PseudoConverter {\r\n    constructor(pseudos) {\r\n        this.pseudos = pseudos;\r\n    }\r\n\r\n    convert(instruction, architecture) {\r\n        for (let pseudo of this.pseudos) {\r\n            let instructions = pseudo.getNonPseudoInstructions(instruction, architecture);\r\n            if (instructions.length > 0) {\r\n                for (let i = 0; i < instructions.length; i++) {\r\n                    let convInstruction = instructions[i];\r\n                    let convInstructions = this.convert(convInstruction, architecture);\r\n\r\n                    if (convInstructions.length > 0) {\r\n                        instructions.splice(i, 1, ...convInstructions);\r\n                    }\r\n                }\r\n                return instructions;\r\n            }\r\n        }\r\n        return [];\r\n    }\r\n}","import operationsManager from '../operations/operationsManager';\r\nimport Instruction from '../instruction';\r\nimport Operand from '../operand';\r\nimport utils from '../../../utils';\r\n\r\nexport default class InstructionParser {\r\n\r\n    constructor(architecture) {\r\n        this.architecture = architecture;\r\n    }\r\n\r\n    isInstruction(str) {\r\n        try {\r\n            let operation = this.parseOperation(str);\r\n            return operation != null;\r\n        } catch (exc) {\r\n            return false;\r\n        }\r\n    }\r\n    \r\n    parse(str) {\r\n        // parse operation & operands\r\n        let operation = this.parseOperation(str);\r\n        let operands = this.parseOperands(str);\r\n\r\n        let instruction = new Instruction(operation, operands);\r\n        return instruction;\r\n    }\r\n    \r\n\r\n    // detect if str is register\r\n    isRegisterName(str) {\r\n        return this.architecture.hasRegisterName(str);\r\n    }\r\n\r\n    // detect if str is operation\r\n    isOperationName(str) {\r\n        return operationsManager.isOperationName(str);\r\n    }\r\n\r\n    // parse operation\r\n    parseOperation(str) {\r\n        let match = str.match(/^(\\w*)[\\t ]*/);\r\n        if (!Array.isArray(match) || match.length < 2) throw new TypeError('Cant parse to operation');\r\n\r\n        let operationName = match[1];\r\n        if (!this.isOperationName(operationName)) throw new TypeError('\"' + operationName + '\" isnt operation');\r\n        \r\n        let operation = operationsManager.getOperationByName(operationName);\r\n        if (!operation) throw new Error('Operation with name \"' + operationName + '\" not found');\r\n\r\n        return operation;\r\n    }\r\n\r\n    // detect type of operand value\r\n    getInstructionOperandValueType(operandValue) {\r\n        if (typeof operandValue !== 'string') return null;\r\n        if (operandValue.length === 0) return null;\r\n\r\n        if (this.isRegisterName(operandValue)) return 'register';\r\n        if (utils.isInteger(operandValue)) return 'literal';\r\n        return 'symbol';\r\n    }\r\n    \r\n    // parse operands\r\n    parseOperands(str) {\r\n        let operands = [];\r\n\r\n        let match = str.match(/^\\w+[ \\t]+(.+)/);\r\n        if (Array.isArray(match) && match.length >= 2) {\r\n            let operandsStr = match[1];\r\n            let operandsValues = operandsStr.split(/[\\t ]*,[\\t ]*/);\r\n            for (let value of operandsValues) {\r\n                value = value.trim();\r\n                let type = this.getInstructionOperandValueType(value);\r\n                if (type === null) {\r\n                    throw new Error('Operand \"' + value + '\" cant be parsed');\r\n                }\r\n                if (type === Operand.LITERAL) {\r\n                    value = parseInt(value);\r\n                }\r\n                operands.push(new Operand(value, type));\r\n            }\r\n        }\r\n        \r\n        return operands;\r\n    }\r\n}","import { unraw } from 'unraw';\r\nimport utils from '../../../utils';\r\n\r\nexport default class DataParser {\r\n    constructor(architecture) {\r\n        this.architecture = architecture;\r\n    }\r\n\r\n    parse(str) {\r\n        let byteWidth = this.architecture.getByteWidth();\r\n        let bytes = this.parseToBytes(str, byteWidth);\r\n        let data = this.bytesToData(bytes, byteWidth);\r\n        return data;\r\n    }\r\n\r\n    parseToBytes(str, byteWidth) {\r\n        let bytes = [];\r\n        let values = extractValues(str);\r\n        for (let { type, value } of values) {\r\n            switch (type) {\r\n                case 'text':\r\n                    for (let i = 0; i < value.length; i++) {\r\n                        bytes.push(value.charCodeAt(i));\r\n                    }\r\n                    bytes.push(0);\r\n                    break;\r\n                case 'others':\r\n                    let trimmed = value.trim();\r\n                    if (trimmed.length <= 0) break;\r\n\r\n                    let splitted = trimmed.split(/(?:[?: \\t]+)|,/);\r\n                    if (splitted.some(x => !utils.isInteger(x))) throw new TypeError('Data contains a non-literal');\r\n                    bytes.push( ...splitted.reduce( (a, b) => a.concat(utils.numberToBytes(parseInt(b), byteWidth)), [] ) );\r\n                    break;\r\n                default:\r\n            }\r\n        }\r\n        return bytes;\r\n    }\r\n\r\n    bytesToData(bytes, byteWidth) {\r\n        let data = [];\r\n        for (let i = 0; i < bytes.length; i += byteWidth) {\r\n            let curBytes = new Array(byteWidth).fill(0);\r\n            for (let j = 0; j < byteWidth; j++) {\r\n                let byte = bytes[i + j];\r\n                curBytes[j] = byte ? byte : 0;\r\n            }\r\n            data.push(utils.bytesToNumber(curBytes));\r\n        }\r\n        return data;\r\n    }\r\n}\r\n\r\nfunction extractValues(str) {\r\n    let lastC;\r\n    let startIndex = 0;\r\n    let capturingQuote = false;\r\n\r\n    let values = [];\r\n    for (let i = 0; i < str.length; i++) {\r\n        let c = str[i];\r\n\r\n        if ((c === '\"' && lastC !== '\\\\')) {            \r\n            if (capturingQuote) {\r\n                if (startIndex !== i) values.push({\r\n                    type: 'text',\r\n                    value: unraw(str.substring(startIndex, i)),\r\n                });\r\n                capturingQuote = false;\r\n                startIndex = i + 1;\r\n            } else {\r\n                capturingQuote = true;\r\n                if (startIndex !== i) values.push({\r\n                    type: 'others',\r\n                    value: str.substring(startIndex, i),\r\n                });\r\n                startIndex = i + 1;\r\n            }\r\n        }\r\n        lastC = c;\r\n    }\r\n    if (startIndex !== str.length) values.push({\r\n        type: 'others',\r\n        value: str.substring(startIndex, str.length),\r\n    });\r\n    return values;\r\n}","export default class CommentParser {\r\n    parse(str) {\r\n        let result = {\r\n            hasComment: false,\r\n            comment: null,\r\n            rest: null,\r\n        };\r\n        let index = str\r\n            .replace(/\".+\"/g, '') // Ignore strings content\r\n            .indexOf('//');\r\n        if (index >= 0) {\r\n            result.hasComment = true;\r\n            result.comment = str.substring(index+2);\r\n            result.rest = str.substring(0, index);\r\n        } else {\r\n            result.rest = str;\r\n        }\r\n        return result;\r\n    }\r\n};","export default class LineParser {\r\n\r\n    constructor(instructionParser, dataParser, commentParser) {\r\n        this.instructionParser = instructionParser;\r\n        this.dataParser = dataParser;\r\n        this.commentParser = commentParser;\r\n    }\r\n\r\n    getSymbolAndRest(str) {\r\n        let symbol;\r\n        let rest;\r\n\r\n        let match = str.match(/^(\\w*)[\\t ]*(.*)/);\r\n        if (Array.isArray(match) && match.length >= 3) {\r\n            if (this.instructionParser.isOperationName(match[1])) {\r\n                symbol = null;\r\n                rest = match[1] + ' ' + match[2];\r\n            } else {\r\n                symbol = match[1];\r\n                rest = match[2];\r\n                if (symbol.length === 0) symbol = null;\r\n            }\r\n        } else {\r\n            throw new Error('Cant parse line to symbol and rest');\r\n        }\r\n        \r\n        return { symbol, rest };\r\n    }\r\n\r\n    parse(line) {\r\n        // Extract symbols\r\n        let result = this.getSymbolAndRest(line);\r\n        let { symbol } = result;\r\n        let sanitizedRest = result.rest.trim();\r\n\r\n        // Extract comments\r\n        result = this.commentParser.parse(sanitizedRest);\r\n        let { hasComment, comment } = result;\r\n        sanitizedRest = result.rest.trim();\r\n        \r\n        // Extract instructions / data\r\n        let instruction = null;\r\n        let data = null;\r\n        if (sanitizedRest.length > 0) {\r\n            if (this.instructionParser.isInstruction(sanitizedRest)) {\r\n                instruction = this.instructionParser.parse(sanitizedRest);\r\n            } else {\r\n                data = this.dataParser.parse(sanitizedRest);\r\n            }\r\n        }\r\n\r\n        return { hasComment, comment, symbol, instruction, data };\r\n    }\r\n}","import Operand from '../operand';\r\nimport InstructionParser from './instructionParser';\r\nimport DataParser from './dataParser';\r\nimport CommentParser from './commentParser';\r\nimport LineParser from './lineParser';\r\nimport utils from '../../../utils';\r\n\r\nclass Assembler {\r\n    constructor(architecture, programData, pseudoConverter) {\r\n        this.architecture = architecture;\r\n        this.programData = programData;\r\n        this.pseudoConverter = pseudoConverter;\r\n        this.extraSymbolTable = {};\r\n        \r\n        this.lines = this.programData.split('\\n');\r\n        \r\n        this.sequence = [];\r\n        this.symbolTable = {};\r\n        this.objectCodeArray = [];\r\n        this.instructions = [];\r\n        this.additionalInfos = [];\r\n    }\r\n\r\n    assemble() {\r\n        this.pass1();\r\n        this.pass2();\r\n        this.pass3();\r\n        \r\n        return {\r\n            rawObjectCode: this.rawObjectCode,\r\n            objectCodeArray: this.objectCodeArray,\r\n            symbolTable: this.symbolTable,\r\n            instructions: this.instructions,\r\n            additionalInfos: this.additionalInfos,\r\n        };\r\n    }\r\n\r\n    addExtraSymbolTable(symbolTable) {\r\n        Object.assign(this.extraSymbolTable, symbolTable);\r\n    }\r\n\r\n    // Process instructions, pseudo-instructions, symbols.\r\n    // Doesnt substitute symbols in instructions.\r\n    pass1() {\r\n        let pc = 0;\r\n\r\n        let instructionParser = new InstructionParser(this.architecture);\r\n        let dataParser = new DataParser(this.architecture);\r\n        let commentParser = new CommentParser();\r\n        let lineParser = new LineParser(instructionParser, dataParser, commentParser);\r\n\r\n        for (let i = 0; i < this.lines.length; i++) {\r\n            let line = this.lines[i];\r\n            let additionalInfo = { lineIndex: i, lineNumber: i+1, line, pc };\r\n            this.additionalInfos.push(additionalInfo);\r\n\r\n            let parsed;\r\n            try {\r\n                parsed = lineParser.parse(line);\r\n            } catch (exc) {\r\n                console.error(exc);\r\n                throw new Error('Cant parse line ' + (i+1) + ' \"' + line.trim() + '\": ' + exc.message);\r\n            }\r\n            let { symbol, instruction, data } = parsed;\r\n            additionalInfo.parsed = parsed;\r\n\r\n            if (symbol) {\r\n                this.symbolTable[symbol] = pc;\r\n            }\r\n            if (data) {\r\n                this.sequence.push(...data);\r\n                pc += 2 * data.length;\r\n            }\r\n            if (instruction) {\r\n                // process pseudo instructions\r\n                if (instruction.isPseudo()) {\r\n                    let convInstructions = this.pseudoConverter.convert(instruction, this.architecture);\r\n                    if (convInstructions != null && convInstructions.length > 0) {\r\n                        this.instructions.push(...convInstructions);\r\n                        this.sequence.push(...convInstructions);\r\n                        pc += 2 * convInstructions.length;\r\n                    } else {\r\n                        throw new Error('The pseudo instruction on line ' + (i+1) + ' \"' + line.trim() + '\" doesnt exist');\r\n                    }\r\n                } else {\r\n                    this.instructions.push(instruction);\r\n                    this.sequence.push(instruction);\r\n                    pc += 2;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Substitute symbols with their values\r\n    pass2() {\r\n        for (let instruction of this.instructions) {\r\n            let operands = instruction.getOperands();\r\n            for (let operand of operands) {\r\n                if (operand.getType() === Operand.SYMBOL) {\r\n                    let symbolValue = this.symbolTable[operand.getValue()];\r\n                    if (symbolValue == null) symbolValue = this.extraSymbolTable[operand.getValue()];\r\n                    if (symbolValue == null) throw new Error('The symbol \"' + operand.getValue() + '\" doesnt exist');\r\n                    let finalValue = 0;\r\n                    for (let i = operand.getByteRange().min; i <= operand.getByteRange().max; i++) {\r\n                        finalValue <<= 2;\r\n                        finalValue |= (symbolValue >> (this.architecture.getBitWidth() - (8 * (i + 1)))) & 0xFF;\r\n                    }\r\n                    operand.setType(Operand.LITERAL);\r\n                    operand.setValue(finalValue);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Assemble object code\r\n    pass3() {\r\n        // Assemble\r\n        for (let item of this.sequence) {     \r\n            if (Number.isInteger(item)) {\r\n                this.objectCodeArray.push(item);\r\n            } else {\r\n                this.objectCodeArray.push(item.assemble(this.architecture));\r\n            }\r\n        }\r\n        \r\n        this.rawObjectCode = this.objectCodeArray\r\n            .map(x => utils.signedNumberToHex(x, 2))\r\n            .join('');\r\n    }\r\n};\r\n\r\nexport default Assembler;","import Instruction from '../instruction';\r\n\r\nclass Disassembler {\r\n    constructor(architecture) {\r\n        this.architecture = architecture;\r\n    }\r\n\r\n    disassemble(rawHex) {\r\n        if (rawHex.length === 0) return [];\r\n\r\n        let result = [];\r\n        let arrayLiteral = rawHex\r\n            .match(/.{1,4}/g)\r\n            .map(x => parseInt(x, 16));\r\n        \r\n        let pc = 0;\r\n        for (let code of arrayLiteral) {\r\n            let instruction;\r\n            try {\r\n                instruction = Instruction.disassemble(code, this.architecture);\r\n            } catch (exc) { }\r\n\r\n            let value = instruction ? instruction.toString() : '????';\r\n\r\n            result.push({\r\n                instruction,\r\n                value,\r\n                pc,\r\n                code,\r\n            });\r\n\r\n            pc += 2;\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\nexport default Disassembler;","import Instruction from './instruction';\r\n\r\nimport architectureManager from './architectureManager';\r\nimport operationsManager from './operations/operationsManager';\r\nimport pseudoManager from './pseudoInstructionConversions/pseudoManager';\r\nimport pseudoConverter from './pseudoInstructionConversions/pseudoConverter';\r\n\r\nimport assembler from './assembler/assembler';\r\nimport disassembler from './disassembler/disassembler';\r\n\r\nimport memory from './simulator/memory';\r\nimport memoryStorage16 from './simulator/memoryStorage16';\r\nimport registerBank from './simulator/registerBank';\r\n\r\nimport simulation from './simulator/simulation';\r\n\r\narchitectureManager.setup();\r\noperationsManager.setup();\r\npseudoManager.setup();\r\n\r\nconst asm = {\r\n    Instruction,\r\n    architectureManager,\r\n    operationsManager,\r\n    pseudoManager,\r\n    pseudoConverter,\r\n    assembler,\r\n    disassembler,\r\n    memory,\r\n    memoryStorage16,\r\n    registerBank,\r\n    simulation,\r\n};\r\n\r\nexport default asm;","var _g;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgAssembleIcon(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: \"900.000000pt\",\n    height: \"900.000000pt\",\n    viewBox: \"0 0 900.000000 900.000000\",\n    preserveAspectRatio: \"xMidYMid meet\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    transform: \"translate(0.000000,900.000000) scale(0.100000,-0.100000)\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M4200 8359 c-824 -72 -1550 -366 -2177 -883 -59 -49 -180 -162 -268 -250 -619 -622 -995 -1403 -1101 -2291 -14 -112 -18 -223 -18 -435 0 -308 13 -468 60 -715 185 -965 709 -1805 1492 -2390 1009 -753 2342 -966 3542 -565 1330 444 2320 1583 2574 2960 38 207 56 385 63 610 27 938 -288 1847 -892 2577 -114 139 -359 384 -498 498 -590 488 -1267 777 -2042 871 -155 18 -586 26 -735 13z m2535 -1278 c22 -10 54 -34 71 -52 23 -25 265 -406 328 -516 15 -26 23 -106 15 -148 -17 -91 -46 -117 -310 -281 -134 -84 -258 -159 -275 -168 -87 -43 -199 -24 -265 47 -37 39 -280 422 -330 519 -44 86 -25 200 44 268 32 30 475 311 532 336 44 20 143 17 190 -5z m-1186 -212 c40 -22 79 -69 100 -119 15 -34 149 -531 157 -578 12 -73 -26 -157 -96 -213 -28 -23 -93 -45 -329 -109 -161 -44 -312 -80 -335 -80 -80 0 -179 66 -208 139 -6 14 -43 148 -84 296 -78 285 -87 345 -59 413 40 94 75 112 402 203 322 89 371 94 452 48z m-1330 -245 c64 -32 106 -87 121 -157 16 -82 40 -589 29 -638 -18 -81 -62 -134 -134 -165 -42 -18 -373 -43 -585 -43 -117 -1 -165 14 -215 65 -58 61 -63 85 -81 422 -16 297 -16 314 1 358 23 60 65 107 119 134 37 17 78 22 277 34 374 21 406 21 468 -10z m-1325 -88 c66 -20 110 -57 140 -118 l26 -52 0 -320 c0 -301 -2 -324 -21 -366 -27 -60 -54 -88 -114 -116 -49 -23 -55 -24 -371 -24 l-320 0 -52 26 c-63 31 -107 88 -122 158 -8 34 -11 153 -8 351 3 270 5 304 22 335 36 69 92 114 161 131 17 4 161 7 321 8 224 1 302 -2 338 -13z m3649 -950 c142 -53 271 -103 287 -111 73 -38 127 -143 118 -228 -5 -38 -182 -537 -214 -598 -36 -72 -142 -126 -227 -117 -39 5 -538 182 -597 213 -39 20 -96 87 -110 130 -22 68 -7 136 94 407 52 141 102 271 111 287 21 41 62 79 110 102 73 36 137 23 428 -85z m-1233 -17 c61 -14 114 -51 146 -100 25 -40 71 -245 129 -577 25 -143 -12 -235 -117 -285 -62 -30 -561 -130 -645 -129 -93 1 -182 67 -212 157 -19 57 -112 558 -113 606 0 60 8 83 43 136 46 66 98 85 399 142 146 28 274 52 285 54 32 7 38 7 85 -4z m-1174 -147 c21 -11 51 -33 66 -49 53 -56 59 -87 81 -419 20 -300 20 -313 3 -358 -31 -81 -90 -133 -171 -150 -44 -9 -467 -36 -564 -36 -98 0 -151 20 -200 76 -47 53 -58 114 -77 429 -20 343 -18 355 56 427 27 26 66 52 87 58 45 14 544 50 624 45 30 -1 73 -12 95 -23z m-1242 -56 c66 -20 110 -57 140 -118 l26 -52 0 -320 c0 -301 -2 -324 -21 -366 -27 -60 -54 -88 -114 -116 -49 -23 -55 -24 -371 -24 l-320 0 -52 26 c-63 31 -107 88 -122 158 -8 34 -11 153 -8 351 3 270 5 304 22 335 36 69 92 114 161 131 17 4 161 7 321 8 224 1 302 -2 338 -13z m3289 -1096 c319 -33 338 -38 400 -111 62 -71 63 -100 28 -442 -19 -180 -37 -313 -47 -337 -21 -53 -92 -114 -150 -130 -41 -12 -84 -10 -356 18 -334 35 -353 39 -415 104 -42 43 -63 96 -63 155 0 26 13 173 29 326 24 225 33 286 51 322 35 72 118 124 201 125 19 0 165 -13 322 -30z m-1053 -4 c138 -4 184 -20 239 -82 62 -71 65 -92 54 -447 -8 -291 -10 -315 -30 -353 -25 -48 -72 -90 -123 -112 -50 -21 -657 -12 -711 11 -55 23 -104 72 -129 129 -22 51 -22 56 -16 348 4 162 12 316 17 342 12 51 64 120 110 143 61 32 147 35 589 21z m-2236 -50 c66 -20 110 -57 140 -118 l26 -52 0 -320 c0 -301 -2 -324 -21 -366 -27 -60 -54 -88 -114 -116 -49 -23 -55 -24 -371 -24 l-320 0 -52 26 c-63 31 -107 88 -122 158 -8 34 -11 153 -8 351 3 270 5 304 22 335 36 69 92 114 161 131 17 4 161 7 321 8 224 1 302 -2 338 -13z m1170 0 c66 -20 110 -57 140 -118 l26 -52 0 -320 c0 -301 -2 -324 -21 -366 -27 -60 -54 -88 -114 -116 -49 -23 -55 -24 -371 -24 l-320 0 -52 26 c-63 31 -107 88 -122 158 -8 34 -11 153 -8 351 3 270 5 304 22 335 36 69 92 114 161 131 17 4 161 7 321 8 224 1 302 -2 338 -13z m-1178 -1159 c68 -18 118 -58 149 -120 l25 -51 0 -314 c0 -210 -4 -328 -12 -353 -15 -52 -73 -117 -122 -140 -37 -17 -72 -19 -366 -19 -323 0 -325 0 -377 24 -63 30 -107 87 -123 159 -8 35 -10 153 -8 352 3 270 5 304 22 335 36 69 92 114 161 131 56 13 596 10 651 -4z m1170 0 c68 -18 118 -58 149 -120 l25 -51 0 -314 c0 -210 -4 -328 -12 -353 -15 -52 -73 -117 -122 -140 -37 -17 -72 -19 -366 -19 -323 0 -325 0 -377 24 -63 30 -107 87 -123 159 -8 35 -10 153 -8 352 3 270 5 304 22 335 36 69 92 114 161 131 56 13 596 10 651 -4z m1199 -10 c54 -24 93 -63 119 -117 20 -42 21 -64 24 -332 2 -170 -1 -309 -7 -342 -14 -78 -58 -137 -123 -170 l-52 -26 -325 0 c-363 0 -372 2 -438 70 -62 64 -64 79 -61 450 l3 335 27 41 c15 23 41 52 59 65 62 44 103 48 429 46 269 -2 310 -4 345 -20z m1150 0 c54 -24 93 -63 119 -117 20 -42 21 -64 24 -332 2 -170 -1 -309 -7 -342 -14 -78 -58 -137 -123 -170 l-52 -26 -325 0 c-363 0 -372 2 -438 70 -62 64 -64 79 -61 450 l3 335 27 41 c15 23 41 52 59 65 62 44 103 48 429 46 269 -2 310 -4 345 -20z\"\n  }))));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgAssembleIcon);\nexport default __webpack_public_path__ + \"static/media/AssembleIcon.f57532ba.svg\";\nexport { ForwardRef as ReactComponent };","import Editor from '@monaco-editor/react';\r\nimport { Component, createRef } from 'react';\r\nimport operationsManager from '../../business/asm/operations/operationsManager';\r\nimport styles from './Program.module.css'\r\n\r\nlet alreadyCreatedLang = false;\r\n\r\nclass Program extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    if (props.curArchitecture == null) throw new Error('props.curArchitecture null');\r\n\r\n    this.infosRef = createRef();\r\n\r\n    this.onChange = typeof props.onChange === 'function' ? props.onChange : ()=>{};\r\n    this.onLoadSavedRequest = typeof props.onLoadSavedRequest === 'function' ? props.onLoadSavedRequest : ()=>{};\r\n    this.onLoadDefaultRequest = typeof props.onLoadDefaultRequest === 'function' ? props.onLoadDefaultRequest : ()=>{};\r\n    this.onSaveRequest = typeof props.onSaveRequest === 'function' ? props.onSaveRequest : ()=>{};\r\n\r\n    this.portsSymbols = props.portsSymbols || [];\r\n    this.opsNames = operationsManager.getOperationNames();\r\n    this.regNames = props.curArchitecture.getRegisterNames();\r\n\r\n    this.state = {  }\r\n  }\r\n\r\n  onEditorWillMount(monaco) {\r\n    this.monaco = monaco;\r\n\r\n    if (alreadyCreatedLang) return;\r\n    alreadyCreatedLang = true;\r\n\r\n    monaco.languages.register({ id: 'vikingAsm' });\r\n        \r\n    monaco.languages.setMonarchTokensProvider('vikingAsm', {\r\n\r\n      operationKeywords: this.opsNames,\r\n      registerKeywords: this.regNames,\r\n      portsSymbols: this.portsSymbols,\r\n\r\n      decimalNumbers: /\\d+/,\r\n      hexNumbers: /(?:0x|0B)[\\da-fA-F]+/,\r\n      \r\n      escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\r\n\r\n      tokenizer: {\r\n        root: [\r\n          [ /\\b@hexNumbers|@decimalNumbers\\b/i, 'number' ],\r\n          [\r\n            /\\b\\w+\\b/,\r\n            {\r\n              cases: {\r\n                '@operationKeywords': 'operationKeywords',\r\n                '@registerKeywords': 'registersKeyWords',\r\n                '@portsSymbols': 'portsKeyWords',\r\n                '@default': 'symbols',\r\n              },\r\n            },\r\n          ],\r\n\r\n          [/\\/\\/.*$/,    'comment'],\r\n\r\n          // strings\r\n          [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid' ],  // non-teminated string\r\n          [/\"/, { token: 'string.quote', bracket: '@open', next: '@string' } ],\r\n        ],\r\n        string: [\r\n          [/[^\\\\\"]+/,  'string'],\r\n          [/@escapes/, 'string.escape'],\r\n          [/\\\\./,      'string.escape.invalid'],\r\n          [/\"/,        { token: 'string.quote', bracket: '@close', next: '@pop' } ]\r\n        ],\r\n      },\r\n    });\r\n\r\n    monaco.languages.registerCompletionItemProvider('vikingAsm', {\r\n      provideCompletionItems: () => {\r\n        let suggestions = this.opsNames.map(opName => ({\r\n          label: opName,\r\n          detail: '...',\r\n          documentation: '...',\r\n          kind: monaco.languages.CompletionItemKind.Function,\r\n          insertText: opName,\r\n        })).concat(this.portsSymbols.map(portSymbol => ({\r\n          label: portSymbol,\r\n          detail: '...',\r\n          documentation: '...',\r\n          kind: monaco.languages.CompletionItemKind.Function,\r\n          insertText: portSymbol,\r\n        })));\r\n        return { suggestions };\r\n      }\r\n    });\r\n    \r\n    monaco.editor.defineTheme('vikinAsmTheme', {\r\n      base: 'vs-dark',\r\n      inherit: true,\r\n      rules: [\r\n        { token: 'operationKeywords', foreground: 'e55283' },\r\n        { token: 'registersKeyWords', foreground: 'ffc100' },\r\n        { token: 'portsKeyWords', foreground: '40f0e3' },\r\n        { token: 'symbols', foreground: '92db57' },\r\n        { token: 'number', foreground: '7d81ea' }\r\n      ],\r\n      colors: {\r\n        \"editor.background\": '#00000000'\r\n      },\r\n    });\r\n  }\r\n\r\n  onEditorMount(editor, monaco) {\r\n    this.editor = editor;\r\n    \r\n    this.editor.getModel().onDidChangeContent(this.onChange);\r\n    this.onChange();\r\n    \r\n    if (this.initText) {\r\n      this.editor.setValue(this.initText);\r\n    }\r\n\r\n    this.saveBindHandler = this.editor.addCommand(monaco.KeyMod.CtrlCmd | monaco.KeyCode.KEY_S, this.save.bind(this));\r\n  }\r\n\r\n  getText() {\r\n    if (this.editor == null) return '';\r\n    return this.editor.getValue();\r\n  }\r\n\r\n  setText(text) {\r\n    this.initText = text;\r\n    if (this.editor == null) return;\r\n    let fullRange = this.editor.getModel().getFullModelRange();\r\n    this.editor.executeEdits(null, [{ text: '', range: fullRange }]);\r\n    this.editor.executeEdits(null, [{ text, range: fullRange }]);\r\n  }\r\n\r\n  setInfos(infos) {\r\n    this.infosRef.current.textContent = infos;\r\n    setTimeout(() => this.infosRef.current.textContent = '', 3000);\r\n  }\r\n\r\n  highlightLine(lineNumber) {\r\n    let lineCount = this.editor.getModel().getLineCount();\r\n    if (lineNumber <= 0 || lineNumber > lineCount) return;\r\n    let lineDec = [\r\n      {\r\n        range: new this.monaco.Range(lineNumber, 1, lineNumber, 1),\r\n        options: {\r\n          isWholeLine: true,\r\n          className: styles.curLineHighlight,\r\n        }\r\n      }\r\n    ];\r\n    this.editor.revealLine(lineNumber);\r\n    let decId = this.editor.deltaDecorations([], lineDec);\r\n    setTimeout(() => this.editor.deltaDecorations(decId, []), 500);\r\n  }\r\n\r\n  save() {\r\n    let code = this.editor.getValue();\r\n    if (this.onSaveRequest(code) === true) {\r\n      this.setInfos('Saved');\r\n    } else {\r\n      console.error('Save error');\r\n    }\r\n  }\r\n\r\n  loadSaved() {\r\n    this.onLoadSavedRequest();\r\n  }\r\n\r\n  loadDefault() {\r\n    this.onLoadDefaultRequest();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={styles.container}>\r\n        <div className={styles.titleContainer}>\r\n          <div>Program</div>\r\n          <div className={styles.infos} ref={this.infosRef}></div>\r\n          <div>\r\n            <button className={styles.btn} onClick={this.save.bind(this)}>Save</button>\r\n            <button className={styles.btn} onClick={this.loadSaved.bind(this)}>Load</button>\r\n            <button className={styles.btn} onClick={this.loadDefault.bind(this)}>Load Example</button>\r\n          </div>\r\n        </div>\r\n        <Editor\r\n          className={styles.editor}          \r\n          language='vikingAsm'\r\n          theme='vikinAsmTheme'\r\n          beforeMount={this.onEditorWillMount.bind(this)}\r\n          onMount={this.onEditorMount.bind(this)}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n \r\nexport default Program;","import { Component } from 'react';\r\nimport utils from '../../utils';\r\nimport styles from './SymbolTable.module.css'\r\n\r\nclass SymbolTable extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    if (!props.architecture) throw new Error('props.architecture null');\r\n    this.architecture = props.architecture;\r\n\r\n    this.onSymbolNameClick = typeof props.onSymbolNameClick === 'function' ? props.onSymbolNameClick : ()=>{};\r\n    this.onSymbolValueClick = typeof props.onSymbolValueClick === 'function' ? props.onSymbolValueClick : ()=>{};\r\n\r\n    this.state = {\r\n      symbols: [],\r\n    }\r\n  }\r\n\r\n  setSymbolTable(symbolTable) {\r\n    let symbols = Object.entries(symbolTable).map(([symbolName, symbolValue]) => ({ symbolName, symbolValue }));\r\n    this.setState({ symbols });\r\n  }\r\n\r\n  render() { \r\n    return (\r\n      <div className={styles.container}>\r\n        <div className={styles.title}>Symbol Table</div>\r\n        <div className={styles.content}>\r\n          <table border=\"1\" frame=\"void\" rules=\"rows\">\r\n            <tbody>\r\n              {\r\n                this.state.symbols.map((symbol, id) => (\r\n                  <tr key={id}>\r\n                    <td className={styles.symbolName} onClick={()=>this.onSymbolNameClick(symbol)}>{symbol.symbolName}</td>\r\n                    <td className={styles.symbolValue} onClick={()=>this.onSymbolValueClick(symbol)}>{'0x'+utils.signedNumberToHex(symbol.symbolValue, this.architecture.getByteWidth())}</td>\r\n                  </tr>\r\n                ))\r\n              }\r\n              {\r\n                (this.state.symbols && this.state.symbols.length > 0) ? <tr className={styles.fillAllSpace}></tr> : <tr/>\r\n              }\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n \r\nexport default SymbolTable;","var _g;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgResetIcon(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: \"900.000000pt\",\n    height: \"900.000000pt\",\n    viewBox: \"0 0 900.000000 900.000000\",\n    preserveAspectRatio: \"xMidYMid meet\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    transform: \"translate(0.000000,900.000000) scale(0.100000,-0.100000)\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M4279 8370 c-958 -59 -1836 -456 -2514 -1135 -628 -628 -1004 -1406 -1111 -2300 -25 -210 -25 -660 0 -870 129 -1080 673 -2027 1534 -2670 1009 -753 2342 -966 3542 -565 801 267 1505 803 1979 1505 360 532 577 1128 647 1777 35 322 18 749 -42 1076 -144 791 -509 1487 -1074 2052 -565 565 -1261 930 -2052 1074 -273 50 -638 73 -909 56z m904 -2223 l-668 -667 -3 498 -2 498 -73 -3 c-653 -27 -1238 -359 -1600 -908 -150 -228 -259 -518 -302 -805 -19 -125 -22 -395 -5 -525 25 -200 87 -413 174 -600 l44 -93 -245 -243 c-234 -234 -245 -243 -259 -224 -34 45 -128 220 -175 326 -97 219 -167 461 -206 716 -24 157 -24 576 0 733 92 590 331 1077 731 1489 478 491 1103 774 1784 808 l132 6 0 501 0 501 670 -670 670 -670 -667 -668z m1653 -361 c158 -272 266 -591 321 -946 25 -161 25 -556 0 -725 -74 -499 -285 -977 -595 -1345 -97 -115 -278 -293 -387 -380 -173 -137 -427 -287 -635 -375 -268 -114 -593 -187 -897 -202 l-133 -6 -2 -499 -3 -498 -668 667 -667 668 670 670 670 670 0 -500 0 -500 122 7 c68 3 154 11 192 18 640 105 1195 516 1476 1095 139 284 201 556 201 875 0 308 -63 584 -200 875 l-29 60 242 243 c132 133 245 241 250 239 5 -2 38 -52 72 -111z\"\n  }))));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgResetIcon);\nexport default __webpack_public_path__ + \"static/media/ResetIcon.0e827492.svg\";\nexport { ForwardRef as ReactComponent };","var _g;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgStepIcon(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: \"900.000000pt\",\n    height: \"900.000000pt\",\n    viewBox: \"0 0 900.000000 900.000000\",\n    preserveAspectRatio: \"xMidYMid meet\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    transform: \"translate(0.000000,900.000000) scale(0.100000,-0.100000)\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M4279 8370 c-958 -59 -1836 -456 -2514 -1135 -628 -628 -1004 -1406 -1111 -2300 -25 -210 -25 -660 0 -870 129 -1080 673 -2027 1534 -2670 1009 -753 2342 -966 3542 -565 801 267 1505 803 1979 1505 360 532 577 1128 647 1777 35 322 18 749 -42 1076 -144 791 -509 1487 -1074 2052 -565 565 -1261 930 -2052 1074 -273 50 -638 73 -909 56z m663 -3122 l3 -2273 1043 1040 1043 1039 267 -267 267 -267 -1503 -1503 -1502 -1502 -1502 1502 -1503 1503 270 270 270 270 1042 -1042 1043 -1043 0 2273 0 2272 380 0 380 0 2 -2272z\"\n  }))));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgStepIcon);\nexport default __webpack_public_path__ + \"static/media/StepIcon.a7b0c075.svg\";\nexport { ForwardRef as ReactComponent };","import { Component } from 'react';\r\nimport styles from './Control.module.css';\r\nimport PauseCircleFilledIcon from '@material-ui/icons/PauseCircleFilled';\r\nimport PlayCircleFilledIcon from '@material-ui/icons/PlayCircleFilled';\r\nimport { ReactComponent as AssembleIcon } from '../../assets/images/AssembleIcon.svg';\r\nimport { ReactComponent as ResetIcon } from '../../assets/images/ResetIcon.svg';\r\nimport { ReactComponent as StepIcon } from '../../assets/images/StepIcon.svg';\r\n\r\nclass Control extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.onAutoAssembleChanged = typeof props.onAutoAssembleChanged === 'function' ? props.onAutoAssembleChanged : ()=>{};\r\n    this.onStepIntervalChanged = typeof props.onStepIntervalChanged === 'function' ? props.onStepIntervalChanged : ()=>{};\r\n    this.onAssemble = typeof props.onAssemble === 'function' ? props.onAssemble : ()=>{};\r\n    this.onRun = typeof props.onRun === 'function' ? props.onRun : ()=>{};\r\n    this.onPause = typeof props.onPause === 'function' ? props.onPause : ()=>{};\r\n    this.onStep = typeof props.onStep === 'function' ? props.onStep : ()=>{};\r\n    this.onReset = typeof props.onReset === 'function' ? props.onReset : ()=>{};\r\n\r\n    this.cycles = 0;\r\n    this.stepInterval = 50;\r\n    this.autoAssemble = true;\r\n\r\n    this.state = {  }\r\n  }\r\n\r\n  setCycles(cycles) {\r\n    this.cycles = cycles;\r\n    this.setState({});\r\n  }\r\n\r\n  stepIntervalChanged(e) {\r\n    let value = parseInt(e.target.value);\r\n    if (isNaN(value)) value = 0;\r\n    if (value > 1000) value = 1000;\r\n    this.stepInterval = value;\r\n    this.onStepIntervalChanged(this.stepInterval);\r\n    this.setState({});\r\n  }\r\n\r\n  autoAssembleChanged(e) {\r\n    this.autoAssemble = e.target.checked;\r\n    this.onAutoAssembleChanged(this.autoAssemble);\r\n    this.setState({});\r\n  }\r\n\r\n  assembleClick() {\r\n    this.onAssemble();\r\n  }\r\n  \r\n  resetClick() {\r\n    this.onReset();\r\n  }\r\n  \r\n  stopClick() {\r\n    this.onPause();\r\n  }\r\n  \r\n  runClick() {\r\n    this.onRun();\r\n  }\r\n  \r\n  stepClick() {\r\n    this.onStep();\r\n  }\r\n\r\n  getAutoAssemble() {\r\n    return this.autoAssemble;\r\n  }\r\n\r\n  render() { \r\n    return (\r\n      <div className={`unselectable ${styles.container}`}>\r\n        <div className={styles.title}>Control</div>\r\n\r\n        <div className={styles.content}>\r\n          <div className={styles.cycleArea}>\r\n            <div className={styles.cycleLabel}>Cycle:</div>\r\n            <div>{this.cycles}</div>\r\n          </div>\r\n          \r\n          <div>\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={this.autoAssemble}\r\n              onChange={this.autoAssembleChanged.bind(this)}\r\n            /><span style={{margin: '0px 0px 0px 5px'}}>Auto-assemble</span>\r\n          </div>\r\n\r\n          <div className={styles.btnList}>\r\n            <div className={styles.btn} onClick={this.assembleClick.bind(this)}>\r\n              <div className={styles.btnLaterals}></div>\r\n              <AssembleIcon className=\"MuiSvgIcon-root\" />\r\n              <div>Assemble</div>\r\n              <div className={styles.btnLaterals}></div>\r\n            </div>\r\n            <div className={styles.btn} onClick={this.runClick.bind(this)}>\r\n              <div className={styles.btnLaterals}></div>\r\n              <PlayCircleFilledIcon />\r\n              <div>Run</div>\r\n              <div className={styles.btnLaterals}></div>\r\n            </div>\r\n            <div className={styles.btn} onClick={this.stopClick.bind(this)}>\r\n              <div className={styles.btnLaterals}></div>\r\n              <PauseCircleFilledIcon />\r\n              <div>Pause</div>\r\n              <div className={styles.btnLaterals}></div>\r\n            </div>\r\n            <div className={styles.btn} onClick={this.stepClick.bind(this)}>\r\n              <div className={styles.btnLaterals}></div>\r\n              <StepIcon className=\"MuiSvgIcon-root\" />\r\n              <div>Step</div>\r\n              <div className={styles.btnLaterals}></div>\r\n            </div>\r\n            <div className={styles.btn} onClick={this.resetClick.bind(this)}>\r\n              <div className={styles.btnLaterals}></div>\r\n              <ResetIcon className=\"MuiSvgIcon-root\" />\r\n              <div>Reset</div>\r\n              <div className={styles.btnLaterals}></div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className={styles.delayLabel}>Delay (ms):</div>\r\n          <input\r\n            className={styles.delayInput}\r\n            type='number'\r\n            value={this.stepInterval}\r\n            onChange={this.stepIntervalChanged.bind(this)}\r\n            onKeyUp={this.stepIntervalChanged.bind(this)}\r\n            min=\"0\"\r\n            max=\"1000\" />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n \r\nexport default Control;","import { Component } from \"react\";\r\nimport Editor from \"@monaco-editor/react\";\r\nimport styles from './Assembled.module.css';\r\n\r\nconst GUTTER_GLYPH_MARGIN = 2;\r\n\r\nclass Assembled extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    \r\n    this.breakpointDecorations = {};\r\n    this.pcBreakpoints = new Set();\r\n    this.curLineRunningDecorationId = null;\r\n    this.curLineRunningDecoration = null;\r\n    this.monaco = null;\r\n    this.editor = null;\r\n\r\n    this.state = {  };\r\n  }\r\n\r\n  hasBreakpoint(pc) {\r\n    return this.pcBreakpoints.has(pc);\r\n  }\r\n\r\n  toggleBreakpoint(pc) {\r\n    if (this.pcBreakpoints.has(pc)) {\r\n      this.removeBreakpoint(pc);\r\n    } else {\r\n      this.setBreakpoint(pc);\r\n    }\r\n  }\r\n  \r\n  setBreakpoint(pc) {\r\n    if (this.editor == null) return;\r\n    if (this.pcBreakpoints.has(pc)) return;\r\n\r\n    let lineNumber = pc / 2 + 1;    \r\n    let lineCount = this.editor.getModel().getLineCount();\r\n    if (lineNumber <= 0 || lineNumber > lineCount) return;\r\n\r\n    this.pcBreakpoints.add(pc);\r\n    let bpDec = this.editor.deltaDecorations([], [\r\n      {\r\n        range: new this.monaco.Range(lineNumber, 1, lineNumber, 1),\r\n        options: {\r\n          isWholeLine: false,\r\n          glyphMarginClassName: styles.breakpoint,\r\n        },\r\n      },\r\n    ]);\r\n    this.breakpointDecorations[pc] = bpDec;\r\n  }\r\n\r\n  removeBreakpoint(pc) {\r\n    if (this.editor == null) return;\r\n    if (!this.pcBreakpoints.has(pc)) return;\r\n\r\n    this.pcBreakpoints.delete(pc);\r\n    let bpDec = this.breakpointDecorations[pc];\r\n    delete this.breakpointDecorations[pc];\r\n    this.editor.deltaDecorations(bpDec, []);\r\n  }\r\n\r\n  removeAllBreakpoints() {\r\n    for (let pc of this.pcBreakpoints) this.removeBreakpoint(pc);\r\n  }\r\n\r\n  setBreakpoints(pcs) {\r\n    this.removeAllBreakpoints();\r\n    for (let pc of pcs) this.setBreakpoint(pc);\r\n  }\r\n\r\n  setAssembled(text) {\r\n    if (this.editor == null) return;\r\n    if (typeof text !== 'string') throw new Error('Text isnt string');\r\n    \r\n    let linesCount = text.split('\\n').length;\r\n    let newBreakpointPCs = Array.from(this.pcBreakpoints).filter(pc => pc / 2 < linesCount);\r\n    this.editor.setValue(text);\r\n    this.setBreakpoints(newBreakpointPCs);\r\n    this.setCurrentPC(0);\r\n  }\r\n\r\n  setCurrentPC(pc) {\r\n    if (this.editor == null) return;\r\n    \r\n    let lineNumber = pc / 2 + 1;\r\n    let lineCount = this.editor.getModel().getLineCount();\r\n    if (lineNumber <= 0 || lineNumber > lineCount) {\r\n      this.curLineRunningDecoration = [];\r\n    } else {\r\n      this.curLineRunningDecoration = [\r\n        {\r\n          range: new this.monaco.Range(lineNumber, 1, lineNumber, 1),\r\n          options: {\r\n            isWholeLine: true,\r\n            className: styles.currentLineRunning,\r\n          }\r\n        }\r\n      ];\r\n      this.editor.revealLine(lineNumber);\r\n    }\r\n\r\n    let oldDec = this.curLineRunningDecorationId ? this.curLineRunningDecorationId : [];\r\n    this.curLineRunningDecorationId = this.editor.deltaDecorations(oldDec, this.curLineRunningDecoration);\r\n  }\r\n\r\n\tonEditorMount(editor, monaco) {\r\n\t\tthis.editor = editor;\r\n    this.monaco = monaco;\r\n\r\n\t\tlet self = this;\r\n\t\tthis.editor.updateOptions({\r\n\t\t\twordBasedSuggestions: false,\r\n\t\t\tautomaticLayout: true,\r\n\t\t\tlineDecorationsWidth: 0,\r\n\t\t\tglyphMargin: true,\r\n\t\t\tminimap: {\r\n\t\t\t\tenabled: false,\r\n\t\t\t},\r\n\t\t\tlineNumbers: (n) => ((n-1)*2).toString(16).padStart(4, '0'),\r\n\t\t\treadOnly: true,\r\n\t\t});\r\n\t\t\r\n\t\tthis.editor.onMouseDown((e) => {\r\n\t\t\tlet { target: { type, position: { lineNumber } } } = e;\r\n\t\t\tif (type !== GUTTER_GLYPH_MARGIN) return;\r\n\t\t\tlet pc = (lineNumber - 1) * 2;\r\n\t\t\tself.toggleBreakpoint(pc);\r\n\t\t});\r\n\t}\r\n\r\n  render() { \r\n    return (\r\n      <div className={styles.container}>\r\n        <div className={styles.title}>Disassembly</div>\r\n        <Editor\r\n          className={styles.editor}\r\n          language='vikingAsm'\r\n          theme='vikinAsmTheme'\r\n          onMount={this.onEditorMount.bind(this)}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n \r\nexport default Assembled;","import React, { Component, createRef } from \"react\";\r\nimport { useResizeDetector } from \"react-resize-detector\";\r\nimport styles from './MemoryViewer.module.css'\r\n\r\nclass MemoryViewer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    if (!props.memory) throw new Error('props.memory null');\r\n\r\n    this.memory = props.memory;\r\n\r\n    this.tbodyRef = createRef();\r\n    this.memoryScrollRef = createRef();\r\n    this.memoryScrollAuxRef = createRef();\r\n    this.memoryAreaRef = createRef();\r\n\r\n    this.columns = 8;\r\n    this.rowsToShow = 32;\r\n    this.rows = 0;\r\n    this.dataItemBytes = 2;\r\n    this.scrollHeight = 0;\r\n    this.scrollTop = 0;\r\n    this.rowOffset = 0;\r\n    this.wordHighlightContexts = {};\r\n\r\n    this.state = {  }\r\n  }\r\n\r\n  componentDidMount() {\r\n    \r\n    // Request data count\r\n    let dataCount = null;\r\n    while(dataCount == null) dataCount = this.getDataCount();\r\n    this.rows = dataCount / this.columns / this.dataItemBytes;\r\n\r\n    // Setup scroll\r\n    this.scrollHeight = this.rows;\r\n    this.setScrollHeight(this.scrollHeight);\r\n\r\n    // Get initial data\r\n    let data = this.getData();\r\n    this.recreateTable(data);\r\n\r\n    // scroll logic\r\n    this.memoryAreaRef.current.onwheel = (e) => {\r\n      this.memoryScrollRef.current.scrollTop += e.deltaY > 0 ? 1 : -1;\r\n      e.preventDefault();\r\n    }\r\n    this.memoryScrollRef.current.onscroll = async (e) => {\r\n      this.scrollTop = this.memoryScrollRef.current.scrollTop;\r\n      this.rowOffset = Math.floor((this.rows - this.rowsToShow) * (this.scrollTop / (this.scrollHeight - this.memoryScrollRef.current.getBoundingClientRect().height)));\r\n      let data = this.getData();\r\n      this.recreateTable(data);\r\n      this.wordHighlightContexts = {};\r\n      e.preventDefault();\r\n    }\r\n\r\n    // Memory Handlers\r\n\r\n    this.onResetHandler = this.reset.bind(this);\r\n\r\n    this.onStorageWriteByteHandler = (address, byte) => {\r\n      if (address >= this.dataOffset && address < this.dataOffset + this.dataCount) {\r\n        this.updateByteAt(address, byte);\r\n      }\r\n    };\r\n    \r\n    this.onStorageWriteWordHandler = (address, word) => {\r\n      if (address >= this.dataOffset && address < this.dataOffset + this.dataCount) {\r\n        this.updateByteAt(address, (word >> 8) & 0xFF);\r\n        this.updateByteAt(address + 1, word & 0xFF);\r\n      }\r\n    };\r\n    \r\n    this.memory.on('reset', this.onResetHandler);\r\n    this.memory.on('storage write byte', this.onStorageWriteByteHandler);\r\n    this.memory.on('storage write word', this.onStorageWriteWordHandler);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.memory.off('reset', this.onResetHandler);\r\n    this.memory.off('storage write byte', this.onStorageWriteByteHandler);\r\n    this.memory.off('storage write word', this.onStorageWriteWordHandler);\r\n  }\r\n\r\n  updateByteAt(address, byte) {\r\n    let tbyteDiv = this.getByteElem(address);\r\n    tbyteDiv.textContent = byte.toString(16).padStart(2, '0');\r\n    this.highlightByte(address, tbyteDiv);\r\n  }\r\n    \r\n  getByteElem(address) {\r\n    let item = Math.floor(address / this.dataItemBytes);\r\n    let offset = address % this.dataItemBytes;\r\n\r\n    let column = item % this.columns;\r\n    let row = Math.floor(item / this.columns) - this.rowOffset;\r\n    \r\n    let tRow = this.tbodyRef.current.childNodes[row+1];\r\n    let tItem = tRow.childNodes[column+1];\r\n    let tbyteDiv = tItem.childNodes[offset];\r\n    return tbyteDiv;\r\n  }\r\n\r\n  highlightByte(address, elem) {\r\n    let ctx = this.wordHighlightContexts[address];\r\n    if (ctx) {\r\n      ctx.value = 1;\r\n    } else {\r\n      ctx = { value: 1 };\r\n      this.wordHighlightContexts[address] = ctx;\r\n\r\n      let id = setInterval(() => {\r\n        if (ctx.value <= 0) {\r\n          elem.style['background-color'] = 'rgba(255,0,0,0)';\r\n          clearInterval(id);\r\n          delete this.wordHighlightContexts[address];\r\n        } else {\r\n          elem.style['background-color'] = 'rgba(255,0,0,' + ctx.value + ')';\r\n          ctx.value -= 0.05;\r\n        }\r\n      }, 50);\r\n    }\r\n  }\r\n\r\n  setScrollHeight(height) {\r\n    this.memoryScrollAuxRef.current.style.height = height + 'px';\r\n  }\r\n  \r\n  handleHeight(height) {\r\n    if (this.tbodyRef.current === null) return;\r\n    if (this.tbodyRef.current.childNodes.length === 0) return;\r\n    let firstRow = this.tbodyRef.current.childNodes[0];\r\n    let rowHeight = firstRow.getBoundingClientRect().height;\r\n    let newRowsToShow = Math.floor(height / rowHeight) - 1;\r\n    if (newRowsToShow <= 0) return;\r\n    if (this.rowsToShow === newRowsToShow) return;\r\n    this.rowsToShow = newRowsToShow;\r\n    this.recreateTable(this.getData());\r\n  }\r\n\r\n  recreateTable(data) {\r\n    if (this.tbodyRef.current == null) return;\r\n\r\n    let rowsCount = Math.ceil(data.length / this.columns);\r\n    \r\n    let html = '';\r\n    html += '<tr>';\r\n    html += '<td>';\r\n    html += 'X';\r\n    html += '</td>';\r\n    for (let x = 0; x < this.columns * this.dataItemBytes; x += this.dataItemBytes) {\r\n      html += '<td class=\"' + styles.memoryColumnNumber + '\">';\r\n      html += x.toString(16).padStart(4, '0');\r\n      html += '</td>';\r\n    }\r\n    html += '</tr>';\r\n    \r\n    let _x = 0;\r\n    for (let y = 0; y < rowsCount; y++) {\r\n      html += '<tr>';\r\n      html += '<td class=\"' + styles.memoryRowNumber + '\">';\r\n      html += (this.rowOffset * this.dataItemBytes * this.columns + y * this.dataItemBytes * this.columns).toString(16).padStart(4, '0');\r\n      html += '</td>';\r\n      \r\n      for (let x = 0; x < this.columns; x++) {\r\n        let item = data[y * this.columns + x];\r\n        let memDataHtml = '';\r\n        for (let i = 0; i < this.dataItemBytes; i++) {\r\n          let byte = item & 0xFF;\r\n          item >>= 8;\r\n          memDataHtml = '<div style=\"display:inline\">' + byte.toString(16).padStart(2, '0') + '</div>' + memDataHtml;\r\n        }\r\n        html += '<td class=\"' + styles.memoryData + '\">' + memDataHtml + '</td>';\r\n      }\r\n      html += '</tr>';\r\n      if (_x === this.columns) {\r\n          _x = 0;\r\n      }\r\n    }\r\n\r\n    this.tbodyRef.current.innerHTML = html;\r\n  }\r\n\r\n  reset() {\r\n    for (let i = this.dataOffset; i < this.dataOffset + this.dataCount; i++) {\r\n      let tbyteDiv = this.getByteElem(i);\r\n      tbyteDiv.textContent = '00';\r\n    }\r\n  }\r\n\r\n  getDataCount() {\r\n    return this.memory.getMemoryRegions().io;\r\n  }\r\n\r\n  getData() {\r\n    this.dataOffset = this.rowOffset * this.columns * 2;\r\n    this.dataCount = this.columns * this.rowsToShow * 2;\r\n    let data = this.memory.getWordsFromRange(this.dataOffset, this.dataOffset + this.dataCount);\r\n    return data;\r\n  }\r\n\r\n  render() { \r\n    const MemoryArea = () => {\r\n      const { height, ref } = useResizeDetector();\r\n      return (\r\n        <div ref={ref} className={styles.memoryAreaContainer}>\r\n          {this.handleHeight(height)}\r\n          <table className={styles.memoryArea} ref={this.memoryAreaRef}>\r\n            <tbody ref={this.tbodyRef}></tbody>\r\n          </table>\r\n        </div>\r\n      );\r\n    };\r\n    return (\r\n      <div className={styles.container}>\r\n        <div className={styles.content}>\r\n          <div className={styles.memoryScroll} ref={this.memoryScrollRef}><div ref={this.memoryScrollAuxRef}></div></div>\r\n          <MemoryArea />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n \r\nexport default MemoryViewer;","import { EventEmitter } from 'events';\r\n\r\nexport default class Port extends EventEmitter {\r\n  constructor(name, readHandler, writeHandler, device) {\r\n    super();\r\n    this.name = name;\r\n    this.waitingRead = false;\r\n    this.waitingWrite = false;\r\n    this.readHandler = readHandler ? readHandler : ()=>0;\r\n    this.writeHandler = writeHandler ? writeHandler : ()=>null;\r\n    this.device = device;\r\n  }\r\n\r\n  reset() {\r\n    this.waitingRead = false;\r\n    this.waitingWrite = false;\r\n  }\r\n\r\n  read(simulation) {\r\n    return this.readHandler(simulation);\r\n  }\r\n  \r\n  write(simulation, value) {\r\n    return this.writeHandler(simulation, value);\r\n  }\r\n\r\n  endReadWaiting() {\r\n    this.waitingRead = false;\r\n    this.emit('read wait end');\r\n  }\r\n  \r\n  endWriteWaiting() {\r\n    this.waitingWrite = false;\r\n    this.emit('write wait end');\r\n  }\r\n}","import { EventEmitter } from 'events';\r\n\r\nexport default class Device extends EventEmitter {\r\n  \r\n  constructor(name) {\r\n    super();\r\n    this.name = name;\r\n    this._waiting = false;\r\n  }\r\n\r\n  get waiting() { return this._waiting }\r\n  set waiting(value) {\r\n    if (value === this._waiting) return;\r\n    this._waiting = value;\r\n    this.emit('waiting', value);\r\n  }\r\n\r\n  reset() {\r\n\r\n  }\r\n\r\n  getPorts() {\r\n    return [];\r\n  }\r\n}","import utils from '../../../../../utils';\r\nimport Port from '../port';\r\nimport Device from './device';\r\n\r\nexport default class ConsoleDevice extends Device {\r\n  constructor() {\r\n    super('console');\r\n    \r\n    this.inputBytes = [];\r\n\r\n    this.readCharPort = new Port('readc', this.readChar.bind(this), null, this);\r\n    this.readIntPort = new Port('readi', this.readInt.bind(this), null, this);\r\n    this.writeCharPort = new Port('writec', null, this.writeChar.bind(this), this);\r\n    this.writeIntPort = new Port('writei', null, this.writeInt.bind(this), this);\r\n\r\n    this.ports = [ this.writeCharPort, this.writeIntPort, this.readCharPort, this.readIntPort ];\r\n  }\r\n\r\n  get waiting() { return this._waiting }\r\n  set waiting(value) {\r\n    if (value === this._waiting) return;\r\n    this._waiting = value;\r\n    this.emit('waiting', value);\r\n  }\r\n\r\n  readInt(simulation) {\r\n    if (this.inputBytes.length === 0) {\r\n      this.readIntPort.waitingRead = true;\r\n      this.waiting = true;\r\n      return;\r\n    }\r\n    let zeroCharCode = '0'.charCodeAt(0);\r\n    let nineCharCode = '9'.charCodeAt(0);\r\n    let minusCharCode = '-'.charCodeAt(0);\r\n\r\n    function isMinusChar(c) {\r\n      return minusCharCode === c;\r\n    }\r\n\r\n    function isNumberChar(c) {\r\n      return c >= zeroCharCode && c <= nineCharCode;\r\n    }\r\n\r\n    function charToNumber(c) {\r\n      return c - zeroCharCode;\r\n    }\r\n\r\n    let int = 0;\r\n    let firstC = this.nextByte();\r\n    if (isNumberChar(firstC) || isMinusChar(firstC)) {\r\n      if (isNumberChar(firstC)) {\r\n        int = charToNumber(firstC);\r\n      }\r\n\r\n      let length = this.inputBytes.length;\r\n      for (let i = 0; i < length; i++) {\r\n        let c = this.nextByte();\r\n        if (isNumberChar(c)) {\r\n          let number = charToNumber(c);\r\n          int *= 10;\r\n          int += number;\r\n        } else {\r\n          if (c === 0) {\r\n            this.nextByte();\r\n          }\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (isMinusChar(firstC)) {\r\n        int *= -1;\r\n      }\r\n    } else {\r\n      // lê os bytes do inputs até acabar ou até o byteWidth da arquitetura\r\n      // se o input tiver 1 byte e o byteWidth da arquitetura for 2 bytes, 16 bits, vai ler apenas 1 byte\r\n      // se o input tiver 5 bytes e o byteWidth da arquitetura for 2 bytes, vai ler apenas 2 bytes\r\n      int = firstC;\r\n      let length = Math.min(simulation.architecture.getByteWidth() - 1, this.inputBytes.length);\r\n      for (let i = 0; i < length; i++) {\r\n        let c = this.nextByte();\r\n        int = (int << 8) | c;\r\n      }\r\n    }\r\n    \r\n    return int;\r\n  }\r\n  \r\n  readChar(simulation) {\r\n    if (this.inputBytes.length === 0) {\r\n      this.readCharPort.waitingRead = true;\r\n      this.waiting = true;\r\n      return;\r\n    }\r\n    return this.nextByte();\r\n  }\r\n\r\n  writeInt(simulation, value) {\r\n    this.emit('write int', utils.unsignedToSigned(value));\r\n  }\r\n  \r\n  writeChar(simulation, value) {\r\n    if (value === 0) return;\r\n    this.emit('write char', String.fromCharCode(value));\r\n  }\r\n\r\n  reset() {\r\n    this.inputBytes.length = 0;\r\n    this.emit('input buffer', this.inputBytes);\r\n    this.waiting = false;\r\n  }\r\n\r\n  nextByte() {\r\n    let byte = this.inputBytes.shift();\r\n    this.emit('input buffer', this.inputBytes);\r\n    return byte;\r\n  }\r\n  \r\n  addBytes(bytes) {\r\n    for (let byte of bytes) this.inputBytes.push(byte & 0xFF);\r\n    this.emit('input buffer', this.inputBytes);\r\n    if (this.readCharPort.waitingRead) {\r\n      this.readCharPort.endReadWaiting();\r\n      this.waiting = false;\r\n    }\r\n    if (this.readIntPort.waitingRead) {\r\n      this.readIntPort.endReadWaiting();\r\n      this.waiting = false;\r\n    }\r\n  }\r\n\r\n  getPorts() {\r\n    return this.ports;\r\n  }\r\n}","import Port from '../port';\r\nimport Device from './device';\r\n\r\nexport default class CanvasDevice extends Device {\r\n  constructor() {\r\n    super('canvas');\r\n\r\n    this.x = 0;\r\n    this.y = 0;\r\n    this.p1X = 0;\r\n    this.p1Y = 0;\r\n    this.p2X = 0;\r\n    this.p2Y = 0;\r\n\r\n    this.setXPort = new Port('setX', null, this.setX.bind(this), this);\r\n    this.setYPort = new Port('setY', null, this.setY.bind(this), this);\r\n    this.drawPixelPort = new Port('drawPixel', null, this.drawPixel.bind(this), this);\r\n    this.clearPixelPort = new Port('clearPixel', null, this.clearPixel.bind(this), this);\r\n    this.setP1Port = new Port('setP1', null, this.setP1.bind(this), this);\r\n    this.setP2Port = new Port('setP2', null, this.setP2.bind(this), this);\r\n    this.drawLinePort = new Port('drawLine', null, this.drawLine.bind(this), this);\r\n    this.clearLinePort = new Port('clearLine', null, this.clearLine.bind(this), this);\r\n    this.clearPort = new Port('clear', null, this.clear.bind(this), this);\r\n\r\n    this.ports = [\r\n      this.setXPort,\r\n      this.setYPort,\r\n      this.drawPixelPort,\r\n      this.clearPixelPort,\r\n      this.setP1Port,\r\n      this.setP2Port,\r\n      this.drawLinePort,\r\n      this.clearLinePort,\r\n      this.clearPort,\r\n    ];\r\n  }\r\n\r\n  setX(simulation, value) {\r\n    this.x = value;\r\n  }\r\n  \r\n  setY(simulation, value) {\r\n    this.y = value;\r\n  }\r\n\r\n  drawPixel(simulation, value) {\r\n    this.emit('draw pixel', this.x, this.y);\r\n  }\r\n  \r\n  clearPixel(simulation, value) {\r\n    this.emit('clear pixel', this.x, this.y);\r\n  }\r\n\r\n  setP1(simulation, value) {\r\n    this.p1X = this.x;\r\n    this.p1Y = this.y;\r\n  }\r\n  \r\n  setP2(simulation, value) {\r\n    this.p2X = this.x;\r\n    this.p2Y = this.y;\r\n  }\r\n\r\n  drawLine(simulation, value) {\r\n    this.emit('draw line', this.p1X, this.p1Y, this.p2X, this.p2Y);\r\n  }\r\n  \r\n  clearLine(simulation, value) {\r\n    this.emit('clear line', this.p1X, this.p1Y, this.p2X, this.p2Y);\r\n  }\r\n\r\n  clear(simulation, value) {\r\n    this.emit('clear');\r\n  }\r\n  \r\n  reset() {\r\n    this.emit('reset');\r\n  }\r\n\r\n  getPorts() {\r\n    return this.ports;\r\n  }\r\n}","import { Component, createRef } from 'react';\r\nimport styles from './CanvasViewer.module.css';\r\n\r\nconst fillColor = '#111111'\r\nconst clearColor = '#dddddd'\r\n\r\nclass CanvasViewer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    if (!props.canvasDevice) throw new Error('props.canvasDevice null');\r\n\r\n    this.canvasDevice = props.canvasDevice;\r\n    \r\n    this.canvasRef = createRef();\r\n\r\n    this.state = {  }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.ctx = this.canvasRef.current.getContext('2d');\r\n    this.ctx.imageSmoothingEnabled = false;\r\n\r\n    this.width = this.canvasRef.current.width;\r\n    this.height = this.canvasRef.current.width;\r\n\r\n    this.resetHandler = this.reset.bind(this);\r\n    \r\n    this.clearHandler = () => {\r\n      this.ctx.fillStyle = clearColor;\r\n      this.ctx.fillRect(0, 0, this.width, this.height);\r\n    };\r\n\r\n    this.drawPixelHandler = (x, y) => {\r\n      this.ctx.fillStyle = fillColor;\r\n      this.ctx.fillRect(x, y, 1, 1);\r\n    }\r\n    \r\n    this.clearPixelHandler = (x, y) => {\r\n      this.ctx.fillStyle = clearColor;\r\n      this.ctx.fillRect(x, y, 1, 1);\r\n    }\r\n    \r\n    this.drawLineHandler = (x0, y0, x1, y1) => {\r\n      this.ctx.fillStyle = fillColor;\r\n      lineAlg(x0, y0, x1, y1, (x, y)=>this.ctx.fillRect(x, y, 1, 1));\r\n    }\r\n    \r\n    this.clearLineHandler = (x0, y0, x1, y1) => {\r\n      this.ctx.fillStyle = clearColor;\r\n      lineAlg(x0, y0, x1, y1, (x, y)=>this.ctx.fillRect(x, y, 1, 1));\r\n    }\r\n\r\n    function lineAlg(x0, y0, x1, y1, onpixel) {\r\n      let dx = Math.abs(x1 - x0), sx = x0 < x1 ? 1 : -1;\r\n      let dy = Math.abs(y1 - y0), sy = y0 < y1 ? 1 : -1; \r\n      let err = (dx>dy ? dx : -dy)/2;        \r\n      while (true) {\r\n        onpixel(x0, y0);\r\n        if (x0 === x1 && y0 === y1) break;\r\n        let e2 = err;\r\n        if (e2 > -dx) { err -= dy; x0 += sx; }\r\n        if (e2 < dy) { err += dx; y0 += sy; }\r\n      }\r\n    }\r\n\r\n    this.canvasDevice.on('draw pixel', this.drawPixelHandler);\r\n    this.canvasDevice.on('clear pixel', this.clearPixelHandler);\r\n    this.canvasDevice.on('draw line', this.drawLineHandler);\r\n    this.canvasDevice.on('clear line', this.clearLineHandler);\r\n    this.canvasDevice.on('reset', this.resetHandler);\r\n    this.canvasDevice.on('clear', this.clearHandler);\r\n\r\n    this.reset();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.canvasDevice.off('draw pixel', this.drawPixelHandler);\r\n    this.canvasDevice.off('clear pixel', this.clearPixelHandler);\r\n    this.canvasDevice.off('draw line', this.drawLineHandler);\r\n    this.canvasDevice.off('clear line', this.clearLineHandler);\r\n    this.canvasDevice.off('reset', this.resetHandler);\r\n    this.canvasDevice.off('clear', this.clearHandler);\r\n  }\r\n\r\n  reset() {\r\n    this.ctx.fillStyle = clearColor;\r\n    this.ctx.fillRect(0, 0, this.width, this.height);\r\n  }\r\n\r\n  render() { \r\n    return (\r\n      <div className={styles.container}>\r\n        <div className={styles.titleContainer}>Canvas<div className={styles.new}>new</div></div>\r\n        <div className={styles.canvasContainer}>\r\n          <canvas width=\"16\" height=\"16\" className={styles.canvas} ref={this.canvasRef} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n \r\nexport default CanvasViewer;","import styles from './Simulator.module.css'\r\nimport { Component, createRef } from 'react';\r\nimport Registers from '../registers/Registers.module';\r\nimport Memory from '../../business/asm/simulator/memory';\r\nimport architectureManager from '../../business/asm/architectureManager';\r\nimport RegisterBank from '../../business/asm/simulator/registerBank';\r\nimport Simulation from '../../business/asm/simulator/simulation';\r\nimport pseudoManager from '../../business/asm/pseudoInstructionConversions/pseudoManager';\r\nimport PseudoConverter from '../../business/asm/pseudoInstructionConversions/pseudoConverter';\r\nimport Assembler from '../../business/asm/assembler/assembler';\r\nimport Disassembler from '../../business/asm/disassembler/disassembler';\r\n// eslint-disable-next-line\r\nimport asm from '../../business/index';\r\nimport Program from '../program/Program.module';\r\nimport SymbolTable from '../symbolTable/SymbolTable.module';\r\nimport Control from '../control/Control.module';\r\nimport Console from '../console/Console.module';\r\nimport Assembled from '../assembled/Assembled.module';\r\nimport MemoryViewer from '../memoryViewer/MemoryViewer.module';\r\nimport utils from '../../utils';\r\nimport ConsoleDevice from '../../business/asm/simulator/io/devices/consoleDevice';\r\nimport CanvasDevice from '../../business/asm/simulator/io/devices/canvasDevice';\r\nimport CanvasViewer from '../canvasViewer/CanvasViewer.module';\r\nimport Home from '../home/Home.module';\r\n\r\nconst defaultProgramData =\r\n`main\r\n\tldi\tr4, str\r\nloop\r\n\tldb\tr2, r4\r\n\tstw\tr2, 0xf000 // Write char IO\r\n\tadd\tr4, 1\r\n\tbnz\tr2, loop\r\n\thcf\r\n\r\nstr\t\"hello world!\"`;\r\n\r\nclass Simulator extends Component {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.programRef = createRef();\r\n\t\tthis.assembledRef = createRef();\r\n\t\tthis.symbolTableRef = createRef();\r\n\t\tthis.registersRef = createRef();\r\n\t\tthis.controlRef = createRef();\r\n\t\tthis.consoleRef = createRef();\r\n\r\n\t\tthis.curArchitecture = architectureManager.getViking16Arch();\r\n\t\tthis.memory = Memory.createFromArchitecture(this.curArchitecture);\r\n\t\tthis.registerBank = RegisterBank.createFromArchitecture(this.curArchitecture);\r\n\t\tthis.simulation = new Simulation(this.curArchitecture, this.memory, this.registerBank);\r\n\t\t\r\n\t\tthis.consoleDevice = new ConsoleDevice();\r\n\t\tthis.canvasDevice = new CanvasDevice();\r\n\t\tthis.simulation.registerPorts(this.consoleDevice.getPorts());\r\n\t\tthis.simulation.registerPorts(this.canvasDevice.getPorts());\r\n\r\n\t\tthis.state = { };\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.simulationOnRunErrorHandler = (error) => {\r\n\t\t\tthis.consoleRef.current.writeLine('[Error | Simulation] ' + error.message, 2);\r\n\t\t};\r\n\t\t\r\n\t\tthis.simulationOnRunEndedHandler = () => {\r\n\t\t\tthis.consoleRef.current.writeLine('[Info | Simulation] run ended.', 1);\r\n\t\t};\r\n\t\t\r\n\t\tthis.simulationOnBreakpointHandler = (pc) => {\r\n\t\t\tthis.consoleRef.current.writeLine('[Info | Simulation] breakpoint at PC=' + pc.toString(16), 1);\r\n\t\t};\r\n\t\t\r\n    this.simulationPcUpdateHandler = utils.callLimiter((pc) => {\r\n      this.assembledRef.current.setCurrentPC(pc);\r\n\t\t\tthis.registersRef.current.setPC(pc);\r\n    }, 20);\r\n\t\t\r\n    this.simulationCyclesUpdateHandler = utils.callLimiter((cycles) => {\r\n      this.controlRef.current.setCycles(cycles);\r\n    }, 50);\r\n\t\t\r\n    this.simulationResetHandler = () => {\r\n      this.consoleDevice.reset();\r\n\t\t\tthis.canvasDevice.reset();\r\n    };\r\n\t\t\r\n    this.simulation.setBreakpointHandler((_, pc) => {\r\n      return this.assembledRef.current.hasBreakpoint(pc);\r\n    });\r\n\r\n\t\tthis.simulation.on('run error', this.simulationOnRunErrorHandler);\r\n\t\tthis.simulation.on('run ended', this.simulationOnRunEndedHandler);\r\n\t\tthis.simulation.on('breakpoint', this.simulationOnBreakpointHandler);\r\n    this.simulation.on('pc update', this.simulationPcUpdateHandler);\r\n    this.simulation.on('cycles update', this.simulationCyclesUpdateHandler);\r\n    this.simulation.on('reset', this.simulationResetHandler);\r\n\r\n\t\tthis.loadAsmCode();\r\n\r\n\t\tHome.instance.spawnWindow('MemView', 'Memory Viewer', 410, 450, <MemoryViewer memory={this.memory} />);\r\n\t}\r\n\r\n\tcomponentWillUnmount() {\r\n\t\tthis.simulation.off('run error', this.simulationOnRunErrorHandler);\r\n\t\tthis.simulation.off('run ended', this.simulationOnRunEndedHandler);\r\n\t\tthis.simulation.off('breakpoint', this.simulationOnBreakpointHandler);\r\n    this.simulation.off('pc update', this.simulationPcUpdateHandler);\r\n    this.simulation.off('cycles update', this.simulationCyclesUpdateHandler);\r\n    this.simulation.off('reset', this.simulationResetHandler);\r\n\t}\r\n\r\n\tloadAsmCode() {\r\n\t\tconsole.log('Load asm code');\r\n\t\tlet asmCode = localStorage.getItem('asmCode');\r\n\t\tif (asmCode) {\r\n\t\t\tthis.loadSaved();\r\n\t\t} else {\r\n\t\t\tthis.loadDefault();\r\n\t\t}\r\n\t}\r\n\r\n\tassemble() {\r\n\t\tlet programData = this.programRef.current.getText();\r\n\t\ttry {\r\n\t\t\tlet ioPortSymbolTable = this.simulation.getPortsSymbolTable();\r\n\r\n\t\t\tlet pseudoInstructions = pseudoManager.getPseudoInstructions();\r\n\t\t\tlet pseudoConverter = new PseudoConverter(pseudoInstructions);\r\n\r\n\t\t\tlet assembler = new Assembler(this.curArchitecture, programData, pseudoConverter);\r\n\t\t\tassembler.addExtraSymbolTable(ioPortSymbolTable);\r\n\t\t\tlet assemblerResult = assembler.assemble();\r\n\t\t\tthis.curAssembleResult = assemblerResult;\r\n\r\n\t\t\tlet disassembler = new Disassembler(this.curArchitecture);\r\n\t\t\tlet disassemblerResult = disassembler.disassemble(assemblerResult.rawObjectCode);\r\n\r\n\t\t\tlet { symbolTable } = assemblerResult;\r\n\t\t\tlet disassembly = disassemblerResult.map(x => ({value: x.value, pc: x.pc, code: x.code}) );\r\n\r\n\t\t\tlet result = { symbolTable, disassembly };\r\n\r\n\t\t\tthis.simulation.setRawObjCode(assemblerResult.rawObjectCode);\r\n\t\t\tthis.simulation.reset();\r\n\r\n\t\t\tthis.assembledRef.current.setAssembled(result.disassembly.map(x => x.value).join('\\n'));\r\n\t\t\tthis.symbolTableRef.current.setSymbolTable(symbolTable);\r\n\t\t\tthis.consoleRef.current.writeLine('[Info | Assembler] Successfully assembled', 1);\r\n\r\n\t\t\treturn result;\r\n\t\t} catch (exc) {\r\n\t\t\tconsole.error(exc);\r\n\t\t\tthis.consoleRef.current.writeLine('[Error | Assembler] ' + exc.message, 2);\r\n\t\t}\r\n\t}\r\n\t\r\n\tasync run() {\r\n\t\tif (this.simulation.isRunning()) return;\r\n\t\t\r\n\t\t// If simulation is already ended -> reset\r\n\t\tif (this.simulation.hasEnded()) {\r\n\t\t\tthis.simulation.reset();\r\n\t\t\tawait utils.sleep(100);\r\n\t\t}\r\n\r\n\t\t// If auto-assemble & program changed, assemble\r\n\t\tlet curText = this.programRef.current.getText();\r\n\t\tif (this.controlRef.current.getAutoAssemble()) {\r\n\t\t\tif (this.lastText !== curText) {\r\n\t\t\t\tif (!this.assemble()) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.lastText = curText;\r\n\t\t}\r\n\t\t\r\n\t\ttry {\r\n\t\t\tthis.simulation.run();\r\n\t\t} catch (exc) {\r\n\t\t\tthis.consoleRef.current.writeLine('[Error | Simulation] ' + exc.message, 2);\r\n\t\t}\r\n\t}\r\n\r\n\tpause() {\r\n\t\ttry {\r\n\t\t\tthis.simulation.stop();\r\n\t\t} catch (exc) {\r\n\t\t\tthis.consoleRef.current.writeLine('[Error | Simulation] ' + exc.message, 2);\r\n\t\t}\r\n\t}\r\n\t\r\n\tstep() {\r\n\t\ttry {\r\n\t\t\tthis.simulation.step();\r\n\t\t} catch (exc) {\r\n\t\t\tthis.consoleRef.current.writeLine('[Error | Simulation] ' + exc.message, 2);\r\n\t\t}\r\n\t}\r\n\t\r\n\treset() {\r\n\t\ttry {\r\n\t\t\tthis.simulation.reset();\r\n\t\t} catch (exc) {\r\n\t\t\tthis.consoleRef.current.writeLine('[Error | Simulation] ' + exc.message, 2);\r\n\t\t}\r\n\t}\r\n\r\n\tonStepIntervalChanged(stepInterval) {\r\n\t\tthis.simulation.setStepInterval(stepInterval);\r\n\t}\r\n\r\n\tonSymbolNameClick(symbol) {\r\n\t\tif (this.curAssembleResult == null) return;\r\n\t\tlet additionInfo = this.curAssembleResult.additionalInfos.find(x => x && x.parsed && x.parsed.symbol === symbol.symbolName);\r\n\t\tif (additionInfo == null) return;\r\n\t\tlet { lineNumber } = additionInfo;\r\n\t\tthis.programRef.current.highlightLine(lineNumber);\r\n\t}\r\n\t\r\n\tonSymbolValueClick(symbol) {\r\n\t\tthis.assembledRef.current.setCurrentPC(symbol.symbolValue);\r\n\t}\r\n\r\n\tsave(code) {\r\n\t\ttry {\r\n\t\t\tlocalStorage.setItem('asmCode', code);\r\n\t\t\treturn true;\r\n\t\t} catch (exc) {\r\n\t\t\tconsole.error(exc);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\tloadSaved() {\r\n\t\tlet asmCode = localStorage.getItem('asmCode');\r\n\t\tthis.programRef.current.setText(asmCode);\r\n\t}\r\n\r\n\tloadDefault() {\r\n\t\tthis.programRef.current.setText(defaultProgramData);\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst components = {\r\n\t\t\tsym: (\r\n\t\t\t\t<SymbolTable\r\n\t\t\t\t\tarchitecture={this.curArchitecture}\r\n\t\t\t\t\tonSymbolNameClick={this.onSymbolNameClick.bind(this)}\r\n\t\t\t\t\tonSymbolValueClick={this.onSymbolValueClick.bind(this)}\r\n\t\t\t\t\tref={this.symbolTableRef} />\r\n\t\t\t),\r\n\t\t\tprog: (\r\n\t\t\t\t<Program\r\n\t\t\t\t\tcurArchitecture={this.curArchitecture}\r\n\t\t\t\t\tportsSymbols={this.simulation.getPortsSymbolsList()}\r\n\t\t\t\t\tonSaveRequest={this.save.bind(this)}\r\n\t\t\t\t\tonLoadSavedRequest={this.loadSaved.bind(this)}\r\n\t\t\t\t\tonLoadDefaultRequest={this.loadDefault.bind(this)}\r\n\t\t\t\t\tref={this.programRef} />\r\n\t\t\t),\r\n\t\t\tasm: (\r\n\t\t\t\t<Assembled ref={this.assembledRef} />\r\n\t\t\t),\r\n\t\t\treg: (\r\n\t\t\t\t<Registers registerBank={this.registerBank} ref={this.registersRef} />\r\n\t\t\t),\r\n\t\t\tctr: (\r\n\t\t\t\t<Control\r\n\t\t\t\t\tonAssemble={this.assemble.bind(this)}\r\n\t\t\t\t\tonRun={this.run.bind(this)}\r\n\t\t\t\t\tonPause={this.pause.bind(this)}\r\n\t\t\t\t\tonStep={this.step.bind(this)}\r\n\t\t\t\t\tonReset={this.reset.bind(this)}\r\n\t\t\t\t\tonStepIntervalChanged={this.onStepIntervalChanged.bind(this)}\r\n\t\t\t\t\tref={this.controlRef} />\r\n\t\t\t),\r\n\t\t\tcon: (\r\n\t\t\t\t<Console consoleDevice={this.consoleDevice} ref={this.consoleRef} />\r\n\t\t\t),\r\n\t\t\tcan: (\r\n\t\t\t\t<CanvasViewer canvasDevice={this.canvasDevice} />\r\n\t\t\t),\r\n\t\t};\r\n\r\n\t\treturn (\r\n\t\t\t<div className={styles.container}>\r\n\t\t\t\t<div className={styles.top}>\r\n\t\t\t\t\t<div className={styles.programContainer}>{components.prog}</div>\r\n\t\t\t\t\t<div className={styles.assembledContainer}>{components.asm}</div>\r\n\t\t\t\t\t<div className={styles.symbolTableContainer}>{components.sym}</div>\r\n\t\t\t\t\t<div className={styles.registersControlArea}>{components.reg}{components.ctr}</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className={styles.bottom}>\r\n\t\t\t\t\t<div className={styles.consoleContainer}>{components.con}</div>\r\n\t\t\t\t\t<div className={styles.canvasContainer}>{components.can}</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Simulator;\r\n","import { Component, createRef } from \"react\";\r\nimport styles from './Window.module.css'\r\n\r\nclass Window extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.containerRef = createRef();\r\n\r\n    this.name = props.name || \"Window\";\r\n    this.description = props.description || \"This is a window!\";\r\n    this.props = props;\r\n\r\n    this.state = {\r\n      children: props.children,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.props.width) this.containerRef.current.style.width = this.props.width;\r\n    if (this.props.height) this.containerRef.current.style.height = this.props.height;\r\n  }\r\n  \r\n  render() { \r\n    return (\r\n      <div className={styles.container} ref={this.containerRef}>\r\n        <div className={`unselectable ${styles.header}`}>\r\n          <div className={styles.title}>{this.name}</div>-<div className={styles.description}>{this.description}</div>\r\n        </div>\r\n        <div className={styles.content}>\r\n          {this.state.children}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n \r\nexport default Window;","import styles from './Home.module.css'\r\nimport Simulator from \"../simulator/Simulator.module\";\r\nimport Window from '../window/Window.module';\r\nimport React, { Component, createRef } from 'react';\r\nclass Home extends Component {  \r\n  constructor(props) {\r\n    super(props);\r\n    Home.instance = this;\r\n    this.keyIndex = 0;\r\n    this.windowsContainerRef = createRef();\r\n    this.aboutRef = createRef();\r\n    this.windowObjs = [];\r\n    this.state = { };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.spawnWindow('Simulator', 'Viking CPU Simulator', 970, 710, <Simulator />);\r\n  }\r\n\r\n  closeAbout() {\r\n    this.aboutRef.current.remove();\r\n  }\r\n\r\n  spawnWindow(name, description, width, height, elem) {\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        let ref = createRef();\r\n        let window = <Window key={this.keyIndex++} name={name} description={description} width={width + 'px'} height={height + 'px'} ref={ref}>{elem}</Window>;\r\n        let winObj = {window, ref};\r\n        this.windowObjs.push(winObj);\r\n        this.setState({}, () => { resolve(winObj) });\r\n      } catch (exc) {\r\n        reject(exc);\r\n      }\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={styles.container}>\r\n        <div className={styles.windowsContainer} ref={this.windowsContainerRef}>\r\n          { this.windowObjs.map(x=>x.window) }\r\n        </div>\r\n        <div className={styles.aboutContainer} ref={this.aboutRef}>\r\n          <div>Developed by <a href=\"https://github.com/vanflux\">vanflux</a></div>\r\n          <div>Viking architecture by <a href=\"https://github.com/sjohann81\">sjohann81</a></div>\r\n          <div>Repo Link: <a href=\"https://github.com/vanflux/viking-sim-web\">viking-sim-web</a></div>\r\n          <button onClick={this.closeAbout.bind(this)}>Close This Pop-up</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n \r\nexport default Home;","import React, { Component } from 'react';\r\nimport { HashRouter, Route } from \"react-router-dom\";\r\nimport Home from '../home/Home.module';\r\nimport styles from './App.module.css';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n     <HashRouter basename='/'>\r\n      <div className={styles.container}>\r\n       <Route exact path=\"/\" component={Home} />\r\n      </div>\r\n     </HashRouter>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/app/App.module';\r\nimport './styles.css'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}