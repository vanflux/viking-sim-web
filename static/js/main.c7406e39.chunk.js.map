{"version":3,"sources":["business/asm/operand.js","business/asm/instruction.js","business/asm/operations/operationsManager.js","utils.js","components/control/Control.module.css","components/program/Program.module.css","components/memoryViewer/MemoryViewer.module.css","components/console/Console.module.css","components/registers/Registers.module.css","components/symbolTable/SymbolTable.module.css","components/assembled/Assembled.module.css","components/window/Window.module.css","business/asm/pseudoInstructionConversions/pseudoManager.js","business/asm/architectureManager.js","business/asm/architecture.js","business/asm/simulator/memory.js","business/asm/simulator/memoryStorage16.js","business/asm/simulator/registerBank.js","business/asm/pseudoInstructionConversions/pseudoConverter.js","business/asm/disassembler/disassembler.js","business/asm/assembler/instructionParser.js","business/asm/assembler/dataParser.js","business/asm/assembler/commentParser.js","business/asm/assembler/lineParser.js","business/asm/assembler/assembler.js","components/window/Window.module.js","components/home/Home.module.js","business/asm/asmErrors.js","business/asm/simulator/simulation.js","components/home/Home.module.css","components/simulator/Simulator.module.css","components/simulator/Simulator.module.js","components/registers/Registers.module.js","components/program/Program.module.js","components/symbolTable/SymbolTable.module.js","components/console/Console.module.js","components/assembled/Assembled.module.js","components/memoryViewer/MemoryViewer.module.js","components/app/App.module.css","assets/images/AssembleIcon.svg","assets/images/ResetIcon.svg","assets/images/StepIcon.svg","components/control/Control.module.js","business/asm/operations sync /basic/.+/.js$","business/asm/operations/basic/adc.js","business/asm/operations/basic/add.js","business/asm/operations/basic/and.js","business/asm/operations/basic/asr.js","business/asm/operations/basic/bez.js","business/asm/operations/basic/bnz.js","business/asm/operations/basic/ldb.js","business/asm/operations/basic/ldc.js","business/asm/operations/basic/ldr.js","business/asm/operations/basic/ldw.js","business/asm/operations/basic/lsr.js","business/asm/operations/basic/or.js","business/asm/operations/basic/ror.js","business/asm/operations/basic/sbc.js","business/asm/operations/basic/slt.js","business/asm/operations/basic/sltu.js","business/asm/operations/basic/stb.js","business/asm/operations/basic/stw.js","business/asm/operations/basic/sub.js","business/asm/operations/basic/xor.js","business/asm/operations sync /pseudo/.+/.js$","business/asm/operations/pseudo/hcf.js","business/asm/operations/pseudo/ldi.js","business/asm/operations/pseudo/lsl.js","business/asm/operations/pseudo/pop.js","business/asm/operations/pseudo/push.js","business/asm/pseudoInstructionConversions sync /pseudos/.+/.js$","business/asm/pseudoInstructionConversions/pseudos/_large_immediate.js","business/asm/pseudoInstructionConversions/pseudos/asr.js","business/asm/pseudoInstructionConversions/pseudos/bez.js","business/asm/pseudoInstructionConversions/pseudos/bnz.js","business/asm/pseudoInstructionConversions/pseudos/hcf.js","business/asm/pseudoInstructionConversions/pseudos/ldb.js","business/asm/pseudoInstructionConversions/pseudos/ldi.js","business/asm/pseudoInstructionConversions/pseudos/ldw.js","business/asm/pseudoInstructionConversions/pseudos/lsl.js","business/asm/pseudoInstructionConversions/pseudos/lsr.js","business/asm/pseudoInstructionConversions/pseudos/pop.js","business/asm/pseudoInstructionConversions/pseudos/push.js","business/asm/pseudoInstructionConversions/pseudos/ror.js","business/asm/pseudoInstructionConversions/pseudos/stb.js","business/asm/pseudoInstructionConversions/pseudos/stw.js","components/app/App.module.js","index.js","business/asm/index.js"],"names":["Operand","value","type","this","byteRange","REGISTER","SYMBOL","LITERAL","Instruction","operation","operands","getType","isPseudo","TYPE_R","supportR","TYPE_I","supportI","length","architecture","Error","getName","opcode","getOpcode","finalCode","getRegisterCode","getValue","rst","immediate","utils","signedToUnsigned","simulation","rsa","rsb","executeR","executeI","map","operand","signedNumberToHex","join","code","rstCode","unsignedToSigned","getRegisterNameByCode","TypeError","operationsManager","getOperationByOpcode","rsaCode","rsbCode","basicOps","pseudoOps","basicOpsByOpcode","basicOpsByName","pseudoOpsByName","basicOpsNames","pseudoOpsNames","opsNames","getOperationByName","name","setup","basicMs","require","keys","key","default","pseudoMs","Object","fromEntries","op","concat","getOperationNames","getBasicOperationByName","getPseudoOperationByName","isOperationName","isBasicOperationName","isPseudoOperationName","number","byteWidth","mask","Math","pow","toString","padStart","isNegative","numberToBytes","bytes","i","unshift","bytesToNumber","byte","isInteger","str","isNaN","parseInt","sleep","ms","Promise","resolve","setTimeout","callLimiter","func","delay","thId","lastArgs","args","module","exports","pseudos","pseudoManager","pseudosMs","getPseudoInstructions","_16","_32","Architecture","bitWidth","registers","registersByName","entries","registerName","register","aliases","aliasName","reduce","a","b","registersNameByCode","hasRegisterName","architectureManager","getViking16Arch","getViking32Arch","Memory","storage","result","reset","emit","getDataLength","getBytesFromRange","getWordsFromRange","address","onReadByte","newValue","readByte","onReadWord","readWord","onWriteByte","writeByte","word","onWriteWord","writeWord","getBitWidth","MemoryStorage16","EventEmitter","data","Array","fill","byte0","byte1","start","end","slice","words","push","RegisterBank","registerInfos","registerByteWidth","forEach","setValue","oldValue","archRegisters","getRegisters","getByteWidth","PseudoConverter","instruction","instructions","getNonPseudoInstructions","convInstruction","convInstructions","convert","splice","Disassembler","rawHex","arrayLiteral","match","x","pc","disassemble","exc","InstructionParser","parseOperation","parseOperands","isArray","operationName","operandValue","isRegisterName","operandsValues","split","trim","getInstructionOperandValueType","DataParser","parseToBytes","bytesToData","values","lastC","startIndex","capturingQuote","c","unraw","substring","extractValues","charCodeAt","trimmed","splitted","some","curBytes","j","CommentParser","isComment","comment","matches","LineParser","instructionParser","dataParser","commentParser","symbol","rest","line","getSymbolAndRest","sanitizedRest","parse","isInstruction","Assembler","programData","pseudoConverter","lines","sequence","symbolTable","objectCodeArray","additionalInfos","pass1","pass2","pass3","rawObjectCode","lineParser","additionalInfo","lineIndex","lineNumber","parsed","console","error","message","getOperands","symbolValue","finalValue","getByteRange","min","max","setType","item","Number","assemble","Window","props","containerRef","createRef","description","state","children","width","current","style","height","className","styles","container","ref","header","title","content","Component","Home","instance","keyIndex","windowsContainerRef","aboutRef","windows","spawnWindow","remove","elem","window","setState","windowsContainer","aboutContainer","href","onClick","closeAbout","bind","SimulationError","SimulationNeedInputError","defaultBreakpointHandler","Simulation","memory","registerBank","codeExecutionMaxPC","running","ended","stopping","waitingInput","stepInterval","cycles","inputBytes","breakpointHandler","setupMemoryHandlers","stop","carry","setPC","setCycles","resetInput","writeObjCodeMemory","setWaitingInput","readInputChar","readInputInt","String","fromCharCode","getNextInputByte","zeroCharCode","nineCharCode","minusCharCode","isMinusChar","isNumberChar","charToNumber","int","firstC","rawObjCode","wordArray","execute","incrementPC","incrementCycles","timePerBlock","toExecFloat","toExec","floor","Date","now","step","sleepTime","runner","shift","isWaitingInput","run","getMask","getPC","handler","Simulator","programRef","assembledRef","symbolTableRef","registersRef","controlRef","consoleRef","curArchitecture","createFromArchitecture","stepDelay","simulationOnRunErrorHandler","writeLine","simulationOnRunEndedHandler","simulationOnBreakpointHandler","simulationWriteCharHandler","char","write","simulationWriteIntHandler","simulationPcUpdateHandler","setCurrentPC","simulationInBufHandler","inputBuffer","setInputBuffer","simulationCyclesUpdateHandler","simulationWaitingInputHandler","setInputAlert","setBreakpointHandler","_","hasBreakpoint","on","loadAsmCode","off","log","localStorage","getItem","loadSaved","loadDefault","text","buffer","Buffer","from","addInput","getText","pseudoInstructions","assemblerResult","curAssembleResult","disassemblerResult","disassembly","setRawObjCode","setAssembled","setSymbolTable","isRunning","hasEnded","curText","getAutoAssemble","lastText","setStepInterval","additionInfo","find","symbolName","highlightLine","setItem","asmCode","setText","display","flexDirection","flex","overflow","onSaveRequest","save","onLoadSavedRequest","onLoadDefaultRequest","onSymbolNameClick","onSymbolValueClick","rightArea","justifyContent","onAssemble","onRun","onPause","pause","onStep","onReset","onStepIntervalChanged","onInput","Registers","getRegisterInfos","valueUpdateHandler","generalRegisterList","infos","Register","getUValue","pcRegister","registerContainer","alreadyCreatedLang","Program","infosRef","onChange","regNames","getRegisterNames","monaco","languages","id","setMonarchTokensProvider","operationKeywords","registerKeywords","decimalNumbers","hexNumbers","escapes","tokenizer","root","cases","token","bracket","next","string","registerCompletionItemProvider","provideCompletionItems","suggestions","opName","label","detail","documentation","kind","CompletionItemKind","Function","insertText","editor","defineTheme","base","inherit","rules","foreground","getModel","onDidChangeContent","initText","saveBindHandler","addCommand","KeyMod","CtrlCmd","KeyCode","KEY_S","fullRange","getFullModelRange","executeEdits","range","textContent","lineCount","getLineCount","lineDec","Range","options","isWholeLine","curLineHighlight","revealLine","decId","deltaDecorations","setInfos","titleContainer","btn","language","theme","beforeMount","onEditorWillMount","onMount","onEditorMount","SymbolTable","symbols","border","frame","fillAllSpace","Console","inputRef","outputRef","inputAlert","focus","scrollTop","scrollHeight","e","toLowerCase","target","outAndInBufContainer","output","readOnly","spellCheck","alertsOutline","inputText","placeholder","onKeyDown","inputKeyDown","Assembled","breakpointDecorations","pcBreakpoints","Set","curLineRunningDecorationId","curLineRunningDecoration","has","removeBreakpoint","setBreakpoint","add","bpDec","glyphMarginClassName","breakpoint","delete","pcs","removeAllBreakpoints","linesCount","newBreakpointPCs","filter","setBreakpoints","currentLineRunning","oldDec","self","updateOptions","wordBasedSuggestions","automaticLayout","lineDecorationsWidth","glyphMargin","minimap","enabled","lineNumbers","n","onMouseDown","position","toggleBreakpoint","MemoryViewer","tbodyRef","memoryScrollRef","memoryScrollAuxRef","memoryAreaRef","columns","rowsToShow","rows","dataItemBytes","rowOffset","wordHighlightContexts","dataCount","getDataCount","setScrollHeight","getData","recreateTable","onwheel","deltaY","preventDefault","onscroll","getBoundingClientRect","onResetHandler","onStorageWriteByteHandler","dataOffset","updateByteAt","onStorageWriteWordHandler","tbyteDiv","getByteElem","highlightByte","offset","column","row","childNodes","ctx","setInterval","clearInterval","rowsCount","ceil","html","memoryColumnNumber","_x","y","memoryRowNumber","memDataHtml","memoryData","innerHTML","memoryScroll","memoryAreaContainer","memoryArea","_g","_excluded","_extends","assign","arguments","source","prototype","hasOwnProperty","call","apply","_objectWithoutProperties","excluded","sourceKeys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","SvgAssembleIcon","_ref","svgRef","titleId","xmlns","viewBox","preserveAspectRatio","transform","d","ForwardRef","SvgResetIcon","SvgStepIcon","Control","onAutoAssembleChanged","autoAssemble","checked","cycleArea","cycleLabel","autoAssembleChanged","margin","btnList","assembleClick","btnLaterals","runClick","stopClick","stepClick","resetClick","delayLabel","delayInput","stepIntervalChanged","onKeyUp","webpackContext","req","webpackContextResolve","__webpack_require__","o","adc","getRegisterBank","getCarry","and","asr","setCarry","bez","bnz","ldb","getMemory","ldc","ldr","ldw","lsr","or","ror","getArchitecture","sbc","slt","sltu","stb","stw","sub","xor","hcf","ldi","lsl","pop","supportedOpNames","operationLdi","_large_immediate","getOperation","literal","operationAsr","operationBez","operationBnz","operationHcf","operationLdb","operationLdr","operationLdc","setByteRange","operationLdw","operationLsl","operationAdd","operationLsr","operationPop","operationPush","operationSub","operationStw","operationRor","operationStb","App","basename","exact","path","component","ReactDOM","render","StrictMode","document","getElementById","assembler","disassembler","memoryStorage16"],"mappings":"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","file":"static/js/main.c7406e39.chunk.js","sourcesContent":["export default class Operand {\r\n    static REGISTER = 'register';\r\n    static SYMBOL = 'symbol';\r\n    static LITERAL = 'literal';\r\n\r\n    constructor(value, type) {\r\n        this.value = value;\r\n        this.type = type;\r\n        this.byteRange = null;\r\n    }\r\n\r\n    setByteRange(byteRange) {\r\n        this.byteRange = byteRange;\r\n        return this;\r\n    }\r\n\r\n    setValue(value) {\r\n        this.value = value;\r\n        return this;\r\n    }\r\n    \r\n    setType(type) {\r\n        this.type = type;\r\n        return this;\r\n    }\r\n\r\n    getValue() {\r\n        return this.value;\r\n    }\r\n    \r\n    getType() {\r\n        return this.type;\r\n    }\r\n\r\n    getByteRange() {\r\n        return this.byteRange;\r\n    }\r\n}","import operationsManager from './operations/operationsManager';\r\nimport Operand from './operand';\r\nimport utils from '../../utils';\r\n\r\nclass Instruction {\r\n    static TYPE_R = 'R';\r\n    static TYPE_I = 'I';\r\n    \r\n    static disassemble(code, architecture) {\r\n        let imm = (code >> 11) & 0b1;    \r\n        if (imm === 1) {\r\n            let opcode = code & 0b1111000000000000;     // 1111 0000 0000 0000\r\n            let rstCode = (code >> 8) & 0b111;          //      0111 0000 0000\r\n            let immediate = code & 0b11111111;          //           1111 1111\r\n            immediate = utils.unsignedToSigned(immediate, 1);\r\n            \r\n            let rst = architecture.getRegisterNameByCode(rstCode);\r\n            \r\n            if (!rst) throw new TypeError('rst doesnt exist');\r\n    \r\n            let operation = operationsManager.getOperationByOpcode(opcode);\r\n            if (!operation) throw new TypeError('operation doesnt exist');\r\n    \r\n            let operands = [\r\n                new Operand(rst, Operand.REGISTER),\r\n                new Operand(immediate, Operand.LITERAL),\r\n            ];\r\n            \r\n            return new Instruction(operation, operands);\r\n        } else {\r\n            let opcode = code & 0b1111000000000011;     // 1111 0000 0000 0011\r\n            let rstCode = (code >> 8) & 0b111;          //      0111 0000 0000\r\n            let rsaCode = (code >> 5) & 0b111;          //           1110 0000\r\n            let rsbCode = (code >> 2) & 0b111;          //              1 1100\r\n    \r\n            let rst = architecture.getRegisterNameByCode(rstCode);\r\n            let rsa = architecture.getRegisterNameByCode(rsaCode);\r\n            let rsb = architecture.getRegisterNameByCode(rsbCode);\r\n            if (!rst) throw new TypeError('rst doesnt exist');\r\n            if (!rsa) throw new TypeError('rsa doesnt exist');\r\n            if (!rsb) throw new TypeError('rsb doesnt exist');\r\n    \r\n            let operation = operationsManager.getOperationByOpcode(opcode);\r\n            if (!operation) throw new TypeError('operation doesnt exist');\r\n    \r\n            let operands = [\r\n                new Operand(rst, Operand.REGISTER),\r\n                new Operand(rsa, Operand.REGISTER),\r\n                new Operand(rsb, Operand.REGISTER),\r\n            ];\r\n    \r\n            return new Instruction(operation, operands);\r\n        }\r\n    }\r\n\r\n    constructor(operation, operands) {\r\n        this.operation = operation;\r\n        this.operands = operands;\r\n    }\r\n    \r\n    isPseudo() {\r\n        let type = this.getType();\r\n        if (type === null) return true;\r\n        if (this.operation === null) return true;\r\n        if (this.operation.isPseudo()) return true;\r\n        switch (type) {\r\n            case Instruction.TYPE_R:\r\n                if (!this.operation.supportR()) {\r\n                    return true;\r\n                } else {\r\n                    break;\r\n                }\r\n            case Instruction.TYPE_I:\r\n                if (!this.operation.supportI()) {\r\n                    return true;\r\n                } else {\r\n                    break;\r\n                }\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n\r\n    getType() {\r\n        if (this.operands.length === 2 && \r\n            this.operands[0].getType() === Operand.REGISTER &&\r\n            this.operands[1].getType() === Operand.LITERAL) return Instruction.TYPE_I;\r\n        if (this.operands.length === 3 && \r\n            this.operands[0].getType() === Operand.REGISTER &&\r\n            this.operands[1].getType() === Operand.REGISTER &&\r\n            this.operands[2].getType() === Operand.REGISTER) return Instruction.TYPE_R;\r\n        return null;\r\n    }\r\n\r\n    assemble(architecture) {\r\n        if (!this.operation) throw new Error('Operation doesnt exists');\r\n        if (this.operation.getName() === 'hcf') return 0x0003;\r\n        if (this.operation.isPseudo()) throw new Error('Operation is pseudo-operation');\r\n        if (!this.operands) throw new Error('Operands doesnt exists');\r\n\r\n        let type = this.getType();\r\n        if (!type) throw new Error('Invalid instruction type');\r\n\r\n        let opcode = this.operation.getOpcode();\r\n        if (!type) throw new Error('Operation doesnt have opcode');\r\n\r\n        let finalCode = 0x0000;\r\n        switch (type) {\r\n            case Instruction.TYPE_R: {\r\n                let rst = architecture.getRegisterCode(this.operands[0].getValue());\r\n                let rsa = architecture.getRegisterCode(this.operands[1].getValue());\r\n                let rsb = architecture.getRegisterCode(this.operands[2].getValue());\r\n                finalCode |= opcode;    // operation code\r\n                finalCode |= 0 << 11;   // imm\r\n                finalCode |= rst << 8;\r\n                finalCode |= rsa << 5;\r\n                finalCode |= rsb << 2;\r\n                break;\r\n            }\r\n            case Instruction.TYPE_I: {\r\n                let rst = architecture.getRegisterCode(this.operands[0].getValue());\r\n                let immediate = this.operands[1].getValue();\r\n                immediate = utils.signedToUnsigned(immediate, 1);\r\n\r\n                finalCode |= opcode;    // operation code\r\n                finalCode |= 1 << 11;   // imm\r\n                finalCode |= rst << 8;\r\n                finalCode |= immediate;\r\n                break;\r\n            }\r\n            default:\r\n        }\r\n        return finalCode;\r\n    }\r\n\r\n    getOperation() {\r\n        return this.operation;\r\n    }\r\n    \r\n    getOperands() {\r\n        return this.operands;\r\n    }\r\n\r\n    execute(simulation) {\r\n        if (!this.operation) throw new Error('Instruction has no operation');\r\n\r\n        let type = this.getType();\r\n        if (!type) throw new Error('Invalid instruction type');\r\n\r\n        switch (type) {\r\n            case Instruction.TYPE_R: {\r\n                let rst = this.operands[0].getValue();\r\n                let rsa = this.operands[1].getValue();\r\n                let rsb = this.operands[2].getValue();\r\n                \r\n                if (typeof this.operation.executeR === 'function') {\r\n                    this.operation.executeR(simulation, rst, rsa, rsb);\r\n                } else {\r\n                    throw new Error('The operation \"' + this.operation.getName() + '\" doesnt support type R');\r\n                }\r\n                break;\r\n            }\r\n            case Instruction.TYPE_I: {\r\n                let rst = this.operands[0].getValue();\r\n                let immediate = this.operands[1].getValue();\r\n                \r\n                if (typeof this.operation.executeI === 'function') {\r\n                    this.operation.executeI(simulation, rst, immediate);\r\n                } else {\r\n                    throw new Error('The operation \"' + this.operation.getName() + '\" doesnt support type I');\r\n                }\r\n                break;\r\n            }\r\n            default:\r\n        }\r\n    }\r\n\r\n    toString() {\r\n        return this.operation.getName() + ' ' + this.operands.map(operand => {\r\n            let value = operand.getValue();\r\n            if (operand.getType() === Operand.LITERAL) {\r\n                value = '0x'+utils.signedNumberToHex(value, 1);\r\n            }\r\n            return value;\r\n        }).join(',');\r\n    }\r\n}\r\n\r\nexport default Instruction;","\r\nlet basicOps = [];\r\nlet pseudoOps = [];\r\nlet basicOpsByOpcode = {};\r\nlet basicOpsByName = {};\r\nlet pseudoOpsByName = {};\r\nlet basicOpsNames = [];\r\nlet pseudoOpsNames = [];\r\nlet opsNames = [];\r\n\r\nfunction setup() {\r\n    const basicMs = require.context('./', true, /basic\\/.+\\.js$/);\r\n    basicOps = basicMs.keys().map(key => basicMs(key, true).default);\r\n    const pseudoMs = require.context('./', true, /pseudo\\/.+\\.js$/);\r\n    pseudoOps = pseudoMs.keys().map(key => pseudoMs(key, true).default);\r\n\r\n    basicOpsByOpcode = Object.fromEntries(\r\n        basicOps.map(op => [\r\n            op.getOpcode(), // key\r\n            op              // value\r\n        ])\r\n    );\r\n\r\n    basicOpsByName = Object.fromEntries(\r\n        basicOps.map(op => [\r\n            op.getName(),   // key\r\n            op              // value\r\n        ])\r\n    );\r\n    pseudoOpsByName = Object.fromEntries(\r\n        pseudoOps.map(op => [\r\n            op.getName(),   // key\r\n            op              // value\r\n        ])\r\n    );\r\n\r\n    basicOpsNames = Object.keys(basicOpsByName);\r\n    pseudoOpsNames = Object.keys(pseudoOpsByName);\r\n    opsNames = basicOpsNames.concat(pseudoOpsNames);\r\n}\r\n\r\nfunction getOperationNames() {\r\n    return opsNames;\r\n}\r\n\r\nfunction getOperationByName(name) {\r\n    return basicOpsByName[name] || pseudoOpsByName[name];\r\n}\r\n\r\nfunction getBasicOperationByName(name) {\r\n    return basicOpsByName[name];\r\n}\r\n\r\nfunction getPseudoOperationByName(name) {\r\n    return pseudoOpsByName[name];\r\n}\r\n\r\nfunction isOperationName(name) {\r\n    return getOperationByName(name) != null;\r\n}\r\n\r\nfunction isBasicOperationName(name) {\r\n    return basicOpsByName[name] != null;\r\n}\r\n\r\nfunction isPseudoOperationName(name) {\r\n    return pseudoOpsByName[name] != null;\r\n}\r\n\r\nfunction getOperationByOpcode(opcode) {\r\n    return basicOpsByOpcode[opcode];\r\n}\r\n\r\nconst operationsManager = {\r\n    setup,\r\n    getOperationNames,\r\n    getOperationByName,\r\n    getBasicOperationByName,\r\n    getPseudoOperationByName,\r\n    isOperationName,\r\n    isBasicOperationName,\r\n    isPseudoOperationName,\r\n    getOperationByOpcode,\r\n};\r\n\r\nexport default operationsManager;","\r\nfunction callLimiter(func, delay) {\r\n  let thId = null;\r\n  let lastArgs = null;\r\n  return (...args) => {\r\n    lastArgs = args;\r\n    if (thId == null) {\r\n      thId = setTimeout(() => {\r\n        func(...lastArgs);\r\n        thId = null;\r\n      }, delay);\r\n    }\r\n  }\r\n}\r\n\r\nfunction signedNumberToHex(number, byteWidth=4) {\r\n  return signedToUnsigned(number, byteWidth).toString(16).padStart(byteWidth * 2, '0');\r\n}\r\n\r\nfunction signedToUnsigned(number, byteWidth=2) {\r\n  let mask = Math.pow(2, byteWidth * 8) - 1;\r\n  return (((number >>> 0) & mask) >>> 0);\r\n}\r\n\r\nfunction unsignedToSigned(number, byteWidth=2) {\r\nlet mask = Math.pow(2, byteWidth * 8) - 1;\r\nlet isNegative = (number >> (byteWidth * 8 - 1)) & 1;\r\nif (isNegative) {\r\n  return -(((~number+1) & mask) >>> 0);\r\n} else {\r\n  return number & mask;\r\n}\r\n}\r\n\r\nfunction numberToBytes(number, byteWidth=2) {\r\n  let bytes = [];\r\n  for (let i = 0; i < byteWidth; i++) {\r\n      bytes.unshift(number & 0xff);\r\n      number >>= 8;\r\n  }\r\n  return bytes;\r\n}\r\n\r\nfunction bytesToNumber(bytes) {\r\n  let number = 0;\r\n  for (let byte of bytes) {\r\n      number <<= 8;\r\n      number |= byte;\r\n  }\r\n  return number;\r\n}\r\n\r\nfunction isInteger(str) {\r\n  return !isNaN(parseInt(str));\r\n}\r\n\r\nfunction sleep(ms) {\r\n  if (ms <= 0) return 0;\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nconst utils = {\r\n  signedNumberToHex,\r\n  signedToUnsigned,\r\n  unsignedToSigned,\r\n  numberToBytes,\r\n  bytesToNumber,\r\n  isInteger,\r\n  sleep,\r\n  callLimiter,\r\n};\r\n\r\nexport default utils;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Control_container__Day7V\",\"content\":\"Control_content__3iIfu\",\"title\":\"Control_title__Fct6q\",\"cycleArea\":\"Control_cycleArea__3W0Sp\",\"cycleLabel\":\"Control_cycleLabel__o6-yf\",\"btnList\":\"Control_btnList__pjvFr\",\"btn\":\"Control_btn__S6MpS\",\"btnLaterals\":\"Control_btnLaterals__g4gVg\",\"delayLabel\":\"Control_delayLabel__1Cctf\",\"delayInput\":\"Control_delayInput__lHshL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Program_container__ptnOO\",\"titleContainer\":\"Program_titleContainer__2wA5L\",\"infos\":\"Program_infos__3FvD7\",\"blink-green\":\"Program_blink-green__2vqx9\",\"curLineHighlight\":\"Program_curLineHighlight__3ntuk\",\"btn\":\"Program_btn__2C8NB\",\"editor\":\"Program_editor__3d99c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"MemoryViewer_container__36x1j\",\"content\":\"MemoryViewer_content__5lhVs\",\"memoryScroll\":\"MemoryViewer_memoryScroll__ejajI\",\"memoryAreaContainer\":\"MemoryViewer_memoryAreaContainer__31uQe\",\"memoryArea\":\"MemoryViewer_memoryArea__1TCDi\",\"memoryData\":\"MemoryViewer_memoryData__2-C4U\",\"memoryRowNumber\":\"MemoryViewer_memoryRowNumber__3Fx2o\",\"memoryColumnNumber\":\"MemoryViewer_memoryColumnNumber__c5w2Q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Console_container__3nKjQ\",\"output\":\"Console_output__3CcGx\",\"inputBuffer\":\"Console_inputBuffer__2jMXE\",\"outAndInBufContainer\":\"Console_outAndInBufContainer__ZSkiW\",\"alertsOutline\":\"Console_alertsOutline__3cNKE\",\"blink\":\"Console_blink__25EME\",\"title\":\"Console_title__2sfHt\",\"inputText\":\"Console_inputText__rkhPv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Registers_container__2s4UW\",\"title\":\"Registers_title__1C9vy\",\"content\":\"Registers_content__3IXg7\",\"generalRegisterList\":\"Registers_generalRegisterList__FB2qd\",\"pcRegister\":\"Registers_pcRegister__3EfW7\",\"registerContainer\":\"Registers_registerContainer__3HYMJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"SymbolTable_container__-A6je\",\"title\":\"SymbolTable_title__1Uqqp\",\"content\":\"SymbolTable_content__1X6lq\",\"symbolName\":\"SymbolTable_symbolName__2XffG\",\"symbolValue\":\"SymbolTable_symbolValue__3jrXO\",\"fillAllSpace\":\"SymbolTable_fillAllSpace__20mmf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Assembled_container__1jNx0\",\"editor\":\"Assembled_editor__3jQwh\",\"title\":\"Assembled_title__kk-F7\",\"breakpoint\":\"Assembled_breakpoint__2cdAw\",\"currentLineRunning\":\"Assembled_currentLineRunning__eYaaP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Window_container__3JkxK\",\"header\":\"Window_header__ygOBE\",\"title\":\"Window_title__2aHbv\",\"description\":\"Window_description__1NaN6\",\"content\":\"Window_content__3bL7I\"};","let pseudos = [];\r\n\r\nfunction setup() {\r\n    const pseudosMs = require.context('./', true, /pseudos\\/.+\\.js$/);\r\n    pseudos = pseudosMs.keys().map(key => pseudosMs(key, true).default);\r\n}\r\n\r\nfunction getPseudoInstructions() {\r\n    return pseudos;\r\n}\r\n\r\nconst pseudoManager = {\r\n    setup,\r\n    getPseudoInstructions,\r\n};\r\n\r\nexport default pseudoManager;","import Architecture from './architecture';\r\n\r\nlet _16;\r\nlet _32;\r\n\r\nfunction setup() {\r\n    _16 = new Architecture({\r\n        bitWidth: 16,\r\n        registers: {\r\n            'r0': { code: 0, aliases: [ 'at' ] },\r\n            'r1': { code: 1, aliases: [] },\r\n            'r2': { code: 2, aliases: [] },\r\n            'r3': { code: 3, aliases: [] },\r\n            'r4': { code: 4, aliases: [] },\r\n            'r5': { code: 5, aliases: [ 'sr' ] },\r\n            'r6': { code: 6, aliases: [ 'lr' ] },\r\n            'r7': { code: 7, aliases: [ 'sp' ] },\r\n        },\r\n    });\r\n    _32 = new Architecture({\r\n        bitWidth: 32,\r\n        registers: {\r\n            'r0': { code: 0, aliases: [ 'at' ] },\r\n            'r1': { code: 1, aliases: [] },\r\n            'r2': { code: 2, aliases: [] },\r\n            'r3': { code: 3, aliases: [] },\r\n            'r4': { code: 4, aliases: [] },\r\n            'r5': { code: 5, aliases: [ 'sr' ] },\r\n            'r6': { code: 6, aliases: [ 'lr' ] },\r\n            'r7': { code: 7, aliases: [ 'sp' ] },\r\n        },\r\n    });\r\n}\r\n\r\nfunction getViking16Arch() {\r\n    return _16;\r\n}\r\n\r\nfunction getViking32Arch() {\r\n    return _32;\r\n}\r\n\r\nconst architectureManager = {\r\n    setup,\r\n    getViking16Arch,\r\n    getViking32Arch,\r\n};\r\n\r\nexport default architectureManager;","export default class Architecture {\r\n    constructor({ bitWidth, registers }) {\r\n        this.bitWidth = bitWidth;\r\n        this.byteWidth = bitWidth / 8;\r\n        this.mask = Math.pow(2, bitWidth) - 1;\r\n\r\n        this.registers = registers;\r\n\r\n        this.registersByName = Object.fromEntries(\r\n            Object.entries(registers)\r\n            .map(([registerName, register]) => [\r\n                [\r\n                    registerName,   // key      registerName\r\n                    register,       // value    register\r\n                ],\r\n                ...register.aliases.map(aliasName => [\r\n                        aliasName,  // key      registerName\r\n                        register,   // value    register\r\n                    ]\r\n                )\r\n            ])\r\n            .reduce((a, b) => a.concat(b))\r\n        );\r\n        this.registersNameByCode = Object.fromEntries(\r\n            Object.entries(registers)\r\n            .map(([registerName, register]) => [\r\n                [\r\n                    register.code,  // key      registerName\r\n                    registerName,   // value    register\r\n                ],\r\n            ])\r\n            .reduce((a, b) => a.concat(b))\r\n        );\r\n    }\r\n\r\n    getMask() {\r\n        return this.mask;\r\n    }\r\n\r\n    getBitWidth() {\r\n        return this.bitWidth;\r\n    }\r\n\r\n    getByteWidth() {\r\n        return this.byteWidth;\r\n    }\r\n\r\n    hasRegisterName(name) {\r\n        return this.registersByName[name] != null;\r\n    }\r\n\r\n    getRegisterNames() {\r\n        return Object.keys(this.registersByName);\r\n    }\r\n\r\n    getRegisters() {\r\n        return this.registers;\r\n    }\r\n\r\n    getRegisterNameByCode(code) {\r\n        return this.registersNameByCode[code];\r\n    }\r\n\r\n    getRegisterCode(name) {\r\n        if (!this.hasRegisterName(name)) throw new Error('Register doesnt exists');\r\n        return this.registersByName[name].code;\r\n    }\r\n}","import { EventEmitter } from 'events';\r\nimport MemoryStorage16 from './memoryStorage16';\r\n\r\nclass Memory extends EventEmitter {\r\n    static createFromArchitecture (architecture, ...args) {\r\n        let bitWidth = architecture.getBitWidth();\r\n        let storage;\r\n        switch (bitWidth) {\r\n            case 16:\r\n                storage = new MemoryStorage16();\r\n                break;\r\n            /*case 32:\r\n                storage = new MemoryStorage16();\r\n                break;*/\r\n            default:\r\n                throw new Error('Memory for this architecture doesnt exists (implementation doesnt exists)');\r\n        }\r\n        return new Memory(storage);\r\n    }\r\n\r\n    constructor(storage) {\r\n        super();\r\n        this.storage = storage;\r\n    }\r\n\r\n    reset(...args) {\r\n        let result = this.storage.reset(...args);\r\n        this.emit('reset');\r\n        return result;\r\n    }\r\n    \r\n    getDataLength(...args) {\r\n        return this.storage.getDataLength(...args);\r\n    }\r\n    \r\n    getBytesFromRange(...args) {\r\n        return this.storage.getBytesFromRange(...args);\r\n    }\r\n    \r\n    getWordsFromRange(...args) {\r\n        return this.storage.getWordsFromRange(...args);\r\n    }\r\n    \r\n    readByte(address) {\r\n        if (this.onReadByte) {\r\n            let newValue = this.onReadByte(address);\r\n            if (newValue != null) {\r\n                return newValue;\r\n            }\r\n        }\r\n        let result = this.storage.readByte(address);\r\n        this.emit('storage read byte', address);\r\n        return result;\r\n    }\r\n    \r\n    readWord(address) {\r\n        if (this.onReadWord) {\r\n            let newValue = this.onReadWord(address);\r\n            if (newValue != null) {\r\n                return newValue;\r\n            }\r\n        }\r\n        let result = this.storage.readWord(address);\r\n        this.emit('storage read word', address);\r\n        return result;\r\n    }\r\n\r\n    writeByte(address, byte) {\r\n        if (this.onWriteByte) {\r\n            if (!this.onWriteByte(address, byte)) {\r\n                return false;\r\n            }\r\n        }\r\n        let result = this.storage.writeByte(address, byte);\r\n        this.emit('storage write byte', address, byte);\r\n        return result;\r\n    }\r\n    \r\n    writeWord(address, word) {\r\n        if (this.onWriteWord) {\r\n            if(!this.onWriteWord(address, word)) {\r\n                return false;\r\n            }\r\n        }\r\n        let result = this.storage.writeWord(address, word);\r\n        this.emit('storage write word', address, word);\r\n        return result;\r\n    }\r\n}\r\n\r\nexport default Memory;","export default class MemoryStorage16 {\r\n    constructor() {\r\n        this.data = new Array(0xFFFF + 1).fill(0);\r\n    }\r\n\r\n    reset() {\r\n        for (let i = 0; i < this.data.length; i++) {\r\n            this.data[i] = 0;\r\n        }\r\n    }\r\n\r\n    readByte(address) {\r\n        return this.data[address];\r\n    }\r\n\r\n    readWord(address) {\r\n        let byte0 = this.data[address];\r\n        let byte1 = this.data[address+1];\r\n        return (byte0 << 8) | byte1;\r\n    }\r\n\r\n    writeByte(address, byte) {\r\n        this.data[address] = byte & 0xFF;\r\n    }\r\n\r\n    writeWord(address, word) {\r\n        let byte0 = (word >> 8) & 0xFF;\r\n        let byte1 = word & 0xFF;\r\n        this.data[address] = byte0;\r\n        this.data[address+1] = byte1;\r\n    }\r\n\r\n    getDataLength() {\r\n        return this.data.length;\r\n    }\r\n\r\n    getData() {\r\n        return this.data;\r\n    }\r\n\r\n    getBytesFromRange(start, end) {\r\n        return this.data.slice(start, end);\r\n    }\r\n    \r\n    getWordsFromRange(start, end) {\r\n        let byte0;\r\n        let words = [];\r\n        for (let i = start; i < end; i++) {\r\n            if (i % 2 === 0) {\r\n                byte0 = this.data[i];\r\n            } else {\r\n                let byte1 = this.data[i];\r\n                let word = (byte0 << 8) | byte1;\r\n                words.push(word);\r\n            }\r\n        }\r\n        return words;\r\n    }\r\n}","import { EventEmitter } from 'events';\r\nimport utils from '../../../utils';\r\n\r\nexport default class RegisterBank extends EventEmitter {\r\n\r\n    static createFromArchitecture (architecture, ...args) {\r\n        let archRegisters = architecture.getRegisters();\r\n        return new RegisterBank(archRegisters, architecture.getByteWidth(), ...args);\r\n    }\r\n\r\n    constructor (registerInfos, registerByteWidth) {\r\n        super();\r\n        this.registerInfos = registerInfos;\r\n        this.registerByteWidth = registerByteWidth;\r\n        this.setup();\r\n    }\r\n\r\n    getRegisterInfos() {\r\n        return this.registerInfos;\r\n    }\r\n\r\n    getRegisterInfo(name) {\r\n        return this.registerInfos[name];\r\n    }\r\n\r\n    setup() {\r\n        this.mask = Math.pow(2, 8 * this.registerByteWidth) - 1;\r\n\r\n        this.registers = {};\r\n        for (let registerName in this.registerInfos) {\r\n            let registerInfo = this.registerInfos[registerName];\r\n            let { aliases } = registerInfo;\r\n\r\n            let register = {\r\n                name: registerName,\r\n                aliases,\r\n                value: 0,\r\n            };\r\n            \r\n            this.registers[registerName] = register;\r\n            aliases.forEach(aliasName => this.registers[aliasName] = register);\r\n        }\r\n    }\r\n\r\n    reset() {\r\n        for (let registerName in this.registers) {\r\n            this.setValue(registerName, 0);\r\n        }\r\n    }\r\n\r\n    setValue(registerName, newValue) {\r\n        newValue = (newValue & this.mask) >>> 0;\r\n        let register = this.registers[registerName];\r\n        let oldValue = register.value;\r\n        register.value = newValue;\r\n        this.emit('value update', { registerName: register.name, oldValue, newValue });\r\n    }\r\n\r\n    getValue(registerName) {\r\n        return utils.unsignedToSigned(this.registers[registerName].value, this.registerByteWidth);\r\n    }\r\n    \r\n    getUValue(registerName) {\r\n        return this.registers[registerName].value;\r\n    }\r\n}","\r\nexport default class PseudoConverter {\r\n    constructor(pseudos) {\r\n        this.pseudos = pseudos;\r\n    }\r\n\r\n    convert(instruction, architecture) {\r\n        for (let pseudo of this.pseudos) {\r\n            let instructions = pseudo.getNonPseudoInstructions(instruction, architecture);\r\n            if (instructions.length > 0) {\r\n                for (let i = 0; i < instructions.length; i++) {\r\n                    let convInstruction = instructions[i];\r\n                    let convInstructions = this.convert(convInstruction, architecture);\r\n\r\n                    if (convInstructions.length > 0) {\r\n                        instructions.splice(i, 1, ...convInstructions);\r\n                    }\r\n                }\r\n                return instructions;\r\n            }\r\n        }\r\n        return [];\r\n    }\r\n}","import Instruction from '../instruction';\r\n\r\nclass Disassembler {\r\n    constructor(architecture) {\r\n        this.architecture = architecture;\r\n    }\r\n\r\n    disassemble(rawHex) {\r\n        if (rawHex.length === 0) return [];\r\n\r\n        let result = [];\r\n        let arrayLiteral = rawHex\r\n            .match(/.{1,4}/g)\r\n            .map(x => parseInt(x, 16));\r\n        \r\n        let pc = 0;\r\n        for (let code of arrayLiteral) {\r\n            let instruction;\r\n            try {\r\n                instruction = Instruction.disassemble(code, this.architecture);\r\n            } catch (exc) { }\r\n\r\n            let value = instruction ? instruction.toString() : '????';\r\n\r\n            result.push({\r\n                instruction,\r\n                value,\r\n                pc,\r\n                code,\r\n            });\r\n\r\n            pc += 2;\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\nexport default Disassembler;","import operationsManager from '../operations/operationsManager';\r\nimport Instruction from '../instruction';\r\nimport Operand from '../operand';\r\nimport utils from '../../../utils';\r\n\r\nexport default class InstructionParser {\r\n\r\n    constructor(architecture) {\r\n        this.architecture = architecture;\r\n    }\r\n\r\n    isInstruction(str) {\r\n        try {\r\n            let operation = this.parseOperation(str);\r\n            return operation != null;\r\n        } catch (exc) {\r\n            return false;\r\n        }\r\n    }\r\n    \r\n    parse(str) {\r\n        // parse operation & operands\r\n        let operation = this.parseOperation(str);\r\n        let operands = this.parseOperands(str);\r\n\r\n        let instruction = new Instruction(operation, operands);\r\n        return instruction;\r\n    }\r\n    \r\n\r\n    // detect if str is register\r\n    isRegisterName(str) {\r\n        return this.architecture.hasRegisterName(str);\r\n    }\r\n\r\n    // detect if str is operation\r\n    isOperationName(str) {\r\n        return operationsManager.isOperationName(str);\r\n    }\r\n\r\n    // parse operation\r\n    parseOperation(str) {\r\n        let match = str.match(/^(\\w*)[\\t ]*/);\r\n        if (!Array.isArray(match) || match.length < 2) throw new TypeError('Cant parse to operation');\r\n\r\n        let operationName = match[1];\r\n        if (!this.isOperationName(operationName)) throw new TypeError('\"' + operationName + '\" isnt operation');\r\n        \r\n        let operation = operationsManager.getOperationByName(operationName);\r\n        if (!operation) throw new Error('Operation with name \"' + operationName + '\" not found');\r\n\r\n        return operation;\r\n    }\r\n\r\n    // detect type of operand value\r\n    getInstructionOperandValueType(operandValue) {\r\n        if (typeof operandValue !== 'string') return null;\r\n        if (operandValue.length === 0) return null;\r\n\r\n        if (this.isRegisterName(operandValue)) return 'register';\r\n        if (utils.isInteger(operandValue)) return 'literal';\r\n        return 'symbol';\r\n    }\r\n    \r\n    // parse operands\r\n    parseOperands(str) {\r\n        let operands = [];\r\n\r\n        let match = str.match(/^\\w+[ \\t]+(.+)/);\r\n        if (Array.isArray(match) && match.length >= 2) {\r\n            let operandsStr = match[1];\r\n            let operandsValues = operandsStr.split(/[\\t ]*,[\\t ]*/);\r\n            for (let value of operandsValues) {\r\n                value = value.trim();\r\n                let type = this.getInstructionOperandValueType(value);\r\n                if (type === null) {\r\n                    throw new Error('Operand \"' + value + '\" cant be parsed');\r\n                }\r\n                if (type === Operand.LITERAL) {\r\n                    value = parseInt(value);\r\n                }\r\n                operands.push(new Operand(value, type));\r\n            }\r\n        }\r\n        \r\n        return operands;\r\n    }\r\n}","import { unraw } from 'unraw';\r\nimport utils from '../../../utils';\r\n\r\nexport default class DataParser {\r\n    constructor(architecture) {\r\n        this.architecture = architecture;\r\n    }\r\n\r\n    parse(str) {\r\n        let byteWidth = this.architecture.getByteWidth();\r\n        let bytes = this.parseToBytes(str, byteWidth);\r\n        let data = this.bytesToData(bytes, byteWidth);\r\n        return data;\r\n    }\r\n\r\n    parseToBytes(str, byteWidth) {\r\n        let bytes = [];\r\n        let values = extractValues(str);\r\n        for (let { type, value } of values) {\r\n            switch (type) {\r\n                case 'text':\r\n                    for (let i = 0; i < value.length; i++) {\r\n                        bytes.push(value.charCodeAt(i));\r\n                    }\r\n                    bytes.push(0);\r\n                    break;\r\n                case 'others':\r\n                    let trimmed = value.trim();\r\n                    if (trimmed.length <= 0) break;\r\n\r\n                    let splitted = trimmed.split(/(?:[?: \\t]+)|,/);\r\n                    if (splitted.some(x => !utils.isInteger(x))) throw new TypeError('Data contains a non-literal');\r\n                    bytes.push( ...splitted.reduce( (a, b) => a.concat(utils.numberToBytes(parseInt(b), byteWidth)), [] ) );\r\n                    break;\r\n                default:\r\n            }\r\n        }\r\n        return bytes;\r\n    }\r\n\r\n    bytesToData(bytes, byteWidth) {\r\n        let data = [];\r\n        for (let i = 0; i < bytes.length; i += byteWidth) {\r\n            let curBytes = new Array(byteWidth).fill(0);\r\n            for (let j = 0; j < byteWidth; j++) {\r\n                let byte = bytes[i + j];\r\n                curBytes[j] = byte ? byte : 0;\r\n            }\r\n            data.push(utils.bytesToNumber(curBytes));\r\n        }\r\n        return data;\r\n    }\r\n}\r\n\r\nfunction extractValues(str) {\r\n    let lastC;\r\n    let startIndex = 0;\r\n    let capturingQuote = false;\r\n\r\n    let values = [];\r\n    for (let i = 0; i < str.length; i++) {\r\n        let c = str[i];\r\n\r\n        if ((c === '\"' && lastC !== '\\\\')) {            \r\n            if (capturingQuote) {\r\n                if (startIndex !== i) values.push({\r\n                    type: 'text',\r\n                    value: unraw(str.substring(startIndex, i)),\r\n                });\r\n                capturingQuote = false;\r\n                startIndex = i + 1;\r\n            } else {\r\n                capturingQuote = true;\r\n                if (startIndex !== i) values.push({\r\n                    type: 'others',\r\n                    value: str.substring(startIndex, i),\r\n                });\r\n                startIndex = i + 1;\r\n            }\r\n        }\r\n        lastC = c;\r\n    }\r\n    if (startIndex !== str.length) values.push({\r\n        type: 'others',\r\n        value: str.substring(startIndex, str.length),\r\n    });\r\n    return values;\r\n}","export default class CommentParser {\r\n    parse(str) {\r\n        let result = {\r\n            isComment: false,\r\n            comment: null,\r\n        };\r\n        let matches = str.match(/^[ \\t]*;|(?:\\/\\/)(.*)/);\r\n        if (Array.isArray(matches) && matches.length === 2) {\r\n            result.isComment = true;\r\n            result.comment = matches[1];\r\n        }\r\n        return result;\r\n    }\r\n};","export default class LineParser {\r\n\r\n    constructor(instructionParser, dataParser, commentParser) {\r\n        this.instructionParser = instructionParser;\r\n        this.dataParser = dataParser;\r\n        this.commentParser = commentParser;\r\n    }\r\n\r\n    getSymbolAndRest(str) {\r\n        let symbol;\r\n        let rest;\r\n\r\n        let match = str.match(/^(\\w*)[\\t ]*(.*)/);\r\n        if (Array.isArray(match) && match.length >= 3) {\r\n            if (this.instructionParser.isOperationName(match[1])) {\r\n                symbol = null;\r\n                rest = match[1] + ' ' + match[2];\r\n            } else {\r\n                symbol = match[1];\r\n                rest = match[2];\r\n                if (symbol.length === 0) symbol = null;\r\n            }\r\n        } else {\r\n            throw new Error('Cant parse line to symbol and rest');\r\n        }\r\n        \r\n        return { symbol, rest };\r\n    }\r\n\r\n    parse(line) {\r\n        let { symbol, rest } = this.getSymbolAndRest(line);\r\n        let sanitizedRest = rest.trim();\r\n\r\n        let instruction = null;\r\n        let data = null;\r\n        let { isComment, comment } = this.commentParser.parse(rest);\r\n\r\n        if (!isComment) {\r\n            if (sanitizedRest.length > 0) {\r\n                if (this.instructionParser.isInstruction(sanitizedRest)) {\r\n                    instruction = this.instructionParser.parse(sanitizedRest);\r\n                } else {\r\n                    data = this.dataParser.parse(sanitizedRest);\r\n                }\r\n            }\r\n        }\r\n\r\n        return { isComment, comment, symbol, instruction, data };\r\n    }\r\n}","import Operand from '../operand';\r\nimport InstructionParser from './instructionParser';\r\nimport DataParser from './dataParser';\r\nimport CommentParser from './commentParser';\r\nimport LineParser from './lineParser';\r\nimport utils from '../../../utils';\r\n\r\nclass Assembler {\r\n    constructor(architecture, programData, pseudoConverter) {\r\n        this.architecture = architecture;\r\n        this.programData = programData;\r\n        this.pseudoConverter = pseudoConverter;\r\n        \r\n        this.lines = this.programData.split('\\n');\r\n        \r\n        this.sequence = [];\r\n        this.symbolTable = {};\r\n        this.objectCodeArray = [];\r\n        this.instructions = [];\r\n        this.additionalInfos = [];\r\n    }\r\n\r\n    assemble() {\r\n        this.pass1();\r\n        this.pass2();\r\n        this.pass3();\r\n        \r\n        return {\r\n            rawObjectCode: this.rawObjectCode,\r\n            objectCodeArray: this.objectCodeArray,\r\n            symbolTable: this.symbolTable,\r\n            instructions: this.instructions,\r\n            additionalInfos: this.additionalInfos,\r\n        };\r\n    }\r\n\r\n    // Process instructions, pseudo-instructions, symbols.\r\n    // Doesnt substitute symbols in instructions.\r\n    pass1() {\r\n        let pc = 0;\r\n\r\n        let instructionParser = new InstructionParser(this.architecture);\r\n        let dataParser = new DataParser(this.architecture);\r\n        let commentParser = new CommentParser();\r\n        let lineParser = new LineParser(instructionParser, dataParser, commentParser);\r\n\r\n        for (let i = 0; i < this.lines.length; i++) {\r\n            let line = this.lines[i];\r\n            let additionalInfo = { lineIndex: i, lineNumber: i+1, line, pc };\r\n            this.additionalInfos.push(additionalInfo);\r\n\r\n            let parsed;\r\n            try {\r\n                parsed = lineParser.parse(line);\r\n            } catch (exc) {\r\n                console.error(exc);\r\n                throw new Error('Cant parse line ' + (i+1) + ' \"' + line.trim() + '\": ' + exc.message);\r\n            }\r\n            let { isComment, symbol, instruction, data } = parsed;\r\n            additionalInfo.parsed = parsed;\r\n\r\n            if (isComment) continue;\r\n\r\n            if (symbol) {\r\n                this.symbolTable[symbol] = pc;\r\n            }\r\n            if (data) {\r\n                this.sequence.push(...data);\r\n                pc += 2 * data.length;\r\n            }\r\n            if (instruction) {\r\n                // process pseudo instructions\r\n                if (instruction.isPseudo()) {\r\n                    let convInstructions = this.pseudoConverter.convert(instruction, this.architecture);\r\n                    if (convInstructions != null && convInstructions.length > 0) {\r\n                        this.instructions.push(...convInstructions);\r\n                        this.sequence.push(...convInstructions);\r\n                        pc += 2 * convInstructions.length;\r\n                    } else {\r\n                        throw new Error('The pseudo instruction on line ' + (i+1) + ' \"' + line.trim() + '\" doesnt exist');\r\n                    }\r\n                } else {\r\n                    this.instructions.push(instruction);\r\n                    this.sequence.push(instruction);\r\n                    pc += 2;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Substitute symbols with their values\r\n    pass2() {\r\n        for (let instruction of this.instructions) {\r\n            let operands = instruction.getOperands();\r\n            for (let operand of operands) {\r\n                if (operand.getType() === Operand.SYMBOL) {\r\n                    let symbolValue = this.symbolTable[operand.getValue()];\r\n                    if (symbolValue == null) throw new Error('The symbol \"' + operand.getValue() + '\" doesnt exist');\r\n                    let finalValue = 0;\r\n                    for (let i = operand.getByteRange().min; i <= operand.getByteRange().max; i++) {\r\n                        finalValue <<= 2;\r\n                        finalValue |= (symbolValue >> (this.architecture.getBitWidth() - (8 * (i + 1)))) & 0xFF;\r\n                    }\r\n                    operand.setType(Operand.LITERAL);\r\n                    operand.setValue(finalValue);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Assemble object code\r\n    pass3() {\r\n        // Assemble\r\n        for (let item of this.sequence) {     \r\n            if (Number.isInteger(item)) {\r\n                this.objectCodeArray.push(item);\r\n            } else {\r\n                this.objectCodeArray.push(item.assemble(this.architecture));\r\n            }\r\n        }\r\n        \r\n        this.rawObjectCode = this.objectCodeArray\r\n            .map(x => utils.signedNumberToHex(x, 2))\r\n            .join('');\r\n    }\r\n};\r\n\r\nexport default Assembler;","import { Component, createRef } from \"react\";\r\nimport styles from './Window.module.css'\r\n\r\nclass Window extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.containerRef = createRef();\r\n\r\n    this.name = props.name || \"Window\";\r\n    this.description = props.description || \"This is a window!\";\r\n    this.props = props;\r\n\r\n    this.state = {\r\n      children: props.children,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.props.width) this.containerRef.current.style.width = this.props.width;\r\n    if (this.props.height) this.containerRef.current.style.height = this.props.height;\r\n  }\r\n  \r\n  render() { \r\n    return (\r\n      <div className={styles.container} ref={this.containerRef}>\r\n        <div className={`unselectable ${styles.header}`}>\r\n          <div className={styles.title}>{this.name}</div>-<div className={styles.description}>{this.description}</div>\r\n        </div>\r\n        <div className={styles.content}>\r\n          {this.state.children}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n \r\nexport default Window;","import styles from './Home.module.css'\r\nimport Simulator from \"../simulator/Simulator.module\";\r\nimport Window from '../window/Window.module';\r\nimport React, { Component, createRef } from 'react';\r\n\r\nclass Home extends Component {  \r\n  constructor(props) {\r\n    super(props);\r\n    Home.instance = this;\r\n    this.keyIndex = 0;\r\n    this.windowsContainerRef = createRef();\r\n    this.aboutRef = createRef();\r\n    this.state = {\r\n      windows: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.spawnWindow('Simulator', 'Viking CPU Simulator', 980, 710, <Simulator />)\r\n  }\r\n\r\n  closeAbout() {\r\n    this.aboutRef.current.remove();\r\n  }\r\n\r\n  spawnWindow(name, description, width, height, elem) {\r\n    let window = <Window key={this.keyIndex++} name={name} description={description} width={width + 'px'} height={height + 'px'}>{elem}</Window>;\r\n    this.setState({windows: this.state.windows.concat([window])});\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={styles.container}>\r\n        <div className={styles.windowsContainer} ref={this.windowsContainerRef}>\r\n          { this.state.windows }\r\n        </div>\r\n        <div className={styles.aboutContainer} ref={this.aboutRef}>\r\n          <div>Developed by <a href=\"https://github.com/vanflux\">vanflux</a></div>\r\n          <div>Viking architecture by <a href=\"https://github.com/sjohann81\">sjohann81</a></div>\r\n          <div>Repo Link: <a href=\"https://github.com/vanflux/viking-sim-web\">viking-sim-web</a></div>\r\n          <button onClick={this.closeAbout.bind(this)}>Close This Pop-up</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n \r\nexport default Home;","export class AsmError extends Error {\r\n  constructor(message) {\r\n    super(message);\r\n    this.name = \"AsmError\";\r\n  }\r\n}\r\n\r\nexport class SimulationError extends AsmError {\r\n  constructor(message) {\r\n    super(message);\r\n    this.name = \"SimulationError\";\r\n  }\r\n}\r\n\r\nexport class SimulationNeedInputError extends SimulationError {\r\n  constructor(message) {\r\n    super(message);\r\n    this.name = \"SimulationNeedInputError\";\r\n  }\r\n}","import { EventEmitter } from 'events';\r\nimport utils from '../../../utils';\r\nimport { SimulationError, SimulationNeedInputError } from '../asmErrors';\r\nimport Instruction from '../instruction';\r\n\r\nconst endSimulationCode = 0x0003;\r\nconst defaultBreakpointHandler = (simulation, pc) => false;\r\n\r\nexport default class Simulation extends EventEmitter {\r\n    constructor(architecture, memory, registerBank) {\r\n        super();\r\n\r\n        this.architecture = architecture;\r\n        this.memory = memory;\r\n        this.registerBank = registerBank;\r\n        this.codeExecutionMaxPC = 0;\r\n        this.running = false;\r\n        this.ended = false;\r\n        this.stopping = false;\r\n        this.waitingInput = false;\r\n        this.stepInterval = 50;\r\n        this.cycles = 0;\r\n        this.pc = 0;\r\n        this.inputBytes = [];\r\n\r\n        this.breakpointHandler = defaultBreakpointHandler;\r\n        this.setupMemoryHandlers();\r\n    }\r\n\r\n    reset() {\r\n        if (this.running && !this.stopping) this.stop();\r\n        this.ended = false;\r\n        this.carry = 0;\r\n        this.setPC(0);\r\n        this.setCycles(0);\r\n        this.resetInput();\r\n        this.registerBank.reset();\r\n        this.registerBank.setValue('sp', 0xdffe);\r\n        this.memory.reset();\r\n        this.writeObjCodeMemory();\r\n        this.emit('reset');\r\n    }\r\n\r\n    setupMemoryHandlers() {\r\n        this.memory.onReadWord = (address) => {\r\n            if (address < 0xe000) return; // ok\r\n\r\n            switch (address) {\r\n                case 0xf004:\r\n                    if (this.inputBytes.length < 1) {\r\n                        this.setWaitingInput(true);\r\n                        throw new SimulationNeedInputError('Input too short, need 1 byte');\r\n                    }\r\n                    return this.readInputChar();\r\n                case 0xf006:\r\n                    if (this.inputBytes.length < 2) {\r\n                        this.setWaitingInput(true);\r\n                        throw new SimulationNeedInputError('Input too short, need 2 bytes');\r\n                    }\r\n                    return this.readInputInt();\r\n                default:\r\n                    throw new SimulationError('read on unauthorized location [' + address.toString(16) + ']');\r\n            }\r\n        };\r\n        \r\n        this.memory.onWriteWord = (address, value) => {\r\n            if (address < 0xe000) return true; // ok\r\n\r\n            switch (address) {\r\n                case 0xf000:\r\n                    this.emit('console write char', String.fromCharCode(value));\r\n                    return true;\r\n                case 0xf002:\r\n                    this.emit('console write int', utils.unsignedToSigned(value));\r\n                    return true;\r\n                default:\r\n                    // write on unauthorized location\r\n                    this.emit('run error', new SimulationError('write on unauthorized location [' + address.toString(16) + '] = ' + value.toString(16)));\r\n                    this.stop();\r\n                    return false;\r\n            }\r\n        };\r\n    }\r\n\r\n    readInputChar() {\r\n        if (this.inputBytes.length === 0) throw new SimulationNeedInputError('Empty input');\r\n        let byte = this.getNextInputByte();\r\n        return byte;\r\n    }\r\n    \r\n    readInputInt() {\r\n        if (this.inputBytes.length === 0) throw new SimulationNeedInputError('Empty input');\r\n        let zeroCharCode = '0'.charCodeAt(0);\r\n        let nineCharCode = '9'.charCodeAt(0);\r\n        let minusCharCode = '-'.charCodeAt(0);\r\n\r\n        function isMinusChar(c) {\r\n            return minusCharCode === c;\r\n        }\r\n\r\n        function isNumberChar(c) {\r\n            return c >= zeroCharCode && c <= nineCharCode;\r\n        }\r\n\r\n        function charToNumber(c) {\r\n            return c - zeroCharCode;\r\n        }\r\n\r\n        let int = 0;\r\n        let firstC = this.getNextInputByte();\r\n        if (isNumberChar(firstC) || isMinusChar(firstC)) {\r\n            if (isNumberChar(firstC)) {\r\n                int = charToNumber(firstC);\r\n            }\r\n\r\n            let length = this.inputBytes.length;\r\n            for (let i = 0; i < length; i++) {\r\n                let c = this.getNextInputByte();\r\n                if (isNumberChar(c)) {\r\n                    let number = charToNumber(c);\r\n                    int *= 10;\r\n                    int += number;\r\n                } else {\r\n                    if (c === 0) {\r\n                        this.getNextInputByte();\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (isMinusChar(firstC)) {\r\n                int *= -1;\r\n            }\r\n        } else {\r\n            // lê os bytes do inputs até acabar ou até o byteWidth da arquitetura\r\n            // se o inputBytes tiver 1 byte e o byteWidth da arquitetura for 2 bytes, 16 bits, vai ler apenas 1 byte\r\n            // se o inputBytes tiver 5 bytes e o byteWidth da arquitetura for 2 bytes, vai ler apenas 2 bytes\r\n            int = firstC;\r\n            let length = Math.min(this.architecture.getByteWidth() - 1, this.inputBytes.length);\r\n            for (let i = 0; i < length; i++) {\r\n                let c = this.getNextInputByte();\r\n                this.emit('input buffer', this.inputBytes);\r\n                int = (int << 8) | c;\r\n            }\r\n        }\r\n        \r\n        return int;\r\n    }\r\n\r\n    setRawObjCode(rawObjCode) {\r\n        if (rawObjCode.length > 0xf000 * 2) throw new SimulationError('Object code too big for the memory');\r\n        this.rawObjCode = rawObjCode;\r\n    }\r\n\r\n    writeObjCodeMemory() {\r\n        if (!this.rawObjCode) return;\r\n        let wordArray = this.rawObjCode\r\n            .match(/.{1,4}/g)\r\n            .map(x => parseInt(x, 16));\r\n        for (let i = 0; i < wordArray.length; i++) {\r\n            let word = wordArray[i];\r\n            this.memory.writeWord(i*2, word);\r\n        }\r\n\r\n        this.codeExecutionMaxPC = wordArray.length * 2;\r\n    }\r\n\r\n    step() {\r\n        if (this.pc >= this.codeExecutionMaxPC) throw new SimulationError('PC run out of program bounds');\r\n\r\n        let code;\r\n\r\n        try {\r\n            code = this.memory.readWord(this.pc);\r\n        } catch (exc) {\r\n            console.error(exc);\r\n            this.emit('run error', exc);\r\n            return this.stop();\r\n        }\r\n        \r\n        if (code === endSimulationCode) {\r\n            this.ended = true;\r\n            this.emit('run ended');\r\n            return this.stop();\r\n        }\r\n\r\n        try {\r\n            let instruction = Instruction.disassemble(code, this.architecture);\r\n            instruction.execute(this);\r\n        } catch (exc) {\r\n            if (exc.name === 'SimulationNeedInputError') {\r\n                return this.stop();\r\n            }\r\n            console.error(exc);\r\n            this.emit('run error', exc);\r\n            return this.stop();\r\n        }\r\n\r\n        this.incrementPC(2);\r\n        this.incrementCycles(1);\r\n        \r\n        if (this.breakpointHandler(this, this.pc)) {\r\n            this.emit('breakpoint', this.pc);\r\n            this.stop();\r\n        }\r\n    }\r\n\r\n    async runner() {\r\n        this.emit('run started');\r\n        try {\r\n            let timePerBlock = 50;\r\n            let toExecFloat = 0;\r\n            runLoop:\r\n            while(!this.stopping) {\r\n                if (this.stepInterval > 0) {\r\n                    toExecFloat += timePerBlock / this.stepInterval;\r\n                    if (toExecFloat >= 1) {\r\n                        let toExec = Math.floor(toExecFloat);\r\n                        toExecFloat -= toExec;\r\n                        let start = Date.now();\r\n                        for (let i = 0; i < toExec; i++) {\r\n                            if (this.stopping) break runLoop;\r\n                            this.step();\r\n                        }\r\n                        let sleepTime = timePerBlock - (Date.now() - start);\r\n                        if (sleepTime > 0) await utils.sleep(sleepTime);\r\n                    } else {\r\n                        await utils.sleep(timePerBlock);\r\n                    }\r\n                } else {\r\n                    this.step();\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.error(error);\r\n            this.emit('run error', error);\r\n        }\r\n        this.running = false;\r\n        this.stopping = false;\r\n    }\r\n\r\n    stop() {\r\n        if (!this.running) throw new Error('Simulation already stopped');\r\n        if (this.stopping) throw new Error('Simulation already stopping');\r\n        this.stopping = true;\r\n    }\r\n\r\n    run() {\r\n        if (this.running) throw new Error('Simulation already running');\r\n        if (this.stopping) throw new Error('Simulation stopping');\r\n        this.running = true;\r\n        this.stopping = false;\r\n        setTimeout(this.runner.bind(this));\r\n    }\r\n\r\n    isWaitingInput() {\r\n        return this.waitingInput;\r\n    }\r\n\r\n    isRunning() {\r\n        return this.running;\r\n    }\r\n\r\n    isStopping() {\r\n        return this.stopping;\r\n    }\r\n\r\n    hasEnded() {\r\n        return this.ended;\r\n    }\r\n\r\n    getNextInputByte() {\r\n        let byte = this.inputBytes.shift();\r\n        this.emit('input buffer', this.inputBytes);\r\n        return byte;\r\n    }\r\n\r\n    resetInput() {\r\n        this.inputBytes.length = 0;\r\n        this.emit('input buffer', this.inputBytes);\r\n        this.setWaitingInput(false);\r\n    }\r\n\r\n    addInput(inputBytes) {\r\n        for (let byte of inputBytes) \r\n            this.inputBytes.push(byte & 0xFF);\r\n        this.emit('input buffer', this.inputBytes);\r\n        if (this.isWaitingInput()) {\r\n            this.setWaitingInput(false);\r\n            this.run();\r\n        }\r\n    }\r\n\r\n    getInput() {\r\n        return this.inputBytes;\r\n    }\r\n\r\n    getRegisterBank() {\r\n        return this.registerBank;\r\n    }\r\n\r\n    getMemory() {\r\n        return this.memory;\r\n    }\r\n\r\n    getCarry() {\r\n        return this.carry;\r\n    }\r\n\r\n    setWaitingInput(waitingInput) {\r\n        this.waitingInput = waitingInput;\r\n        this.emit('waiting input', this.waitingInput);\r\n    }\r\n\r\n    setCarry(carry) {\r\n        this.carry = carry;\r\n    }\r\n\r\n    setPC(pc) {\r\n        this.pc = (pc >>> 0) & this.architecture.getMask();\r\n        this.emit('pc update', this.pc);\r\n    }\r\n\r\n    incrementPC(value) {\r\n        this.setPC(this.getPC() + value);\r\n    }\r\n\r\n    getPC() {\r\n        return this.pc;\r\n    }\r\n    \r\n    setCycles(cycles) {\r\n        this.cycles = cycles;\r\n        this.emit('cycles update', this.cycles);\r\n    }\r\n\r\n    incrementCycles(value) {\r\n        this.cycles += value;\r\n        this.emit('cycles update', this.cycles);\r\n    }\r\n\r\n    getCycles() {\r\n        return this.cycles;\r\n    }\r\n\r\n    getArchitecture() {\r\n        return this.architecture;\r\n    }\r\n\r\n    setBreakpointHandler(handler) {\r\n        if (!handler) return this.breakpointHandler = defaultBreakpointHandler;\r\n        if (typeof handler != 'function') throw new Error('handler isnt function');\r\n        this.breakpointHandler = handler;\r\n    }\r\n\r\n    setStepInterval(ms) {\r\n        this.stepInterval = ms;\r\n    }\r\n\r\n    getStepInterval() {\r\n        return this.stepInterval;\r\n    }\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Home_container__1pCbS\",\"windowsContainer\":\"Home_windowsContainer__1a4xb\",\"aboutContainer\":\"Home_aboutContainer__31sEf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Simulator_container__1Th6t\",\"rightArea\":\"Simulator_rightArea__3sIft\"};","import styles from './Simulator.module.css'\r\nimport { Box } from \"@material-ui/core\";\r\nimport { Component, createRef } from 'react';\r\nimport Registers from '../registers/Registers.module';\r\nimport Memory from '../../business/asm/simulator/memory';\r\nimport architectureManager from '../../business/asm/architectureManager';\r\nimport RegisterBank from '../../business/asm/simulator/registerBank';\r\nimport Simulation from '../../business/asm/simulator/simulation';\r\nimport pseudoManager from '../../business/asm/pseudoInstructionConversions/pseudoManager';\r\nimport PseudoConverter from '../../business/asm/pseudoInstructionConversions/pseudoConverter';\r\nimport Assembler from '../../business/asm/assembler/assembler';\r\nimport Disassembler from '../../business/asm/disassembler/disassembler';\r\n// eslint-disable-next-line\r\nimport asm from '../../business/index';\r\nimport Program from '../program/Program.module';\r\nimport SymbolTable from '../symbolTable/SymbolTable.module';\r\nimport Control from '../control/Control.module';\r\nimport Console from '../console/Console.module';\r\nimport Assembled from '../assembled/Assembled.module';\r\nimport MemoryViewer from '../memoryViewer/MemoryViewer.module';\r\nimport Home from '../home/Home.module';\r\nimport utils from '../../utils';\r\n\r\nconst defaultProgramData =\r\n`main\r\n    ldw\tsr,writec\r\n    ldi\tr4,str\r\n    ldi\tr3,loop\r\nloop\r\n    ldb\tr2,r4\r\n    stw\tr2,sr\r\n    add\tr4,1\r\n    bnz\tr2,r3\r\n    hcf\r\n\r\nwritec\t0xf000\r\nstr\t\"hello world!\"`;\r\n\r\nclass Simulator extends Component {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.programRef = createRef();\r\n\t\tthis.assembledRef = createRef();\r\n\t\tthis.symbolTableRef = createRef();\r\n\t\tthis.registersRef = createRef();\r\n\t\tthis.controlRef = createRef();\r\n\t\tthis.consoleRef = createRef();\r\n\r\n\t\tthis.curArchitecture = architectureManager.getViking16Arch();\r\n\t\tthis.memory = Memory.createFromArchitecture(this.curArchitecture);\r\n\t\tthis.registerBank = RegisterBank.createFromArchitecture(this.curArchitecture);\r\n\t\tthis.simulation = new Simulation(this.curArchitecture, this.memory, this.registerBank);\r\n\r\n\t\tthis.state = {\r\n\t\t\tstepDelay: 50,\r\n\t\t};\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.simulationOnRunErrorHandler = (error) => {\r\n\t\t\tthis.consoleRef.current.writeLine('');\r\n\t\t\tthis.consoleRef.current.writeLine('[Error | Simulation] ' + error.message);\r\n\t\t};\r\n\t\t\r\n\t\tthis.simulationOnRunEndedHandler = () => {\r\n\t\t\tthis.consoleRef.current.writeLine('');\r\n\t\t\tthis.consoleRef.current.writeLine('[Info | Simulation] run ended.');\r\n\t\t};\r\n\t\t\r\n\t\tthis.simulationOnBreakpointHandler = (pc) => {\r\n\t\t\tthis.consoleRef.current.writeLine('');\r\n\t\t\tthis.consoleRef.current.writeLine('[Info | Simulation] breakpoint at PC=' + pc.toString(16));\r\n\t\t};\r\n\t\t\r\n\t\tthis.simulationWriteCharHandler = (char) => {\r\n\t\t\tif (char.charCodeAt(0) !== 0) {\r\n\t\t\t\tthis.consoleRef.current.write(char);\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\tthis.simulationWriteIntHandler = (int) => {\r\n\t\t\tthis.consoleRef.current.write(String(int));\r\n\t\t};\r\n\t\t\r\n    this.simulationPcUpdateHandler = utils.callLimiter((pc) => {\r\n      this.assembledRef.current.setCurrentPC(pc);\r\n\t\t\tthis.registersRef.current.setPC(pc);\r\n    }, 20);\r\n\r\n\t\tthis.simulationInBufHandler = (inputBuffer) => {\r\n\t\t\tthis.consoleRef.current.setInputBuffer(inputBuffer);\r\n\t\t};\r\n\t\t\r\n    this.simulationCyclesUpdateHandler = utils.callLimiter((cycles) => {\r\n      this.controlRef.current.setCycles(cycles);\r\n    }, 50);\r\n\r\n\t\tthis.simulationWaitingInputHandler = (waitingInput) => {\r\n\t\t\tthis.consoleRef.current.setInputAlert(waitingInput);\r\n\t\t};\r\n\t\t\r\n    this.simulation.setBreakpointHandler((_, pc) => {\r\n      return this.assembledRef.current.hasBreakpoint(pc);\r\n    });\r\n\r\n\t\tthis.simulation.on('run error', this.simulationOnRunErrorHandler);\r\n\t\tthis.simulation.on('run ended', this.simulationOnRunEndedHandler);\r\n\t\tthis.simulation.on('breakpoint', this.simulationOnBreakpointHandler);\r\n\t\tthis.simulation.on('console write char', this.simulationWriteCharHandler);\r\n\t\tthis.simulation.on('console write int', this.simulationWriteIntHandler);\r\n    this.simulation.on('pc update', this.simulationPcUpdateHandler);\r\n\t\tthis.simulation.on('input buffer', this.simulationInBufHandler);\r\n    this.simulation.on('cycles update', this.simulationCyclesUpdateHandler);\r\n\t\tthis.simulation.on('waiting input', this.simulationWaitingInputHandler);\r\n\r\n\t\tthis.loadAsmCode();\r\n\t\t\r\n\t\t// Open Memory Viewer\r\n\t\tHome.instance.spawnWindow(\"MemViewer\", \"Memory Viewer\", 440, 420, <MemoryViewer memory={this.memory} />);\r\n\t}\r\n\r\n\tcomponentWillUnmount() {\r\n\t\tthis.simulation.off('run error', this.simulationOnRunErrorHandler);\r\n\t\tthis.simulation.off('run ended', this.simulationOnRunEndedHandler);\r\n\t\tthis.simulation.off('breakpoint', this.simulationOnBreakpointHandler);\r\n\t\tthis.simulation.off('console write char', this.simulationWriteCharHandler);\r\n\t\tthis.simulation.off('console write int', this.simulationWriteIntHandler);\r\n    this.simulation.off('pc update', this.simulationPcUpdateHandler);\r\n\t\tthis.simulation.off('input buffer', this.simulationInBufHandler);\r\n    this.simulation.off('cycles update', this.simulationCyclesUpdateHandler);\r\n\t\tthis.simulation.off('waiting input', this.simulationWaitingInputHandler);\r\n\t}\r\n\r\n\tloadAsmCode() {\r\n\t\tconsole.log('Load asm code');\r\n\t\tlet asmCode = localStorage.getItem('asmCode');\r\n\t\tif (asmCode) {\r\n\t\t\tthis.loadSaved();\r\n\t\t} else {\r\n\t\t\tthis.loadDefault();\r\n\t\t}\r\n\t}\r\n\r\n\tonInput(text) {\r\n\t\tlet inputBytes = new Array(text.length + 1);\r\n\t\tlet buffer = Buffer.from(text);\r\n\t\tfor (let i = 0; i < text.length; i++) {\r\n\t\t\t\tinputBytes[i] = buffer[i];\r\n\t\t}\r\n\t\t// Add \\0 byte on end\r\n\t\tinputBytes[text.length] = 0;\r\n\t\tthis.simulation.addInput(inputBytes);\r\n\t}\r\n\r\n\tassemble() {\r\n\t\tlet programData = this.programRef.current.getText();\r\n\t\ttry {\r\n\t\t\tlet pseudoInstructions = pseudoManager.getPseudoInstructions();\r\n\t\t\tlet pseudoConverter = new PseudoConverter(pseudoInstructions);\r\n\r\n\t\t\tlet assembler = new Assembler(this.curArchitecture, programData, pseudoConverter);\r\n\t\t\tlet assemblerResult = assembler.assemble();\r\n\t\t\tthis.curAssembleResult = assemblerResult;\r\n\r\n\t\t\tlet disassembler = new Disassembler(this.curArchitecture);\r\n\t\t\tlet disassemblerResult = disassembler.disassemble(assemblerResult.rawObjectCode);\r\n\r\n\t\t\tlet { symbolTable } = assemblerResult;\r\n\t\t\tlet disassembly = disassemblerResult.map(x => ({value: x.value, pc: x.pc, code: x.code}) );\r\n\r\n\t\t\tlet result = { symbolTable, disassembly };\r\n\r\n\t\t\tthis.simulation.setRawObjCode(assemblerResult.rawObjectCode);\r\n\t\t\tthis.simulation.reset();\r\n\r\n\t\t\tthis.assembledRef.current.setAssembled(result.disassembly.map(x => x.value).join('\\n'));\r\n\t\t\tthis.symbolTableRef.current.setSymbolTable(symbolTable);\r\n\t\t\tthis.consoleRef.current.writeLine('[Info | Assembler] Successfully assembled');\r\n\r\n\t\t\treturn result;\r\n\t\t} catch (exc) {\r\n\t\t\tconsole.error(exc);\r\n\t\t\tthis.consoleRef.current.writeLine('[Error | Assembler] ' + exc.message);\r\n\t\t}\r\n\t}\r\n\t\r\n\tasync run() {\r\n\t\tif (this.simulation.isRunning()) return;\r\n\t\t\r\n\t\t// If simulation is already ended -> reset\r\n\t\tif (this.simulation.hasEnded()) {\r\n\t\t\tthis.simulation.reset();\r\n\t\t\tawait utils.sleep(100);\r\n\t\t}\r\n\r\n\t\t// If auto-assemble & program changed, assemble\r\n\t\tlet curText = this.programRef.current.getText();\r\n\t\tif (this.controlRef.current.getAutoAssemble()) {\r\n\t\t\tif (this.lastText !== curText) {\r\n\t\t\t\tif (!this.assemble()) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.lastText = curText;\r\n\t\t}\r\n\t\t\r\n\t\ttry {\r\n\t\t\tthis.simulation.run();\r\n\t\t} catch (exc) {\r\n\t\t\tthis.consoleRef.current.writeLine(exc);\r\n\t\t}\r\n\t}\r\n\r\n\tpause() {\r\n\t\ttry {\r\n\t\t\tthis.simulation.stop();\r\n\t\t} catch (exc) {\r\n\t\t\tthis.consoleRef.current.writeLine(exc);\r\n\t\t}\r\n\t}\r\n\t\r\n\tstep() {\r\n\t\ttry {\r\n\t\t\tthis.simulation.step();\r\n\t\t} catch (exc) {\r\n\t\t\tthis.consoleRef.current.writeLine(exc);\r\n\t\t}\r\n\t}\r\n\t\r\n\treset() {\r\n\t\ttry {\r\n\t\t\tthis.simulation.reset();\r\n\t\t} catch (exc) {\r\n\t\t\tthis.consoleRef.current.writeLine(exc);\r\n\t\t}\r\n\t}\r\n\r\n\tonStepIntervalChanged(stepInterval) {\r\n\t\tthis.simulation.setStepInterval(stepInterval);\r\n\t}\r\n\r\n\tonSymbolNameClick(symbol) {\r\n\t\tif (this.curAssembleResult == null) return;\r\n\t\tlet additionInfo = this.curAssembleResult.additionalInfos.find(x => x && x.parsed && x.parsed.symbol === symbol.symbolName);\r\n\t\tif (additionInfo == null) return;\r\n\t\tlet { lineNumber } = additionInfo;\r\n\t\tthis.programRef.current.highlightLine(lineNumber);\r\n\t}\r\n\t\r\n\tonSymbolValueClick(symbol) {\r\n\t\tthis.assembledRef.current.setCurrentPC(symbol.symbolValue);\r\n\t}\r\n\r\n\tsave(code) {\r\n\t\ttry {\r\n\t\t\tlocalStorage.setItem('asmCode', code);\r\n\t\t\treturn true;\r\n\t\t} catch (exc) {\r\n\t\t\tconsole.error(exc);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\tloadSaved() {\r\n\t\tlet asmCode = localStorage.getItem('asmCode');\r\n\t\tthis.programRef.current.setText(asmCode);\r\n\t}\r\n\r\n\tloadDefault() {\r\n\t\tthis.programRef.current.setText(defaultProgramData);\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className={styles.container}>\r\n\t\t\t\t<Box display=\"flex\" flexDirection=\"column\" width=\"100%\" height=\"100%\">\r\n\t\t\t\t\t<Box display=\"flex\" flexDirection=\"row\" flex=\"1\" overflow=\"auto\">\r\n\t\t\t\t\t\t<Program\r\n\t\t\t\t\t\t\tcurArchitecture={this.curArchitecture}\r\n\t\t\t\t\t\t\tonSaveRequest={this.save.bind(this)}\r\n\t\t\t\t\t\t\tonLoadSavedRequest={this.loadSaved.bind(this)}\r\n\t\t\t\t\t\t\tonLoadDefaultRequest={this.loadDefault.bind(this)}\r\n\t\t\t\t\t\t\tref={this.programRef} />\r\n\t\t\t\t\t\t<Assembled ref={this.assembledRef} />\r\n\t\t\t\t\t\t<SymbolTable\r\n\t\t\t\t\t\t\tarchitecture={this.curArchitecture}\r\n\t\t\t\t\t\t\tonSymbolNameClick={this.onSymbolNameClick.bind(this)}\r\n\t\t\t\t\t\t\tonSymbolValueClick={this.onSymbolValueClick.bind(this)}\r\n\t\t\t\t\t\t\tref={this.symbolTableRef} />\r\n\t\t\t\t\t\t<Box className={styles.rightArea} display=\"flex\" flexDirection=\"column\" justifyContent=\"space-between\" flex=\"1\" overflow=\"auto\">\r\n\t\t\t\t\t\t\t<Registers registerBank={this.registerBank} ref={this.registersRef} />\r\n\t\t\t\t\t\t\t<Control\r\n\t\t\t\t\t\t\t\tonAssemble={this.assemble.bind(this)}\r\n\t\t\t\t\t\t\t\tonRun={this.run.bind(this)}\r\n\t\t\t\t\t\t\t\tonPause={this.pause.bind(this)}\r\n\t\t\t\t\t\t\t\tonStep={this.step.bind(this)}\r\n\t\t\t\t\t\t\t\tonReset={this.reset.bind(this)}\r\n\t\t\t\t\t\t\t\tonStepIntervalChanged={this.onStepIntervalChanged.bind(this)}\r\n\t\t\t\t\t\t\t\tref={this.controlRef} />\r\n\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t</Box>\r\n\t\t\t\t\t<Console onInput={this.onInput.bind(this)} ref={this.consoleRef} />\r\n\t\t\t\t</Box>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Simulator;\r\n","import styles from './Registers.module.css';\r\nimport { Component } from \"react\";\r\nimport utils from '../../utils';\r\n\r\nclass Registers extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    if (!props.registerBank) throw new Error('props.registerBank null');\r\n\r\n    this.registerBank = props.registerBank;\r\n\r\n    this.registerInfos = Object.entries(this.registerBank.getRegisterInfos());\r\n    \r\n    this.state = {\r\n      pc: 0,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.valueUpdateHandler = utils.callLimiter(() => {\r\n      this.setState({});\r\n    }, 50);\r\n    this.registerBank.on('value update', this.valueUpdateHandler);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.registerBank.off('value update', this.valueUpdateHandler);\r\n  }\r\n\r\n  setPC(pc) {\r\n    this.setState({pc});\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={styles.container}>\r\n        <div className={styles.title}>Registers</div>\r\n        \r\n        <div className={styles.content}>\r\n          <div className={styles.generalRegisterList}>\r\n            { this.registerInfos.map(([name, infos], i) => <Register key={i} name={name} aliases={infos.aliases} value={this.registerBank.getUValue(name)} />) }\r\n          </div>\r\n          \r\n          <div className={styles.pcRegister}>\r\n            <Register name=\"pc\" aliases={[]} value={this.state.pc} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Register extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.props = props;\r\n  }\r\n\r\n  render() { \r\n    return (\r\n      <div className={styles.registerContainer}>\r\n        <div>{this.props.name}{this.props.aliases.length > 0 ? (' (' + this.props.aliases.join(',') + ')') : ''}</div>\r\n        <div>{this.props.value.toString(16).padStart(4, '0')}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n \r\nexport default Registers;","import Editor from '@monaco-editor/react';\r\nimport { Component, createRef } from 'react';\r\nimport operationsManager from '../../business/asm/operations/operationsManager';\r\nimport styles from './Program.module.css'\r\n\r\nlet alreadyCreatedLang = false;\r\n\r\nclass Program extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    if (props.curArchitecture == null) throw new Error('props.curArchitecture null');\r\n\r\n    this.infosRef = createRef();\r\n\r\n    this.onChange = typeof props.onChange === 'function' ? props.onChange : ()=>{};\r\n    this.onLoadSavedRequest = typeof props.onLoadSavedRequest === 'function' ? props.onLoadSavedRequest : ()=>{};\r\n    this.onLoadDefaultRequest = typeof props.onLoadDefaultRequest === 'function' ? props.onLoadDefaultRequest : ()=>{};\r\n    this.onSaveRequest = typeof props.onSaveRequest === 'function' ? props.onSaveRequest : ()=>{};\r\n\r\n    this.opsNames = operationsManager.getOperationNames();\r\n    this.regNames = props.curArchitecture.getRegisterNames();\r\n\r\n    this.state = {  }\r\n  }\r\n\r\n  onEditorWillMount(monaco) {\r\n    this.monaco = monaco;\r\n\r\n    if (alreadyCreatedLang) return;\r\n    alreadyCreatedLang = true;\r\n\r\n    monaco.languages.register({ id: 'vikingAsm' });\r\n        \r\n    monaco.languages.setMonarchTokensProvider('vikingAsm', {\r\n\r\n      operationKeywords: this.opsNames,\r\n      registerKeywords: this.regNames,\r\n\r\n      decimalNumbers: /\\d+/,\r\n      hexNumbers: /(?:0x|0B)[\\da-fA-F]+/,\r\n      \r\n      escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\r\n\r\n      tokenizer: {\r\n        root: [\r\n          [ /\\b@hexNumbers|@decimalNumbers\\b/i, 'number' ],\r\n          [\r\n            /\\b\\w+\\b/,\r\n            {\r\n              cases: {\r\n                '@operationKeywords': 'operationKeywords',\r\n                '@registerKeywords': 'registersKeyWords',\r\n                '@default': 'symbols',\r\n              },\r\n            },\r\n          ],\r\n\r\n          [/^[ \\t]*(?:(?:\\/\\/)|;).*$/,    'comment'],\r\n\r\n          // strings\r\n          [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid' ],  // non-teminated string\r\n          [/\"/, { token: 'string.quote', bracket: '@open', next: '@string' } ],\r\n        ],\r\n        string: [\r\n          [/[^\\\\\"]+/,  'string'],\r\n          [/@escapes/, 'string.escape'],\r\n          [/\\\\./,      'string.escape.invalid'],\r\n          [/\"/,        { token: 'string.quote', bracket: '@close', next: '@pop' } ]\r\n        ],\r\n      },\r\n    });\r\n\r\n    monaco.languages.registerCompletionItemProvider('vikingAsm', {\r\n      provideCompletionItems: () => {\r\n        let suggestions = this.opsNames.map(opName => ({\r\n          label: opName,\r\n          detail: '...',\r\n          documentation: '...',\r\n          kind: monaco.languages.CompletionItemKind.Function,\r\n          insertText: opName,\r\n        }));\r\n        return { suggestions: suggestions };\r\n      }\r\n    });\r\n    \r\n    monaco.editor.defineTheme('vikinAsmTheme', {\r\n      base: 'vs-dark',\r\n      inherit: true,\r\n      rules: [\r\n        { token: 'operationKeywords', foreground: 'e55283' },\r\n        { token: 'registersKeyWords', foreground: 'ffc100' },\r\n        { token: 'symbols', foreground: '92db57' },\r\n        { token: 'number', foreground: '7d81ea' }\r\n      ],\r\n    });\r\n  }\r\n\r\n  onEditorMount(editor, monaco) {\r\n    this.editor = editor;\r\n    \r\n    this.editor.getModel().onDidChangeContent(this.onChange);\r\n    this.onChange();\r\n    \r\n    if (this.initText) {\r\n      this.editor.setValue(this.initText);\r\n    }\r\n\r\n    this.saveBindHandler = this.editor.addCommand(monaco.KeyMod.CtrlCmd | monaco.KeyCode.KEY_S, this.save.bind(this));\r\n  }\r\n\r\n  getText() {\r\n    if (this.editor == null) return '';\r\n    return this.editor.getValue();\r\n  }\r\n\r\n  setText(text) {\r\n    this.initText = text;\r\n    if (this.editor == null) return;\r\n    let fullRange = this.editor.getModel().getFullModelRange();\r\n    this.editor.executeEdits(null, [{ text: '', range: fullRange }]);\r\n    this.editor.executeEdits(null, [{ text, range: fullRange }]);\r\n  }\r\n\r\n  setInfos(infos) {\r\n    this.infosRef.current.textContent = infos;\r\n    setTimeout(() => this.infosRef.current.textContent = '', 3000);\r\n  }\r\n\r\n  highlightLine(lineNumber) {\r\n    let lineCount = this.editor.getModel().getLineCount();\r\n    if (lineNumber <= 0 || lineNumber > lineCount) return;\r\n    let lineDec = [\r\n      {\r\n        range: new this.monaco.Range(lineNumber, 1, lineNumber, 1),\r\n        options: {\r\n          isWholeLine: true,\r\n          className: styles.curLineHighlight,\r\n        }\r\n      }\r\n    ];\r\n    this.editor.revealLine(lineNumber);\r\n    let decId = this.editor.deltaDecorations([], lineDec);\r\n    setTimeout(() => this.editor.deltaDecorations(decId, []), 500);\r\n  }\r\n\r\n  save() {\r\n    let code = this.editor.getValue();\r\n    if (this.onSaveRequest(code) === true) {\r\n      this.setInfos('Saved');\r\n    } else {\r\n      console.error('Save error');\r\n    }\r\n  }\r\n\r\n  loadSaved() {\r\n    this.onLoadSavedRequest();\r\n  }\r\n\r\n  loadDefault() {\r\n    this.onLoadDefaultRequest();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={styles.container}>\r\n        <div className={styles.titleContainer}>\r\n          <div>Program</div>\r\n          <div className={styles.infos} ref={this.infosRef}></div>\r\n          <div>\r\n            <button className={styles.btn} onClick={this.save.bind(this)}>Save</button>\r\n            <button className={styles.btn} onClick={this.loadSaved.bind(this)}>Load</button>\r\n            <button className={styles.btn} onClick={this.loadDefault.bind(this)}>Load Example</button>\r\n          </div>\r\n        </div>\r\n        <Editor\r\n          className={styles.editor}          \r\n          language='vikingAsm'\r\n          theme='vikinAsmTheme'\r\n          beforeMount={this.onEditorWillMount.bind(this)}\r\n          onMount={this.onEditorMount.bind(this)}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n \r\nexport default Program;","import { Component } from 'react';\r\nimport utils from '../../utils';\r\nimport styles from './SymbolTable.module.css'\r\n\r\nclass SymbolTable extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    if (!props.architecture) throw new Error('props.architecture null');\r\n    this.architecture = props.architecture;\r\n\r\n    this.onSymbolNameClick = typeof props.onSymbolNameClick === 'function' ? props.onSymbolNameClick : ()=>{};\r\n    this.onSymbolValueClick = typeof props.onSymbolValueClick === 'function' ? props.onSymbolValueClick : ()=>{};\r\n\r\n    this.state = {\r\n      symbols: [],\r\n    }\r\n  }\r\n\r\n  setSymbolTable(symbolTable) {\r\n    let symbols = Object.entries(symbolTable).map(([symbolName, symbolValue]) => ({ symbolName, symbolValue }));\r\n    this.setState({ symbols });\r\n  }\r\n\r\n  render() { \r\n    return (\r\n      <div className={styles.container}>\r\n        <div className={styles.title}>Symbol Table</div>\r\n        <div className={styles.content}>\r\n          <table border=\"1\" frame=\"void\" rules=\"rows\">\r\n            <tbody>\r\n              {\r\n                this.state.symbols.map((symbol, id) => (\r\n                  <tr key={id}>\r\n                    <td className={styles.symbolName} onClick={()=>this.onSymbolNameClick(symbol)}>{symbol.symbolName}</td>\r\n                    <td className={styles.symbolValue} onClick={()=>this.onSymbolValueClick(symbol)}>{'0x'+utils.signedNumberToHex(symbol.symbolValue, this.architecture.getByteWidth())}</td>\r\n                  </tr>\r\n                ))\r\n              }\r\n              {\r\n                (this.state.symbols && this.state.symbols.length > 0) ? <tr className={styles.fillAllSpace}></tr> : <tr/>\r\n              }\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n \r\nexport default SymbolTable;","import { Component, createRef } from \"react\";\r\nimport styles from './Console.module.css';\r\n\r\nclass Console extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    \r\n    this.onInput = typeof props.onInput === 'function' ? props.onInput : ()=>{};\r\n\r\n    this.inputRef = createRef();\r\n    this.outputRef = createRef();\r\n\r\n    this.state = {\r\n      inputAlert: false,\r\n      inputBuffer: Buffer.from([]),\r\n    };\r\n  }\r\n\r\n  setInputAlert(inputAlert) {\r\n    this.setState({inputAlert});\r\n    if (inputAlert) {\r\n      this.inputRef.current.focus();\r\n    }\r\n  }\r\n\r\n  setInputBuffer(inputBuffer) {\r\n    this.setState({inputBuffer});\r\n  }\r\n\r\n  write(text) {\r\n    this.outputRef.current.value += text;\r\n    this.outputRef.current.scrollTop = this.outputRef.current.scrollHeight;\r\n  }\r\n\r\n  writeLine(text) {\r\n    this.outputRef.current.value += text + '\\n';\r\n    this.outputRef.current.scrollTop = this.outputRef.current.scrollHeight;\r\n  }\r\n\r\n  inputKeyDown(e) {\r\n    if (e.key.toLowerCase() === 'enter') {\r\n      let text = e.target.value;\r\n      if (text.length > 0) {\r\n        e.target.value = '';\r\n        this.onInput(text);\r\n      }\r\n    }\r\n  }\r\n\r\n  render() { \r\n    return (\r\n      <div className={styles.container}>\r\n        <div className={styles.outAndInBufContainer}>\r\n          <div className={styles.output}>\r\n            <textarea readOnly spellCheck='false' ref={this.outputRef}></textarea>\r\n          </div>\r\n          <div className={styles.inputBuffer}>\r\n            <div className={styles.title}>Input Buffer</div>\r\n            <textarea readOnly spellCheck='false' value={this.state.inputBuffer.map(x => x.toString(16).padStart(2, '0')).join(' ')}></textarea>\r\n          </div>\r\n        </div>\r\n        <input\r\n          className={(this.state.inputAlert ? (styles.alertsOutline + ' ') : '') + styles.inputText}\r\n          placeholder=\"input...\"\r\n          id='inputText'\r\n          onKeyDown={this.inputKeyDown.bind(this)}\r\n          ref={this.inputRef} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n \r\nexport default Console;","import { Component } from \"react\";\r\nimport Editor from \"@monaco-editor/react\";\r\nimport styles from './Assembled.module.css';\r\n\r\nconst GUTTER_GLYPH_MARGIN = 2;\r\n\r\nclass Assembled extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    \r\n    this.breakpointDecorations = {};\r\n    this.pcBreakpoints = new Set();\r\n    this.curLineRunningDecorationId = null;\r\n    this.curLineRunningDecoration = null;\r\n    this.monaco = null;\r\n    this.editor = null;\r\n\r\n    this.state = {  };\r\n  }\r\n\r\n  hasBreakpoint(pc) {\r\n    return this.pcBreakpoints.has(pc);\r\n  }\r\n\r\n  toggleBreakpoint(pc) {\r\n    if (this.pcBreakpoints.has(pc)) {\r\n      this.removeBreakpoint(pc);\r\n    } else {\r\n      this.setBreakpoint(pc);\r\n    }\r\n  }\r\n  \r\n  setBreakpoint(pc) {\r\n    if (this.editor == null) return;\r\n    if (this.pcBreakpoints.has(pc)) return;\r\n\r\n    let lineNumber = pc / 2 + 1;    \r\n    let lineCount = this.editor.getModel().getLineCount();\r\n    if (lineNumber <= 0 || lineNumber > lineCount) return;\r\n\r\n    this.pcBreakpoints.add(pc);\r\n    let bpDec = this.editor.deltaDecorations([], [\r\n      {\r\n        range: new this.monaco.Range(lineNumber, 1, lineNumber, 1),\r\n        options: {\r\n          isWholeLine: false,\r\n          glyphMarginClassName: styles.breakpoint,\r\n        },\r\n      },\r\n    ]);\r\n    this.breakpointDecorations[pc] = bpDec;\r\n  }\r\n\r\n  removeBreakpoint(pc) {\r\n    if (this.editor == null) return;\r\n    if (!this.pcBreakpoints.has(pc)) return;\r\n\r\n    this.pcBreakpoints.delete(pc);\r\n    let bpDec = this.breakpointDecorations[pc];\r\n    delete this.breakpointDecorations[pc];\r\n    this.editor.deltaDecorations(bpDec, []);\r\n  }\r\n\r\n  removeAllBreakpoints() {\r\n    for (let pc of this.pcBreakpoints) this.removeBreakpoint(pc);\r\n  }\r\n\r\n  setBreakpoints(pcs) {\r\n    this.removeAllBreakpoints();\r\n    for (let pc of pcs) this.setBreakpoint(pc);\r\n  }\r\n\r\n  setAssembled(text) {\r\n    if (this.editor == null) return;\r\n    if (typeof text !== 'string') throw new Error('Text isnt string');\r\n    \r\n    let linesCount = text.split('\\n').length;\r\n    let newBreakpointPCs = Array.from(this.pcBreakpoints).filter(pc => pc / 2 < linesCount);\r\n    this.editor.setValue(text);\r\n    this.setBreakpoints(newBreakpointPCs);\r\n    this.setCurrentPC(0);\r\n  }\r\n\r\n  setCurrentPC(pc) {\r\n    if (this.editor == null) return;\r\n    \r\n    let lineNumber = pc / 2 + 1;\r\n    let lineCount = this.editor.getModel().getLineCount();\r\n    if (lineNumber <= 0 || lineNumber > lineCount) {\r\n      this.curLineRunningDecoration = [];\r\n    } else {\r\n      this.curLineRunningDecoration = [\r\n        {\r\n          range: new this.monaco.Range(lineNumber, 1, lineNumber, 1),\r\n          options: {\r\n            isWholeLine: true,\r\n            className: styles.currentLineRunning,\r\n          }\r\n        }\r\n      ];\r\n      this.editor.revealLine(lineNumber);\r\n    }\r\n\r\n    let oldDec = this.curLineRunningDecorationId ? this.curLineRunningDecorationId : [];\r\n    this.curLineRunningDecorationId = this.editor.deltaDecorations(oldDec, this.curLineRunningDecoration);\r\n  }\r\n\r\n\tonEditorMount(editor, monaco) {\r\n\t\tthis.editor = editor;\r\n    this.monaco = monaco;\r\n\r\n\t\tlet self = this;\r\n\t\tthis.editor.updateOptions({\r\n\t\t\twordBasedSuggestions: false,\r\n\t\t\tautomaticLayout: true,\r\n\t\t\tlineDecorationsWidth: 0,\r\n\t\t\tglyphMargin: true,\r\n\t\t\tminimap: {\r\n\t\t\t\tenabled: false,\r\n\t\t\t},\r\n\t\t\tlineNumbers: (n) => ((n-1)*2).toString(16).padStart(4, '0'),\r\n\t\t\treadOnly: true,\r\n\t\t});\r\n\t\t\r\n\t\tthis.editor.onMouseDown((e) => {\r\n\t\t\tlet { target: { type, position: { lineNumber } } } = e;\r\n\t\t\tif (type !== GUTTER_GLYPH_MARGIN) return;\r\n\t\t\tlet pc = (lineNumber - 1) * 2;\r\n\t\t\tself.toggleBreakpoint(pc);\r\n\t\t});\r\n\t}\r\n\r\n  render() { \r\n    return (\r\n      <div className={styles.container}>\r\n        <div className={styles.title}>Disassembly</div>\r\n        <Editor\r\n          className={styles.editor}\r\n          language='vikingAsm'\r\n          theme='vikinAsmTheme'\r\n          onMount={this.onEditorMount.bind(this)}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n \r\nexport default Assembled;","import { Component, createRef } from \"react\";\r\nimport styles from './MemoryViewer.module.css'\r\n\r\nclass MemoryViewer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    if (!props.memory) throw new Error('props.memory null');\r\n\r\n    this.memory = props.memory;\r\n\r\n    this.tbodyRef = createRef();\r\n    this.memoryScrollRef = createRef();\r\n    this.memoryScrollAuxRef = createRef();\r\n    this.memoryAreaRef = createRef();\r\n\r\n    this.columns = 8;\r\n    this.rowsToShow = 16;\r\n    this.rows = 0;\r\n    this.dataItemBytes = 2;\r\n    this.scrollHeight = 0;\r\n    this.scrollTop = 0;\r\n    this.rowOffset = 0;\r\n    this.wordHighlightContexts = {};\r\n\r\n    this.state = {  }\r\n  }\r\n\r\n  componentDidMount() {\r\n    \r\n    // Request data count\r\n    let dataCount = null;\r\n    while(dataCount == null) dataCount = this.getDataCount();\r\n    this.rows = dataCount / this.columns / this.dataItemBytes;\r\n\r\n    // Setup scroll\r\n    this.scrollHeight = this.rows;\r\n    this.setScrollHeight(this.scrollHeight);\r\n\r\n    // Get initial data\r\n    let data = this.getData();\r\n    this.recreateTable(data);\r\n\r\n    // scroll logic\r\n    this.memoryAreaRef.current.onwheel = (e) => {\r\n      this.memoryScrollRef.current.scrollTop += e.deltaY > 0 ? 1 : -1;\r\n      e.preventDefault();\r\n    }\r\n    this.memoryScrollRef.current.onscroll = async (e) => {\r\n      this.scrollTop = this.memoryScrollRef.current.scrollTop;\r\n      this.rowOffset = Math.floor((this.rows - this.rowsToShow) * (this.scrollTop / (this.scrollHeight - this.memoryScrollRef.current.getBoundingClientRect().height)));\r\n      let data = this.getData();\r\n      this.recreateTable(data);\r\n      this.wordHighlightContexts = {};\r\n      e.preventDefault();\r\n    }\r\n\r\n    // Memory Handlers\r\n\r\n    this.onResetHandler = this.reset.bind(this);\r\n\r\n    this.onStorageWriteByteHandler = (address, byte) => {\r\n      if (address >= this.dataOffset && address < this.dataOffset + this.dataCount) {\r\n        this.updateByteAt(address, byte);\r\n      }\r\n    };\r\n    \r\n    this.onStorageWriteWordHandler = (address, word) => {\r\n      if (address >= this.dataOffset && address < this.dataOffset + this.dataCount) {\r\n        this.updateByteAt(address, (word >> 8) & 0xFF);\r\n        this.updateByteAt(address + 1, word & 0xFF);\r\n      }\r\n    };\r\n    \r\n    this.memory.on('reset', this.onResetHandler);\r\n    this.memory.on('storage write byte', this.onStorageWriteByteHandler);\r\n    this.memory.on('storage write word', this.onStorageWriteWordHandler);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.memory.off('reset', this.onResetHandler);\r\n    this.memory.off('storage write byte', this.onStorageWriteByteHandler);\r\n    this.memory.off('storage write word', this.onStorageWriteWordHandler);\r\n  }\r\n\r\n  updateByteAt(address, byte) {\r\n    let tbyteDiv = this.getByteElem(address);\r\n    tbyteDiv.textContent = byte.toString(16).padStart(2, '0');\r\n    this.highlightByte(address, tbyteDiv);\r\n  }\r\n    \r\n  getByteElem(address) {\r\n    let item = Math.floor(address / this.dataItemBytes);\r\n    let offset = address % this.dataItemBytes;\r\n\r\n    let column = item % this.columns;\r\n    let row = Math.floor(item / this.columns) - this.rowOffset;\r\n    \r\n    let tRow = this.tbodyRef.current.childNodes[row+1];\r\n    let tItem = tRow.childNodes[column+1];\r\n    let tbyteDiv = tItem.childNodes[offset];\r\n    return tbyteDiv;\r\n  }\r\n\r\n  highlightByte(address, elem) {\r\n    let ctx = this.wordHighlightContexts[address];\r\n    if (ctx) {\r\n      ctx.value = 1;\r\n    } else {\r\n      ctx = { value: 1 };\r\n      this.wordHighlightContexts[address] = ctx;\r\n\r\n      let id = setInterval(() => {\r\n        if (ctx.value <= 0) {\r\n          elem.style['background-color'] = 'rgba(255,0,0,0)';\r\n          clearInterval(id);\r\n          delete this.wordHighlightContexts[address];\r\n        } else {\r\n          elem.style['background-color'] = 'rgba(255,0,0,' + ctx.value + ')';\r\n          ctx.value -= 0.05;\r\n        }\r\n      }, 50);\r\n    }\r\n  }\r\n\r\n  setScrollHeight(height) {\r\n    this.memoryScrollAuxRef.current.style.height = height + 'px';\r\n  }\r\n\r\n  recreateTable(data) {\r\n    let rowsCount = Math.ceil(data.length / this.columns);\r\n    \r\n    let html = '';\r\n    html += '<tr>';\r\n    html += '<td>';\r\n    html += 'X';\r\n    html += '</td>';\r\n    for (let x = 0; x < this.columns * this.dataItemBytes; x += this.dataItemBytes) {\r\n      html += '<td class=\"' + styles.memoryColumnNumber + '\">';\r\n      html += x.toString(16).padStart(4, '0');\r\n      html += '</td>';\r\n    }\r\n    html += '</tr>';\r\n    \r\n    let _x = 0;\r\n    for (let y = 0; y < rowsCount; y++) {\r\n      html += '<tr>';\r\n      html += '<td class=\"' + styles.memoryRowNumber + '\">';\r\n      html += (this.rowOffset * this.dataItemBytes * this.columns + y * this.dataItemBytes * this.columns).toString(16).padStart(4, '0');\r\n      html += '</td>';\r\n      \r\n      for (let x = 0; x < this.columns; x++) {\r\n        let item = data[y * this.columns + x];\r\n        let memDataHtml = '';\r\n        for (let i = 0; i < this.dataItemBytes; i++) {\r\n          let byte = item & 0xFF;\r\n          item >>= 8;\r\n          memDataHtml = '<div style=\"display:inline\">' + byte.toString(16).padStart(2, '0') + '</div>' + memDataHtml;\r\n        }\r\n        html += '<td class=\"' + styles.memoryData + '\">' + memDataHtml + '</td>';\r\n      }\r\n      html += '</tr>';\r\n      if (_x === this.columns) {\r\n          _x = 0;\r\n      }\r\n    }\r\n\r\n    this.tbodyRef.current.innerHTML = html;\r\n  }\r\n\r\n  reset() {\r\n    for (let i = this.dataOffset; i < this.dataOffset + this.dataCount; i++) {\r\n      let tbyteDiv = this.getByteElem(i);\r\n      tbyteDiv.textContent = '00';\r\n    }\r\n  }\r\n\r\n  getDataCount() {\r\n    return this.memory.getDataLength();\r\n  }\r\n\r\n  getData() {\r\n    this.dataOffset = this.rowOffset * this.columns * 2;\r\n    this.dataCount = this.columns * this.rowsToShow * 2;\r\n    let data = this.memory.getWordsFromRange(this.dataOffset, this.dataOffset + this.dataCount);\r\n    return data;\r\n  }\r\n\r\n  render() { \r\n    return (\r\n      <div className={styles.container}>\r\n        <div className={styles.content}>\r\n          <div className={styles.memoryScroll} ref={this.memoryScrollRef}><div ref={this.memoryScrollAuxRef}></div></div>\r\n          <div className={styles.memoryAreaContainer}>\r\n            <table className={styles.memoryArea} ref={this.memoryAreaRef}>\r\n              <tbody ref={this.tbodyRef}></tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n \r\nexport default MemoryViewer;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__2U2M-\"};","var _g;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgAssembleIcon(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: \"900.000000pt\",\n    height: \"900.000000pt\",\n    viewBox: \"0 0 900.000000 900.000000\",\n    preserveAspectRatio: \"xMidYMid meet\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    transform: \"translate(0.000000,900.000000) scale(0.100000,-0.100000)\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M4200 8359 c-824 -72 -1550 -366 -2177 -883 -59 -49 -180 -162 -268 -250 -619 -622 -995 -1403 -1101 -2291 -14 -112 -18 -223 -18 -435 0 -308 13 -468 60 -715 185 -965 709 -1805 1492 -2390 1009 -753 2342 -966 3542 -565 1330 444 2320 1583 2574 2960 38 207 56 385 63 610 27 938 -288 1847 -892 2577 -114 139 -359 384 -498 498 -590 488 -1267 777 -2042 871 -155 18 -586 26 -735 13z m2535 -1278 c22 -10 54 -34 71 -52 23 -25 265 -406 328 -516 15 -26 23 -106 15 -148 -17 -91 -46 -117 -310 -281 -134 -84 -258 -159 -275 -168 -87 -43 -199 -24 -265 47 -37 39 -280 422 -330 519 -44 86 -25 200 44 268 32 30 475 311 532 336 44 20 143 17 190 -5z m-1186 -212 c40 -22 79 -69 100 -119 15 -34 149 -531 157 -578 12 -73 -26 -157 -96 -213 -28 -23 -93 -45 -329 -109 -161 -44 -312 -80 -335 -80 -80 0 -179 66 -208 139 -6 14 -43 148 -84 296 -78 285 -87 345 -59 413 40 94 75 112 402 203 322 89 371 94 452 48z m-1330 -245 c64 -32 106 -87 121 -157 16 -82 40 -589 29 -638 -18 -81 -62 -134 -134 -165 -42 -18 -373 -43 -585 -43 -117 -1 -165 14 -215 65 -58 61 -63 85 -81 422 -16 297 -16 314 1 358 23 60 65 107 119 134 37 17 78 22 277 34 374 21 406 21 468 -10z m-1325 -88 c66 -20 110 -57 140 -118 l26 -52 0 -320 c0 -301 -2 -324 -21 -366 -27 -60 -54 -88 -114 -116 -49 -23 -55 -24 -371 -24 l-320 0 -52 26 c-63 31 -107 88 -122 158 -8 34 -11 153 -8 351 3 270 5 304 22 335 36 69 92 114 161 131 17 4 161 7 321 8 224 1 302 -2 338 -13z m3649 -950 c142 -53 271 -103 287 -111 73 -38 127 -143 118 -228 -5 -38 -182 -537 -214 -598 -36 -72 -142 -126 -227 -117 -39 5 -538 182 -597 213 -39 20 -96 87 -110 130 -22 68 -7 136 94 407 52 141 102 271 111 287 21 41 62 79 110 102 73 36 137 23 428 -85z m-1233 -17 c61 -14 114 -51 146 -100 25 -40 71 -245 129 -577 25 -143 -12 -235 -117 -285 -62 -30 -561 -130 -645 -129 -93 1 -182 67 -212 157 -19 57 -112 558 -113 606 0 60 8 83 43 136 46 66 98 85 399 142 146 28 274 52 285 54 32 7 38 7 85 -4z m-1174 -147 c21 -11 51 -33 66 -49 53 -56 59 -87 81 -419 20 -300 20 -313 3 -358 -31 -81 -90 -133 -171 -150 -44 -9 -467 -36 -564 -36 -98 0 -151 20 -200 76 -47 53 -58 114 -77 429 -20 343 -18 355 56 427 27 26 66 52 87 58 45 14 544 50 624 45 30 -1 73 -12 95 -23z m-1242 -56 c66 -20 110 -57 140 -118 l26 -52 0 -320 c0 -301 -2 -324 -21 -366 -27 -60 -54 -88 -114 -116 -49 -23 -55 -24 -371 -24 l-320 0 -52 26 c-63 31 -107 88 -122 158 -8 34 -11 153 -8 351 3 270 5 304 22 335 36 69 92 114 161 131 17 4 161 7 321 8 224 1 302 -2 338 -13z m3289 -1096 c319 -33 338 -38 400 -111 62 -71 63 -100 28 -442 -19 -180 -37 -313 -47 -337 -21 -53 -92 -114 -150 -130 -41 -12 -84 -10 -356 18 -334 35 -353 39 -415 104 -42 43 -63 96 -63 155 0 26 13 173 29 326 24 225 33 286 51 322 35 72 118 124 201 125 19 0 165 -13 322 -30z m-1053 -4 c138 -4 184 -20 239 -82 62 -71 65 -92 54 -447 -8 -291 -10 -315 -30 -353 -25 -48 -72 -90 -123 -112 -50 -21 -657 -12 -711 11 -55 23 -104 72 -129 129 -22 51 -22 56 -16 348 4 162 12 316 17 342 12 51 64 120 110 143 61 32 147 35 589 21z m-2236 -50 c66 -20 110 -57 140 -118 l26 -52 0 -320 c0 -301 -2 -324 -21 -366 -27 -60 -54 -88 -114 -116 -49 -23 -55 -24 -371 -24 l-320 0 -52 26 c-63 31 -107 88 -122 158 -8 34 -11 153 -8 351 3 270 5 304 22 335 36 69 92 114 161 131 17 4 161 7 321 8 224 1 302 -2 338 -13z m1170 0 c66 -20 110 -57 140 -118 l26 -52 0 -320 c0 -301 -2 -324 -21 -366 -27 -60 -54 -88 -114 -116 -49 -23 -55 -24 -371 -24 l-320 0 -52 26 c-63 31 -107 88 -122 158 -8 34 -11 153 -8 351 3 270 5 304 22 335 36 69 92 114 161 131 17 4 161 7 321 8 224 1 302 -2 338 -13z m-1178 -1159 c68 -18 118 -58 149 -120 l25 -51 0 -314 c0 -210 -4 -328 -12 -353 -15 -52 -73 -117 -122 -140 -37 -17 -72 -19 -366 -19 -323 0 -325 0 -377 24 -63 30 -107 87 -123 159 -8 35 -10 153 -8 352 3 270 5 304 22 335 36 69 92 114 161 131 56 13 596 10 651 -4z m1170 0 c68 -18 118 -58 149 -120 l25 -51 0 -314 c0 -210 -4 -328 -12 -353 -15 -52 -73 -117 -122 -140 -37 -17 -72 -19 -366 -19 -323 0 -325 0 -377 24 -63 30 -107 87 -123 159 -8 35 -10 153 -8 352 3 270 5 304 22 335 36 69 92 114 161 131 56 13 596 10 651 -4z m1199 -10 c54 -24 93 -63 119 -117 20 -42 21 -64 24 -332 2 -170 -1 -309 -7 -342 -14 -78 -58 -137 -123 -170 l-52 -26 -325 0 c-363 0 -372 2 -438 70 -62 64 -64 79 -61 450 l3 335 27 41 c15 23 41 52 59 65 62 44 103 48 429 46 269 -2 310 -4 345 -20z m1150 0 c54 -24 93 -63 119 -117 20 -42 21 -64 24 -332 2 -170 -1 -309 -7 -342 -14 -78 -58 -137 -123 -170 l-52 -26 -325 0 c-363 0 -372 2 -438 70 -62 64 -64 79 -61 450 l3 335 27 41 c15 23 41 52 59 65 62 44 103 48 429 46 269 -2 310 -4 345 -20z\"\n  }))));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgAssembleIcon);\nexport default __webpack_public_path__ + \"static/media/AssembleIcon.317ec53f.svg\";\nexport { ForwardRef as ReactComponent };","var _g;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgResetIcon(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: \"900.000000pt\",\n    height: \"900.000000pt\",\n    viewBox: \"0 0 900.000000 900.000000\",\n    preserveAspectRatio: \"xMidYMid meet\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    transform: \"translate(0.000000,900.000000) scale(0.100000,-0.100000)\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M4279 8370 c-958 -59 -1836 -456 -2514 -1135 -628 -628 -1004 -1406 -1111 -2300 -25 -210 -25 -660 0 -870 129 -1080 673 -2027 1534 -2670 1009 -753 2342 -966 3542 -565 801 267 1505 803 1979 1505 360 532 577 1128 647 1777 35 322 18 749 -42 1076 -144 791 -509 1487 -1074 2052 -565 565 -1261 930 -2052 1074 -273 50 -638 73 -909 56z m904 -2223 l-668 -667 -3 498 -2 498 -73 -3 c-653 -27 -1238 -359 -1600 -908 -150 -228 -259 -518 -302 -805 -19 -125 -22 -395 -5 -525 25 -200 87 -413 174 -600 l44 -93 -245 -243 c-234 -234 -245 -243 -259 -224 -34 45 -128 220 -175 326 -97 219 -167 461 -206 716 -24 157 -24 576 0 733 92 590 331 1077 731 1489 478 491 1103 774 1784 808 l132 6 0 501 0 501 670 -670 670 -670 -667 -668z m1653 -361 c158 -272 266 -591 321 -946 25 -161 25 -556 0 -725 -74 -499 -285 -977 -595 -1345 -97 -115 -278 -293 -387 -380 -173 -137 -427 -287 -635 -375 -268 -114 -593 -187 -897 -202 l-133 -6 -2 -499 -3 -498 -668 667 -667 668 670 670 670 670 0 -500 0 -500 122 7 c68 3 154 11 192 18 640 105 1195 516 1476 1095 139 284 201 556 201 875 0 308 -63 584 -200 875 l-29 60 242 243 c132 133 245 241 250 239 5 -2 38 -52 72 -111z\"\n  }))));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgResetIcon);\nexport default __webpack_public_path__ + \"static/media/ResetIcon.185470da.svg\";\nexport { ForwardRef as ReactComponent };","var _g;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgStepIcon(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: \"900.000000pt\",\n    height: \"900.000000pt\",\n    viewBox: \"0 0 900.000000 900.000000\",\n    preserveAspectRatio: \"xMidYMid meet\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    transform: \"translate(0.000000,900.000000) scale(0.100000,-0.100000)\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M4279 8370 c-958 -59 -1836 -456 -2514 -1135 -628 -628 -1004 -1406 -1111 -2300 -25 -210 -25 -660 0 -870 129 -1080 673 -2027 1534 -2670 1009 -753 2342 -966 3542 -565 801 267 1505 803 1979 1505 360 532 577 1128 647 1777 35 322 18 749 -42 1076 -144 791 -509 1487 -1074 2052 -565 565 -1261 930 -2052 1074 -273 50 -638 73 -909 56z m663 -3122 l3 -2273 1043 1040 1043 1039 267 -267 267 -267 -1503 -1503 -1502 -1502 -1502 1502 -1503 1503 270 270 270 270 1042 -1042 1043 -1043 0 2273 0 2272 380 0 380 0 2 -2272z\"\n  }))));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgStepIcon);\nexport default __webpack_public_path__ + \"static/media/StepIcon.4e668f1b.svg\";\nexport { ForwardRef as ReactComponent };","import { Component } from 'react';\r\nimport styles from './Control.module.css';\r\nimport PauseCircleFilledIcon from '@material-ui/icons/PauseCircleFilled';\r\nimport PlayCircleFilledIcon from '@material-ui/icons/PlayCircleFilled';\r\nimport { ReactComponent as AssembleIcon } from '../../assets/images/AssembleIcon.svg';\r\nimport { ReactComponent as ResetIcon } from '../../assets/images/ResetIcon.svg';\r\nimport { ReactComponent as StepIcon } from '../../assets/images/StepIcon.svg';\r\n\r\nclass Control extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.onAutoAssembleChanged = typeof props.onAutoAssembleChanged === 'function' ? props.onAutoAssembleChanged : ()=>{};\r\n    this.onStepIntervalChanged = typeof props.onStepIntervalChanged === 'function' ? props.onStepIntervalChanged : ()=>{};\r\n    this.onAssemble = typeof props.onAssemble === 'function' ? props.onAssemble : ()=>{};\r\n    this.onRun = typeof props.onRun === 'function' ? props.onRun : ()=>{};\r\n    this.onPause = typeof props.onPause === 'function' ? props.onPause : ()=>{};\r\n    this.onStep = typeof props.onStep === 'function' ? props.onStep : ()=>{};\r\n    this.onReset = typeof props.onReset === 'function' ? props.onReset : ()=>{};\r\n\r\n    this.cycles = 0;\r\n    this.stepInterval = 50;\r\n    this.autoAssemble = true;\r\n\r\n    this.state = {  }\r\n  }\r\n\r\n  setCycles(cycles) {\r\n    this.cycles = cycles;\r\n    this.setState({});\r\n  }\r\n\r\n  stepIntervalChanged(e) {\r\n    let value = parseInt(e.target.value);\r\n    if (isNaN(value)) value = 0;\r\n    if (value > 1000) value = 1000;\r\n    this.stepInterval = value;\r\n    this.onStepIntervalChanged(this.stepInterval);\r\n    this.setState({});\r\n  }\r\n\r\n  autoAssembleChanged(e) {\r\n    this.autoAssemble = e.target.checked;\r\n    this.onAutoAssembleChanged(this.autoAssemble);\r\n    this.setState({});\r\n  }\r\n\r\n  assembleClick() {\r\n    this.onAssemble();\r\n  }\r\n  \r\n  resetClick() {\r\n    this.onReset();\r\n  }\r\n  \r\n  stopClick() {\r\n    this.onPause();\r\n  }\r\n  \r\n  runClick() {\r\n    this.onRun();\r\n  }\r\n  \r\n  stepClick() {\r\n    this.onStep();\r\n  }\r\n\r\n  getAutoAssemble() {\r\n    return this.autoAssemble;\r\n  }\r\n\r\n  render() { \r\n    return (\r\n      <div className={`unselectable ${styles.container}`}>\r\n        <div className={styles.title}>Control</div>\r\n\r\n        <div className={styles.content}>\r\n          <div className={styles.cycleArea}>\r\n            <div className={styles.cycleLabel}>Cycle:</div>\r\n            <div>{this.cycles}</div>\r\n          </div>\r\n          \r\n          <div>\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={this.autoAssemble}\r\n              onChange={this.autoAssembleChanged.bind(this)}\r\n            /><span style={{margin: '0px 0px 0px 5px'}}>Auto-assemble</span>\r\n          </div>\r\n\r\n          <div className={styles.btnList}>\r\n            <div className={styles.btn} onClick={this.assembleClick.bind(this)}>\r\n              <div className={styles.btnLaterals}></div>\r\n              <AssembleIcon className=\"MuiSvgIcon-root\" />\r\n              <div>Assemble</div>\r\n              <div className={styles.btnLaterals}></div>\r\n            </div>\r\n            <div className={styles.btn} onClick={this.runClick.bind(this)}>\r\n              <div className={styles.btnLaterals}></div>\r\n              <PlayCircleFilledIcon />\r\n              <div>Run</div>\r\n              <div className={styles.btnLaterals}></div>\r\n            </div>\r\n            <div className={styles.btn} onClick={this.stopClick.bind(this)}>\r\n              <div className={styles.btnLaterals}></div>\r\n              <PauseCircleFilledIcon />\r\n              <div>Pause</div>\r\n              <div className={styles.btnLaterals}></div>\r\n            </div>\r\n            <div className={styles.btn} onClick={this.stepClick.bind(this)}>\r\n              <div className={styles.btnLaterals}></div>\r\n              <StepIcon className=\"MuiSvgIcon-root\" />\r\n              <div>Step</div>\r\n              <div className={styles.btnLaterals}></div>\r\n            </div>\r\n            <div className={styles.btn} onClick={this.resetClick.bind(this)}>\r\n              <div className={styles.btnLaterals}></div>\r\n              <ResetIcon className=\"MuiSvgIcon-root\" />\r\n              <div>Reset</div>\r\n              <div className={styles.btnLaterals}></div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className={styles.delayLabel}>Delay (ms):</div>\r\n          <input\r\n            className={styles.delayInput}\r\n            type='number'\r\n            value={this.stepInterval}\r\n            onChange={this.stepIntervalChanged.bind(this)}\r\n            onKeyUp={this.stepIntervalChanged.bind(this)}\r\n            min=\"0\"\r\n            max=\"1000\" />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n \r\nexport default Control;","var map = {\n\t\"./basic/adc.js\": 109,\n\t\"./basic/add.js\": 110,\n\t\"./basic/and.js\": 111,\n\t\"./basic/asr.js\": 112,\n\t\"./basic/bez.js\": 113,\n\t\"./basic/bnz.js\": 114,\n\t\"./basic/ldb.js\": 115,\n\t\"./basic/ldc.js\": 116,\n\t\"./basic/ldr.js\": 117,\n\t\"./basic/ldw.js\": 118,\n\t\"./basic/lsr.js\": 119,\n\t\"./basic/or.js\": 120,\n\t\"./basic/ror.js\": 121,\n\t\"./basic/sbc.js\": 122,\n\t\"./basic/slt.js\": 123,\n\t\"./basic/sltu.js\": 124,\n\t\"./basic/stb.js\": 125,\n\t\"./basic/stw.js\": 126,\n\t\"./basic/sub.js\": 127,\n\t\"./basic/xor.js\": 128\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 108;","const adc = {\r\n    getName() {\r\n        return 'adc';\r\n    },\r\n    getOpcode() {\r\n        return 0x5001;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => false,\r\n    executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n        let carry = simulation.getCarry();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getValue(rsa) + registerBank.getValue(rsb) + carry,\r\n        );\r\n    },\r\n}\r\n\r\nexport default adc;","const add = {\r\n    getName() {\r\n        return 'add';\r\n    },\r\n    getOpcode() {\r\n        return 0x5000;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => true,\r\n    executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getValue(rsa) + registerBank.getValue(rsb),\r\n        );\r\n    },\r\n    executeI(simulation, rst, immediate) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getValue(rst) + immediate,\r\n        );\r\n    },\r\n}\r\n\r\nexport default add;","const and = {\r\n    getName() {\r\n        return 'and';\r\n    },\r\n    getOpcode() {\r\n        return 0x0000;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => true,\r\n    executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getUValue(rsa) & registerBank.getUValue(rsb),\r\n        );\r\n    },\r\n    executeI(simulation, rst, immediate) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getUValue(rst) & immediate,\r\n        );\r\n    },\r\n}\r\n\r\nexport default and;","const asr = {\r\n    getName() {\r\n        return 'asr';\r\n    },\r\n    getOpcode() {\r\n        return 0xA001;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => false,\r\n    executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        let value = registerBank.getValue(rsa);\r\n        simulation.setCarry(value & 1);\r\n        registerBank.setValue(\r\n            rst, \r\n            value >> 1,\r\n        );\r\n    },\r\n}\r\n\r\nexport default asr;","const bez = {\r\n    getName() {\r\n        return 'bez';\r\n    },\r\n    getOpcode() {\r\n        return 0xC000;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => true,\r\n    executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        if (registerBank.getValue(rsa) === 0) {\r\n            simulation.setPC(registerBank.getValue(rsb) - 2);\r\n        }\r\n    },\r\n    executeI(simulation, rst, immediate) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        if (registerBank.getValue(rst) === 0) {\r\n            simulation.setPC(simulation.getPC() + immediate);\r\n        }\r\n    },\r\n}\r\n\r\nexport default bez;","const bnz = {\r\n    getName() {\r\n        return 'bnz';\r\n    },\r\n    getOpcode() {\r\n        return 0xD000;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => true,\r\n    executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        if (registerBank.getValue(rsa) !== 0) {\r\n            simulation.setPC(registerBank.getValue(rsb) - 2);\r\n        }\r\n    },\r\n    executeI(simulation, rst, immediate) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        if (registerBank.getValue(rst) !== 0) {\r\n            simulation.setPC(simulation.getPC() + immediate);\r\n        }\r\n    },\r\n}\r\n\r\nexport default bnz;","const ldb = {\r\n    getName() {\r\n        return 'ldb';\r\n    },\r\n    getOpcode() {\r\n        return 0x0002;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => false,\r\n    executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n        let memory = simulation.getMemory();\r\n\r\n        registerBank.setValue(rst, memory.readByte(registerBank.getUValue(rsb)));\r\n    },\r\n}\r\n\r\nexport default ldb;","const ldc = {\r\n    getName() {\r\n        return 'ldc';\r\n    },\r\n    getOpcode() {\r\n        return 0x9000;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => false,\r\n    supportI: () => true,\r\n    executeI(simulation, rst, immediate) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            (registerBank.getUValue(rst) << 8) | (immediate & 0xFF),\r\n        );\r\n    },\r\n}\r\n\r\nexport default ldc;","const ldr = {\r\n    getName() {\r\n        return 'ldr';\r\n    },\r\n    getOpcode() {\r\n        return 0x8000;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => false,\r\n    supportI: () => true,\r\n    executeI(simulation, rst, immediate) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            immediate,\r\n        );\r\n    },\r\n}\r\n\r\nexport default ldr;","const ldw = {\r\n    getName() {\r\n        return 'ldw';\r\n    },\r\n    getOpcode() {\r\n        return 0x4002;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => false,\r\n    executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n        let memory = simulation.getMemory();\r\n\r\n        registerBank.setValue(rst, memory.readWord(registerBank.getUValue(rsb)));\r\n    },\r\n}\r\n\r\nexport default ldw;","const lsr = {\r\n    getName() {\r\n        return 'lsr';\r\n    },\r\n    getOpcode() {\r\n        return 0xA000;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => false,\r\n    executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        let value = registerBank.getValue(rsa);\r\n        simulation.setCarry(value & 1);\r\n        registerBank.setValue(\r\n            rst, \r\n            value >>> 1,\r\n        );\r\n    },\r\n}\r\n\r\nexport default lsr;","const or = {\r\n    getName() {\r\n        return 'or';\r\n    },\r\n    getOpcode() {\r\n        return 0x1000;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => true,\r\n    executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getValue(rsa) | registerBank.getValue(rsb),\r\n        );\r\n    },\r\n    executeI(simulation, rst, immediate) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getValue(rst) | immediate,\r\n        );\r\n    },\r\n}\r\n\r\nexport default or;","const ror = {\r\n    getName() {\r\n        return 'ror';\r\n    },\r\n    getOpcode() {\r\n        return 0xA002;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => false,\r\n    executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n        let architecture = simulation.getArchitecture();\r\n\r\n        let value = registerBank.getUValue(rsa);\r\n        registerBank.setValue(\r\n            rst, \r\n            (value >> 1) | (simulation.getCarry() << (architecture.getBitWidth() - 1)),\r\n        );\r\n        simulation.setCarry(value & 1);\r\n    },\r\n}\r\n\r\nexport default ror;","const sbc = {\r\n    getName() {\r\n        return 'sbc';\r\n    },\r\n    getOpcode() {\r\n        return 0x6001;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => false,\r\n    executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n        let carry = simulation.getCarry();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getValue(rsa) - registerBank.getValue(rsb) - carry,\r\n        );\r\n    },\r\n}\r\n\r\nexport default sbc;","const slt = {\r\n    getName() {\r\n        return 'slt';\r\n    },\r\n    getOpcode() {\r\n        return 0x3000;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => true,\r\n    executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n        \r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getValue(rsa) < registerBank.getValue(rsb) ? 1 : 0,\r\n        );\r\n    },\r\n    executeI(simulation, rst, immediate) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getValue(rst) < immediate ? 1 : 0,\r\n        );\r\n    },\r\n}\r\n\r\nexport default slt;","const sltu = {\r\n    getName() {\r\n        return 'sltu';\r\n    },\r\n    getOpcode() {\r\n        return 0x4000;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => true,\r\n    executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getUValue(rsa) < registerBank.getUValue(rsb) ? 1 : 0,\r\n        );\r\n    },\r\n    executeI(simulation, rst, immediate) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getUValue(rst) < (immediate >>> 0) ? 1 : 0,\r\n        );\r\n    },\r\n}\r\n\r\nexport default sltu;","const stb = {\r\n    getName() {\r\n        return 'stb';\r\n    },\r\n    getOpcode() {\r\n        return 0x1002;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => false,\r\n    executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n        let memory = simulation.getMemory();\r\n\r\n        memory.writeByte(registerBank.getUValue(rsb), registerBank.getUValue(rsa));\r\n    },\r\n}\r\n\r\nexport default stb;","const stw = {\r\n    getName() {\r\n        return 'stw';\r\n    },\r\n    getOpcode() {\r\n        return 0x5002;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => false,\r\n    executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n        let memory = simulation.getMemory();\r\n\r\n        memory.writeWord(registerBank.getUValue(rsb), registerBank.getUValue(rsa));\r\n    },\r\n}\r\n\r\nexport default stw;","const sub = {\r\n    getName() {\r\n        return 'sub';\r\n    },\r\n    getOpcode() {\r\n        return 0x6000;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => true,\r\n    executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getValue(rsa) - registerBank.getValue(rsb),\r\n        );\r\n    },\r\n    executeI(simulation, rst, immediate) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getValue(rst) - immediate,\r\n        );\r\n    },\r\n}\r\n\r\nexport default sub;","const xor = {\r\n    getName() {\r\n        return 'xor';\r\n    },\r\n    getOpcode() {\r\n        return 0x2000;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => true,\r\n    executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getUValue(rsa) ^ registerBank.getUValue(rsb),\r\n        );\r\n    },\r\n    executeI(simulation, rst, immediate) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getUValue(rst) ^ immediate,\r\n        );\r\n    },\r\n}\r\n\r\nexport default xor;","var map = {\n\t\"./pseudo/hcf.js\": 130,\n\t\"./pseudo/ldi.js\": 131,\n\t\"./pseudo/lsl.js\": 132,\n\t\"./pseudo/pop.js\": 133,\n\t\"./pseudo/push.js\": 134\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 129;","const hcf = {\r\n    getName() {\r\n        return 'hcf';\r\n    },\r\n    isPseudo() {\r\n        return true;\r\n    },\r\n}\r\n\r\nexport default hcf;","const ldi = {\r\n    getName() {\r\n        return 'ldi';\r\n    },\r\n    isPseudo() {\r\n        return true;\r\n    },\r\n}\r\n\r\nexport default ldi;","const lsl = {\r\n    getName() {\r\n        return 'lsl';\r\n    },\r\n    isPseudo() {\r\n        return true;\r\n    },\r\n}\r\n\r\nexport default lsl;","const pop = {\r\n    getName() {\r\n        return 'pop';\r\n    },\r\n    isPseudo() {\r\n        return true;\r\n    },\r\n}\r\n\r\nexport default pop;","const push = {\r\n    getName() {\r\n        return 'push';\r\n    },\r\n    isPseudo() {\r\n        return true;\r\n    },\r\n}\r\n\r\nexport default push;","var map = {\n\t\"./pseudos/_large_immediate.js\": 136,\n\t\"./pseudos/asr.js\": 137,\n\t\"./pseudos/bez.js\": 138,\n\t\"./pseudos/bnz.js\": 139,\n\t\"./pseudos/hcf.js\": 140,\n\t\"./pseudos/ldb.js\": 141,\n\t\"./pseudos/ldi.js\": 142,\n\t\"./pseudos/ldw.js\": 143,\n\t\"./pseudos/lsl.js\": 144,\n\t\"./pseudos/lsr.js\": 145,\n\t\"./pseudos/pop.js\": 146,\n\t\"./pseudos/push.js\": 147,\n\t\"./pseudos/ror.js\": 148,\n\t\"./pseudos/stb.js\": 149,\n\t\"./pseudos/stw.js\": 150\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 135;","import operationsManager from '../../operations/operationsManager';\r\nimport Instruction from '../../instruction';\r\nimport Operand from '../../operand';\r\n\r\nlet supportedOpNames = new Set([ 'and', 'or', 'xor', 'slt', 'add', 'sub', 'bez', 'bnz' ]);\r\n\r\nconst operationLdi = operationsManager.getOperationByName('ldi');\r\n\r\nconst _large_immediate = {\r\n    getNonPseudoInstructions: (instruction, architecture) => {\r\n        if (!supportedOpNames.has(instruction.getOperation().getName())) return [];\r\n\r\n        let operands = instruction.getOperands();\r\n        if (operands.length !== 2) return [];\r\n\r\n        if (operands[0].getType() === 'register') {\r\n            switch (operands[1].getType()) {\r\n                case 'literal':\r\n                    let literal = operands[1].getValue();\r\n                    if (literal > 127 || literal < -128) {\r\n                        return [\r\n                            new Instruction(operationLdi, [ new Operand('at', Operand.REGISTER), new Operand(literal, Operand.LITERAL) ]),\r\n                            new Instruction(instruction.getOperation(), [ operands[0], operands[0], new Operand('at', Operand.REGISTER) ]),\r\n                        ];\r\n                    }\r\n                    break;\r\n                default:\r\n            }\r\n        }\r\n\r\n        return [];\r\n    },\r\n};\r\n\r\nexport default _large_immediate;","import operationsManager from '../../operations/operationsManager';\r\nimport Instruction from '../../instruction';\r\nimport Operand from '../../operand';\r\n\r\nconst operationAsr = operationsManager.getOperationByName('asr');\r\n\r\nconst asr = {\r\n    getOperation: () => operationAsr,\r\n    getNonPseudoInstructions: (instruction, architecture) => {\r\n        if (instruction.getOperation().getName() !== operationAsr.getName()) return [];\r\n\r\n        let operands = instruction.getOperands();\r\n        if (operands.length !== 2) return [];\r\n\r\n        return [\r\n            new Instruction(operationAsr, [ operands[0], operands[1], new Operand('r0', Operand.REGISTER) ] ),\r\n        ];\r\n    },\r\n};\r\n\r\nexport default asr;","import operationsManager from '../../operations/operationsManager';\r\nimport Instruction from '../../instruction';\r\nimport Operand from '../../operand';\r\n\r\nconst operationBez = operationsManager.getOperationByName('bez');\r\nconst operationLdi = operationsManager.getOperationByName('ldi');\r\n\r\nconst bez = {\r\n    getOperation: () => operationBez,\r\n    getNonPseudoInstructions: (instruction, architecture) => {\r\n        if (instruction.getOperation().getName() !== operationBez.getName()) return [];\r\n\r\n        let operands = instruction.getOperands();\r\n        if (operands.length !== 2) return [];\r\n        \r\n        if (operands[0].getType() === 'register') {\r\n            switch (operands[1].getType()) {\r\n                case 'register':\r\n                    // bez r1, r2 -> [ bez r0, r1, r2 ]\r\n                    return [\r\n                        new Instruction(operationBez, [ new Operand('r0', Operand.REGISTER), operands[0], operands[1] ]),\r\n                    ];\r\n                case 'symbol':\r\n                    // bez r1, sym -> [ ldi at, sym   bez r0, r1, at ]\r\n                    return [\r\n                        new Instruction(operationLdi, [ new Operand('at', Operand.REGISTER), operands[1] ]),\r\n                        new Instruction(operationBez, [ new Operand('r0', Operand.REGISTER), operands[0], new Operand('at', Operand.REGISTER) ]),\r\n                    ];\r\n                default:\r\n            }\r\n        }\r\n        return [];\r\n    },\r\n};\r\n\r\nexport default bez;","import operationsManager from '../../operations/operationsManager';\r\nimport Instruction from '../../instruction';\r\nimport Operand from '../../operand';\r\n\r\nconst operationBnz = operationsManager.getOperationByName('bnz');\r\nconst operationLdi = operationsManager.getOperationByName('ldi');\r\n\r\nconst bnz = {\r\n    getOperation: () => operationBnz,\r\n    getNonPseudoInstructions: (instruction, architecture) => {\r\n        if (instruction.getOperation().getName() !== operationBnz.getName()) return [];\r\n\r\n        let operands = instruction.getOperands();\r\n        if (operands.length !== 2) return [];\r\n\r\n        if (operands[0].getType() === 'register') {\r\n            switch (operands[1].getType()) {\r\n                case 'register':\r\n                    // bnz r1, r2 -> [ bnz r0, r1, r2 ]\r\n                    return [\r\n                        new Instruction(operationBnz, [ new Operand('r0', Operand.REGISTER), operands[0], operands[1] ]),\r\n                    ];\r\n                case 'symbol':\r\n                    // bnz r1, sym -> [ ldi at, sym   bnz r0, r1, at ]\r\n                    return [\r\n                        new Instruction(operationLdi, [ new Operand('at', Operand.REGISTER), operands[1] ]),\r\n                        new Instruction(operationBnz, [ new Operand('r0', Operand.REGISTER), operands[0], new Operand('at', Operand.REGISTER) ]),\r\n                    ];\r\n                default:\r\n            }\r\n        }\r\n        return [];\r\n    },\r\n};\r\n\r\nexport default bnz;","import operationsManager from '../../operations/operationsManager';\r\nimport Instruction from '../../instruction';\r\nimport Operand from '../../operand';\r\n\r\nconst operationHcf = operationsManager.getOperationByName('hcf');\r\n\r\nconst hcf = {\r\n    getOperation: () => operationHcf,\r\n    getNonPseudoInstructions: (instruction, architecture) => {\r\n        if (instruction.getOperation().getName() !== operationHcf.getName()) return [];\r\n\r\n        let operands = instruction.getOperands();\r\n        if (operands.length !== 0) return [];\r\n\r\n        // hcf -> [ ldb r0, r0, r0 ]\r\n        return [\r\n            new Instruction(operationHcf, [ \r\n                new Operand('r0', Operand.REGISTER), \r\n                new Operand('r0', Operand.REGISTER), \r\n                new Operand('r0', Operand.REGISTER)\r\n            ]),\r\n        ];\r\n    },\r\n};\r\n\r\nexport default hcf;","import operationsManager from '../../operations/operationsManager';\r\nimport Instruction from '../../instruction';\r\nimport Operand from '../../operand';\r\n\r\nconst operationLdb = operationsManager.getOperationByName('ldb');\r\nconst operationLdi = operationsManager.getOperationByName('ldi');\r\n\r\nconst ldb = {\r\n    getOperation: () => operationLdb,\r\n    getNonPseudoInstructions: (instruction, architecture) => {\r\n        if (instruction.getOperation().getName() !== operationLdb.getName()) return [];\r\n\r\n        let operands = instruction.getOperands();\r\n        if (operands.length !== 2) return [];\r\n\r\n        if (operands[0].getType() === 'register') {\r\n            switch (operands[1].getType()) {\r\n                case 'register':\r\n                    // ldb r1, r2 -> [ ldb r1, r0, r2 ]\r\n                    return [\r\n                        new Instruction(operationLdb, [ operands[0], new Operand('r0', Operand.REGISTER), operands[1] ]),\r\n                    ];\r\n                case 'symbol':\r\n                case 'literal':\r\n                    // ldb r1, 0 -> [ ldi at, 0   ldb r1, r0, at ]\r\n                    return [\r\n                        new Instruction(operationLdi, [ new Operand('at', Operand.REGISTER), operands[1] ]),\r\n                        new Instruction(operationLdb, [ operands[0], new Operand('r0', Operand.REGISTER), new Operand('at', Operand.REGISTER) ]),\r\n                    ];\r\n                default:\r\n            }\r\n        }\r\n        return [];\r\n    },\r\n};\r\n\r\nexport default ldb;","import operationsManager from '../../operations/operationsManager';\r\nimport Instruction from '../../instruction';\r\nimport Operand from '../../operand';\r\nimport utils from '../../../../utils';\r\nconst operation = operationsManager.getOperationByName('ldi');\r\n\r\nconst operationLdr = operationsManager.getOperationByName('ldr');\r\nconst operationLdc = operationsManager.getOperationByName('ldc');\r\n\r\nconst ldi = {\r\n    getOperation: () => operation,\r\n    getNonPseudoInstructions: (instruction, architecture) => {\r\n        if (instruction.getOperation().getName() !== operation.getName()) return [];\r\n\r\n        let operands = instruction.getOperands();\r\n        if (operands.length !== 2) return [];\r\n\r\n        if (operands[0].getType() === 'register') {\r\n            switch (operands[1].getType()) {\r\n                case 'literal':\r\n                    let literal = operands[1].getValue();\r\n                    if (literal < 256 && literal > -128) {\r\n                        // ldi r1, const -> ldr r1, const\r\n                        // -128 < const < 256\r\n                        return [\r\n                            new Instruction(operationLdr, [ operands[0], operands[1] ]),\r\n                        ];\r\n                    } else {\r\n                        // ldi r1, const -> [ ldr r1, const(first byte)   ldc r1, const(second byte) ]  (16 bits)\r\n                        // -128 >= const <= 256\r\n\r\n                        let bytes = utils.numberToBytes(literal, architecture.getByteWidth());\r\n                        if (bytes.length === 0) throw new Error('Convert number to bytes error');\r\n                        return [\r\n                            new Instruction(operationLdr, [ operands[0], new Operand(bytes.shift(), Operand.LITERAL) ]),\r\n                            ...bytes.map(byte => new Instruction(operationLdc, [ operands[0], new Operand(byte, Operand.LITERAL) ])),\r\n                        ];\r\n                    }\r\n                case 'symbol':\r\n                    // ldi r1, sym -> [ ldc r1, sym+0(1 byte)   ldc r1, sym+1(1 byte) ]\r\n                    return new Array(architecture.getByteWidth()).fill(0).map(\r\n                        (x, i) => {\r\n                            return new Instruction(operationLdc, [ \r\n                                operands[0], \r\n                                new Operand(operands[1].getValue(), Operand.SYMBOL).setByteRange({ min: i, max: i}),\r\n                            ]);\r\n                        }\r\n                    );\r\n                default:\r\n            }\r\n        }\r\n        return [];\r\n    },\r\n};\r\n\r\nexport default ldi;","import operationsManager from '../../operations/operationsManager';\r\nimport Instruction from '../../instruction';\r\nimport Operand from '../../operand';\r\n\r\nconst operationLdw = operationsManager.getOperationByName('ldw');\r\nconst operationLdi = operationsManager.getOperationByName('ldi');\r\n\r\nconst ldw = {\r\n    getOperation: () => operationLdw,\r\n    getNonPseudoInstructions: (instruction, architecture) => {\r\n        if (instruction.getOperation().getName() !== operationLdw.getName()) return [];\r\n\r\n        let operands = instruction.getOperands();\r\n        if (operands.length !== 2) return [];\r\n\r\n        if (operands[0].getType() === 'register') {\r\n            switch (operands[1].getType()) {\r\n                case 'register':\r\n                    // ldw r1, r2 -> [ ldw r1, r0, r2 ]\r\n                    return [\r\n                        new Instruction(operationLdw, [ operands[0], new Operand('r0', Operand.REGISTER), operands[1] ]),\r\n                    ];\r\n                case 'symbol':\r\n                case 'literal':\r\n                    // ldw r1, lit -> [ ldi at, lit   ldb r1, r0, at ]\r\n                    return [\r\n                        new Instruction(operationLdi, [ new Operand('at', Operand.REGISTER), operands[1] ]),\r\n                        new Instruction(operationLdw, [ operands[0], new Operand('r0', Operand.REGISTER), new Operand('at', Operand.REGISTER) ]),\r\n                    ];\r\n                default:\r\n            }\r\n        }\r\n        return [];\r\n    },\r\n};\r\n\r\nexport default ldw;","import operationsManager from '../../operations/operationsManager';\r\nimport Instruction from '../../instruction';\r\n\r\nconst operationLsl = operationsManager.getOperationByName('lsl');\r\nconst operationAdd = operationsManager.getOperationByName('add');\r\n\r\nconst lsl = {\r\n    getOperation: () => operationLsl,\r\n    getNonPseudoInstructions: (instruction, architecture) => {\r\n        if (instruction.getOperation().getName() !== operationLsl.getName()) return [];\r\n\r\n        let operands = instruction.getOperands();\r\n        if (operands.length !== 2) return [];\r\n\r\n        if (operands[0].getType() === 'register') {\r\n            switch (operands[1].getType()) {\r\n                case 'register':\r\n                    // lsl r1, r2 -> [ add r1, r2, r2 ]\r\n                    return [\r\n                        new Instruction(operationAdd, [ operands[0], operands[1], operands[1] ]),\r\n                    ];\r\n                default:\r\n            }\r\n        }\r\n        return [];\r\n    },\r\n};\r\n\r\nexport default lsl;","import operationsManager from '../../operations/operationsManager';\r\nimport Instruction from '../../instruction';\r\nimport Operand from '../../operand';\r\n\r\nconst operationLsr = operationsManager.getOperationByName('lsr');\r\n\r\nconst lsr = {\r\n    getOperation: () => operationLsr,\r\n    getNonPseudoInstructions: (instruction, architecture) => {\r\n        if (instruction.getOperation().getName() !== operationLsr.getName()) return [];\r\n\r\n        let operands = instruction.getOperands();\r\n        if (operands.length !== 2) return [];\r\n\r\n        return [\r\n            new Instruction(operationLsr, [ operands[0], operands[1], new Operand('r0', Operand.REGISTER) ]),\r\n        ];\r\n    },\r\n};\r\n\r\nexport default lsr;","import operationsManager from '../../operations/operationsManager';\r\nimport Instruction from '../../instruction';\r\nimport Operand from '../../operand';\r\n\r\nconst operationPop = operationsManager.getOperationByName('pop');\r\nconst operationLdw = operationsManager.getOperationByName('ldw');\r\nconst operationAdd = operationsManager.getOperationByName('add');\r\n\r\nconst pop = {\r\n    getOperation: () => operationLdw,\r\n    getNonPseudoInstructions: (instruction, architecture) => {\r\n        if (instruction.getOperation().getName() !== operationPop.getName()) return [];\r\n\r\n        let operands = instruction.getOperands();\r\n        if (operands.length !== 1) return [];\r\n\r\n        if (operands[0].getType() === 'register') {\r\n            // pop r1 -> [ ldw r1, sp   add sp, 2 ]\r\n            return [\r\n                new Instruction(operationLdw, [ operands[0], new Operand('sp', Operand.REGISTER) ]),\r\n                new Instruction(operationAdd, [ new Operand('sp', Operand.REGISTER), new Operand(2, Operand.LITERAL) ]),\r\n            ];\r\n        }\r\n        return [];\r\n    },\r\n};\r\n\r\nexport default pop;","import operationsManager from '../../operations/operationsManager';\r\nimport Instruction from '../../instruction';\r\nimport Operand from '../../operand';\r\n\r\nconst operationPush = operationsManager.getOperationByName('push');\r\nconst operationSub = operationsManager.getOperationByName('sub');\r\nconst operationStw = operationsManager.getOperationByName('stw');\r\n\r\nconst push = {\r\n    getOperation: () => operationPush,\r\n    getNonPseudoInstructions: (instruction, architecture) => {\r\n        if (instruction.getOperation().getName() !== operationPush.getName()) return [];\r\n\r\n        let operands = instruction.getOperands();\r\n        if (operands.length !== 1) return [];\r\n\r\n        if (operands[0].getType() === 'register') {\r\n            // push r1 -> [ sub sb, 2   stw r1, sp ]\r\n            return [\r\n                new Instruction(operationSub, [ new Operand('sp', Operand.REGISTER), new Operand(2, Operand.LITERAL) ]),\r\n                new Instruction(operationStw, [ operands[0], new Operand('sp', Operand.REGISTER) ]),\r\n            ];\r\n        }\r\n        return [];\r\n    },\r\n};\r\n\r\nexport default push;","import operationsManager from '../../operations/operationsManager';\r\nimport Instruction from '../../instruction';\r\nimport Operand from '../../operand';\r\n\r\nconst operationRor = operationsManager.getOperationByName('ror');\r\n\r\nconst ror = {\r\n    getOperation: () => operationRor,\r\n    getNonPseudoInstructions: (instruction, architecture) => {\r\n        if (instruction.getOperation().getName() !== operationRor.getName()) return [];\r\n\r\n        let operands = instruction.getOperands();\r\n        if (operands.length !== 2) return [];\r\n\r\n        return [\r\n            new Instruction(operationRor, [ operands[0], operands[1], new Operand('r0', Operand.REGISTER) ]),\r\n        ];\r\n    },\r\n};\r\n\r\nexport default ror;","import operationsManager from '../../operations/operationsManager';\r\nimport Instruction from '../../instruction';\r\nimport Operand from '../../operand';\r\n\r\nconst operationStb = operationsManager.getOperationByName('stb');\r\nconst operationLdi = operationsManager.getOperationByName('ldi');\r\n\r\nconst stb = {\r\n    getOperation: () => operationStb,\r\n    getNonPseudoInstructions: (instruction, architecture) => {\r\n        if (instruction.getOperation().getName() !== operationStb.getName()) return [];\r\n\r\n        let operands = instruction.getOperands();\r\n        if (operands.length !== 2) return [];\r\n\r\n        if (operands[0].getType() === 'register') {\r\n            switch (operands[1].getType()) {\r\n                case 'register':\r\n                    // stb r1, r2 -> [ stb r0, r1, r2 ]\r\n                    return [\r\n                        new Instruction(operationStb, [ new Operand('r0', Operand.REGISTER), operands[0], operands[1] ]),\r\n                    ];\r\n                case 'symbol':\r\n                case 'literal':\r\n                    // stb r1, lit -> [ ldi at, lit   stb r0, r1, at ]\r\n                    return [\r\n                        new Instruction(operationLdi, [ new Operand('at', Operand.REGISTER), operands[1] ]),\r\n                        new Instruction(operationStb, [ new Operand('r0', Operand.REGISTER), operands[0], new Operand('at', Operand.REGISTER) ]),\r\n                    ];\r\n                default:\r\n            }\r\n        }\r\n        return [];\r\n    },\r\n};\r\n\r\nexport default stb;","import operationsManager from '../../operations/operationsManager';\r\nimport Instruction from '../../instruction';\r\nimport Operand from '../../operand';\r\n\r\nconst operationStw = operationsManager.getOperationByName('stw');\r\nconst operationLdi = operationsManager.getOperationByName('ldi');\r\n\r\nconst stw = {\r\n    getOperation: () => operationStw,\r\n    getNonPseudoInstructions: (instruction, architecture) => {\r\n        if (instruction.getOperation().getName() !== operationStw.getName()) return [];\r\n\r\n        let operands = instruction.getOperands();\r\n        if (operands.length !== 2) return [];\r\n\r\n        if (operands[0].getType() === 'register') {\r\n            switch (operands[1].getType()) {\r\n                case 'register':\r\n                    // stw r1, r2 -> [ stw r0, r1, r2 ]\r\n                    return [\r\n                        new Instruction(operationStw, [ new Operand('r0', Operand.REGISTER), operands[0], operands[1] ]),\r\n                    ];\r\n                case 'symbol':\r\n                case 'literal':\r\n                    // stw r1, lit -> [ ldi at, lit   stw r0, r1, at ]\r\n                    return [\r\n                        new Instruction(operationLdi, [ new Operand('at', Operand.REGISTER), operands[1] ]),\r\n                        new Instruction(operationStw, [ new Operand('r0', Operand.REGISTER), operands[0], new Operand('at', Operand.REGISTER) ]),\r\n                    ];\r\n                default:\r\n            }\r\n        }\r\n        return [];\r\n    },\r\n};\r\n\r\nexport default stw;","import React, { Component } from 'react';\nimport { HashRouter, Route } from \"react-router-dom\";\nimport Home from '../home/Home.module';\nimport styles from './App.module.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { };\n  }\n\n  render() {\n    return (\n     <HashRouter basename='/'>\n      <div className={styles.container}>\n       <Route exact path=\"/\" component={Home} />\n      </div>\n     </HashRouter>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app/App.module';\nimport './styles.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);","import Instruction from './instruction';\r\n\r\nimport architectureManager from './architectureManager';\r\nimport operationsManager from './operations/operationsManager';\r\nimport pseudoManager from './pseudoInstructionConversions/pseudoManager';\r\nimport pseudoConverter from './pseudoInstructionConversions/pseudoConverter';\r\n\r\nimport assembler from './assembler/assembler';\r\nimport disassembler from './disassembler/disassembler';\r\n\r\nimport memory from './simulator/memory';\r\nimport memoryStorage16 from './simulator/memoryStorage16';\r\nimport registerBank from './simulator/registerBank';\r\n\r\nimport simulation from './simulator/simulation';\r\n\r\narchitectureManager.setup();\r\noperationsManager.setup();\r\npseudoManager.setup();\r\n\r\nconst asm = {\r\n    Instruction,\r\n    architectureManager,\r\n    operationsManager,\r\n    pseudoManager,\r\n    pseudoConverter,\r\n    assembler,\r\n    disassembler,\r\n    memory,\r\n    memoryStorage16,\r\n    registerBank,\r\n    simulation,\r\n};\r\n\r\nexport default asm;"],"sourceRoot":""}