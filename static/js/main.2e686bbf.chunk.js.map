{"version":3,"sources":["business/asm/operand.js","business/asm/instruction.js","business/asm/operations/operationsManager.js","utils.js","components/control/Control.module.css","components/console/Console.module.css","components/simulator/Simulator.module.css","components/program/Program.module.css","components/memoryViewer/MemoryViewer.module.css","components/registers/Registers.module.css","components/symbolTable/SymbolTable.module.css","components/assembled/Assembled.module.css","components/canvasViewer/CanvasViewer.module.css","components/window/Window.module.css","components/home/Home.module.css","components/console/Console.module.js","components/app/App.module.css","business/asm/operations sync /basic/.+/.js$","business/asm/operations/basic/adc.js","business/asm/operations/basic/add.js","business/asm/operations/basic/and.js","business/asm/operations/basic/asr.js","business/asm/operations/basic/bez.js","business/asm/operations/basic/bnz.js","business/asm/operations/basic/ldb.js","business/asm/operations/basic/ldc.js","business/asm/operations/basic/ldr.js","business/asm/operations/basic/ldw.js","business/asm/operations/basic/lsr.js","business/asm/operations/basic/or.js","business/asm/operations/basic/ror.js","business/asm/operations/basic/sbc.js","business/asm/operations/basic/slt.js","business/asm/operations/basic/sltu.js","business/asm/operations/basic/stb.js","business/asm/operations/basic/stw.js","business/asm/operations/basic/sub.js","business/asm/operations/basic/xor.js","business/asm/operations sync /pseudo/.+/.js$","business/asm/operations/pseudo/hcf.js","business/asm/operations/pseudo/ldi.js","business/asm/operations/pseudo/lsl.js","business/asm/operations/pseudo/pop.js","business/asm/operations/pseudo/push.js","business/asm/pseudoInstructionConversions sync /pseudos/.+/.js$","business/asm/pseudoInstructionConversions/pseudos/_large_immediate.js","business/asm/pseudoInstructionConversions/pseudos/asr.js","business/asm/pseudoInstructionConversions/pseudos/bez.js","business/asm/pseudoInstructionConversions/pseudos/bnz.js","business/asm/pseudoInstructionConversions/pseudos/hcf.js","business/asm/pseudoInstructionConversions/pseudos/ldb.js","business/asm/pseudoInstructionConversions/pseudos/ldi.js","business/asm/pseudoInstructionConversions/pseudos/ldw.js","business/asm/pseudoInstructionConversions/pseudos/lsl.js","business/asm/pseudoInstructionConversions/pseudos/lsr.js","business/asm/pseudoInstructionConversions/pseudos/pop.js","business/asm/pseudoInstructionConversions/pseudos/push.js","business/asm/pseudoInstructionConversions/pseudos/ror.js","business/asm/pseudoInstructionConversions/pseudos/stb.js","business/asm/pseudoInstructionConversions/pseudos/stw.js","business/asm/architectureManager.js","components/registers/Registers.module.js","business/asm/simulator/memoryStorage16.js","business/asm/simulator/memory.js","business/asm/architecture.js","business/asm/simulator/registerBank.js","business/asm/asmErrors.js","business/asm/simulator/io/ioManager.js","business/asm/simulator/simulation.js","business/asm/pseudoInstructionConversions/pseudoManager.js","business/asm/pseudoInstructionConversions/pseudoConverter.js","business/asm/assembler/instructionParser.js","business/asm/assembler/dataParser.js","business/asm/assembler/commentParser.js","business/asm/assembler/lineParser.js","business/asm/assembler/assembler.js","business/asm/disassembler/disassembler.js","business/asm/index.js","assets/images/AssembleIcon.svg","components/program/Program.module.js","components/symbolTable/SymbolTable.module.js","assets/images/ResetIcon.svg","assets/images/StepIcon.svg","components/control/Control.module.js","components/assembled/Assembled.module.js","components/memoryViewer/MemoryViewer.module.js","business/asm/simulator/io/port.js","business/asm/simulator/io/devices/device.js","business/asm/simulator/io/devices/consoleDevice.js","business/asm/simulator/io/devices/canvasDevice.js","components/canvasViewer/CanvasViewer.module.js","components/simulator/Simulator.module.js","components/window/Window.module.js","components/home/Home.module.js","components/app/App.module.js","index.js"],"names":["Operand","value","type","this","byteRange","REGISTER","SYMBOL","LITERAL","Instruction","operation","operands","getType","isPseudo","TYPE_R","supportR","TYPE_I","supportI","length","architecture","Error","getName","opcode","getOpcode","finalCode","getRegisterCode","getValue","rst","immediate","utils","signedToUnsigned","simulation","rsa","rsb","executeR","executeI","map","operand","signedNumberToHex","join","code","rstCode","unsignedToSigned","getRegisterNameByCode","TypeError","operationsManager","getOperationByOpcode","rsaCode","rsbCode","basicOps","pseudoOps","basicOpsByOpcode","basicOpsByName","pseudoOpsByName","basicOpsNames","pseudoOpsNames","opsNames","getOperationByName","name","setup","basicMs","require","keys","key","default","pseudoMs","Object","fromEntries","op","concat","getOperationNames","getBasicOperationByName","getPseudoOperationByName","isOperationName","isBasicOperationName","isPseudoOperationName","number","byteWidth","mask","Math","pow","toString","padStart","isNegative","numberToBytes","bytes","i","unshift","bytesToNumber","byte","isInteger","str","isNaN","parseInt","sleep","ms","Promise","resolve","setTimeout","callLimiter","func","delay","thId","lastArgs","args","module","exports","Console","props","consoleDevice","onInput","inputRef","createRef","outputRef","isNewLine","lastNode","lastType","state","inputBuffer","waiting","inputBufferHandler","setState","waitingHandler","current","focus","writeCharHandler","char","write","writeIntHandler","int","on","off","text","textNode","document","createTextNode","appendChild","spanElem","createElement","classList","add","styles","infoColor","errorColor","textContent","scrollTop","scrollHeight","inputBytes","Array","buffer","Buffer","from","addBytes","e","toLowerCase","target","addTextInput","innerHTML","className","container","outAndInBufContainer","output","ref","title","readOnly","spellCheck","x","bottom","alertsOutline","inputText","placeholder","id","onKeyDown","inputKeyDown","bind","btn","onClick","clearOutput","Component","webpackContext","req","webpackContextResolve","__webpack_require__","o","adc","registerBank","getRegisterBank","carry","getCarry","setValue","and","getUValue","asr","setCarry","bez","setPC","getPC","bnz","ldb","memory","getMemory","readByte","ldc","ldr","ldw","readWord","lsr","or","ror","getArchitecture","getBitWidth","sbc","slt","sltu","stb","writeByte","stw","writeWord","sub","xor","hcf","ldi","lsl","pop","push","supportedOpNames","Set","operationLdi","_large_immediate","getNonPseudoInstructions","instruction","has","getOperation","getOperands","literal","operationAsr","operationBez","operationBnz","operationHcf","operationLdb","operationLdr","operationLdc","getByteWidth","shift","fill","setByteRange","min","max","operationLdw","operationLsl","operationAdd","operationLsr","operationPop","operationPush","operationSub","operationStw","operationRor","operationStb","_16","_32","Registers","registerInfos","entries","getRegisterInfos","pc","valueUpdateHandler","content","generalRegisterList","infos","aliases","pcRegister","Register","registerContainer","MemoryStorage16","data","address","word","byte0","byte1","start","end","slice","words","Memory","storage","memoryRegions","result","reset","emit","getDataLength","getBytesFromRange","getWordsFromRange","onReadByte","newValue","onReadWord","onWriteByte","onWriteWord","bitWidth","getMemoryRegions","EventEmitter","Architecture","registers","registersByName","registerName","register","aliasName","reduce","a","b","registersNameByCode","hasRegisterName","architectureManager","codeData","stack","io","getViking16Arch","getViking32Arch","RegisterBank","registerByteWidth","forEach","oldValue","archRegisters","getRegisters","SimulationError","message","IOManager","ports","portHandlers","waitingPort","port","answerHandler","waitingIO","run","index","findIndex","splice","handlers","read","waitingRead","waitingWrite","defaultBreakpointHandler","Simulation","codeExecutionMaxPC","running","ended","stopping","stepInterval","cycles","ioManager","breakpointHandler","setupMemoryHandlers","stop","setCycles","writeObjCodeMemory","ioAddress","portIndex","addPort","removePort","symbolTable","getPorts","device","symbolList","rawObjCode","wordArray","match","exc","console","error","disassemble","execute","incrementPC","incrementCycles","timePerBlock","toExecFloat","toExec","floor","Date","now","step","sleepTime","runner","getMask","handler","pseudos","pseudoManager","pseudosMs","getPseudoInstructions","PseudoConverter","instructions","convInstruction","convInstructions","convert","InstructionParser","parseOperation","parseOperands","isArray","operationName","operandValue","isRegisterName","operandsValues","split","trim","getInstructionOperandValueType","DataParser","parseToBytes","bytesToData","values","lastC","startIndex","capturingQuote","c","unraw","substring","extractValues","charCodeAt","trimmed","splitted","some","curBytes","j","CommentParser","hasComment","comment","rest","replace","indexOf","LineParser","instructionParser","dataParser","commentParser","symbol","line","getSymbolAndRest","sanitizedRest","parse","isInstruction","Assembler","programData","pseudoConverter","extraSymbolTable","lines","sequence","objectCodeArray","additionalInfos","pass1","pass2","pass3","rawObjectCode","assign","lineParser","additionalInfo","lineIndex","lineNumber","parsed","symbolValue","finalValue","getByteRange","setType","item","Number","assemble","Disassembler","rawHex","arrayLiteral","_g","alreadyCreatedLang","Program","curArchitecture","infosRef","onChange","onLoadSavedRequest","onLoadDefaultRequest","onSaveRequest","portsSymbols","regNames","getRegisterNames","monaco","languages","setMonarchTokensProvider","operationKeywords","registerKeywords","decimalNumbers","hexNumbers","escapes","tokenizer","root","cases","token","bracket","next","string","registerCompletionItemProvider","provideCompletionItems","suggestions","opName","label","detail","documentation","kind","CompletionItemKind","Function","insertText","portSymbol","editor","defineTheme","base","inherit","rules","foreground","colors","getModel","onDidChangeContent","initText","saveBindHandler","addCommand","KeyMod","CtrlCmd","KeyCode","KEY_S","save","fullRange","getFullModelRange","executeEdits","range","lineCount","getLineCount","lineDec","Range","options","isWholeLine","curLineHighlight","revealLine","decId","deltaDecorations","setInfos","titleContainer","loadSaved","loadDefault","language","theme","beforeMount","onEditorWillMount","onMount","onEditorMount","SymbolTable","onSymbolNameClick","onSymbolValueClick","symbols","symbolName","border","frame","fillAllSpace","_excluded","_extends","arguments","source","prototype","hasOwnProperty","call","apply","_objectWithoutProperties","excluded","sourceKeys","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","SvgAssembleIcon","_ref","svgRef","titleId","xmlns","width","height","viewBox","preserveAspectRatio","transform","d","ForwardRef","SvgResetIcon","SvgStepIcon","Control","onAutoAssembleChanged","onStepIntervalChanged","onAssemble","onRun","onPause","onStep","onReset","autoAssemble","checked","cycleArea","cycleLabel","autoAssembleChanged","style","margin","btnList","assembleClick","btnLaterals","runClick","stopClick","stepClick","resetClick","delayLabel","delayInput","stepIntervalChanged","onKeyUp","Assembled","breakpointDecorations","pcBreakpoints","curLineRunningDecorationId","curLineRunningDecoration","removeBreakpoint","setBreakpoint","bpDec","glyphMarginClassName","breakpoint","delete","pcs","removeAllBreakpoints","linesCount","newBreakpointPCs","filter","setBreakpoints","setCurrentPC","currentLineRunning","oldDec","self","updateOptions","wordBasedSuggestions","automaticLayout","lineDecorationsWidth","glyphMargin","minimap","enabled","lineNumbers","n","onMouseDown","position","toggleBreakpoint","MemoryViewer","tbodyRef","memoryScrollRef","memoryScrollAuxRef","memoryAreaRef","columns","rowsToShow","rows","dataItemBytes","rowOffset","wordHighlightContexts","dataCount","getDataCount","setScrollHeight","getData","recreateTable","onwheel","deltaY","preventDefault","onscroll","getBoundingClientRect","onResetHandler","onStorageWriteByteHandler","dataOffset","updateByteAt","onStorageWriteWordHandler","tbyteDiv","getByteElem","highlightByte","offset","column","row","childNodes","elem","ctx","setInterval","clearInterval","rowHeight","newRowsToShow","rowsCount","ceil","html","memoryColumnNumber","_x","y","memoryRowNumber","memDataHtml","memoryData","MemoryArea","useResizeDetector","memoryAreaContainer","handleHeight","memoryArea","memoryScroll","Port","readHandler","writeHandler","Device","_waiting","ConsoleDevice","readCharPort","readChar","readIntPort","readInt","writeCharPort","writeChar","writeIntPort","writeInt","zeroCharCode","nineCharCode","minusCharCode","isMinusChar","isNumberChar","charToNumber","firstC","nextByte","String","fromCharCode","endReadWaiting","CanvasDevice","p1X","p1Y","p2X","p2Y","setXPort","setX","setYPort","setY","drawPixelPort","drawPixel","clearPixelPort","clearPixel","setP1Port","setP1","setP2Port","setP2","drawLinePort","drawLine","clearLinePort","clearLine","clearPort","clear","fillColor","clearColor","CanvasViewer","canvasDevice","canvasRef","lineAlg","x0","y0","x1","y1","onpixel","dx","abs","sx","dy","sy","err","e2","getContext","imageSmoothingEnabled","resetHandler","clearHandler","fillStyle","fillRect","drawPixelHandler","clearPixelHandler","drawLineHandler","clearLineHandler","new","canvasContainer","canvas","Simulator","programRef","assembledRef","symbolTableRef","registersRef","controlRef","consoleRef","createFromArchitecture","registerPorts","simulationOnRunErrorHandler","writeLine","simulationOnRunEndedHandler","simulationOnBreakpointHandler","simulationPcUpdateHandler","simulationCyclesUpdateHandler","simulationResetHandler","setBreakpointHandler","_","hasBreakpoint","loadAsmCode","Home","instance","spawnWindow","log","localStorage","getItem","getText","ioPortSymbolTable","getPortsSymbolTable","pseudoInstructions","assembler","addExtraSymbolTable","assemblerResult","curAssembleResult","disassemblerResult","disassembly","setRawObjCode","setAssembled","setSymbolTable","isRunning","hasEnded","curText","getAutoAssemble","lastText","setStepInterval","additionInfo","find","highlightLine","setItem","asmCode","setText","components","sym","prog","getPortsSymbolsList","asm","reg","ctr","pause","con","can","top","programContainer","assembledContainer","symbolTableContainer","registersControlArea","consoleContainer","Window","containerRef","description","children","header","keyIndex","windowsContainerRef","aboutRef","windowObjs","remove","reject","winObj","window","windowsContainer","aboutContainer","href","closeAbout","App","basename","exact","path","component","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.2e686bbf.chunk.js","sourcesContent":["export default class Operand {\r\n    static REGISTER = 'register';\r\n    static SYMBOL = 'symbol';\r\n    static LITERAL = 'literal';\r\n\r\n    constructor(value, type) {\r\n        this.value = value;\r\n        this.type = type;\r\n        this.byteRange = null;\r\n    }\r\n\r\n    setByteRange(byteRange) {\r\n        this.byteRange = byteRange;\r\n        return this;\r\n    }\r\n\r\n    setValue(value) {\r\n        this.value = value;\r\n        return this;\r\n    }\r\n    \r\n    setType(type) {\r\n        this.type = type;\r\n        return this;\r\n    }\r\n\r\n    getValue() {\r\n        return this.value;\r\n    }\r\n    \r\n    getType() {\r\n        return this.type;\r\n    }\r\n\r\n    getByteRange() {\r\n        return this.byteRange;\r\n    }\r\n}","import operationsManager from './operations/operationsManager';\r\nimport Operand from './operand';\r\nimport utils from '../../utils';\r\n\r\nclass Instruction {\r\n    static TYPE_R = 'R';\r\n    static TYPE_I = 'I';\r\n    \r\n    static disassemble(code, architecture) {\r\n        let imm = (code >> 11) & 0b1;    \r\n        if (imm === 1) {\r\n            let opcode = code & 0b1111000000000000;     // 1111 0000 0000 0000\r\n            let rstCode = (code >> 8) & 0b111;          //      0111 0000 0000\r\n            let immediate = code & 0b11111111;          //           1111 1111\r\n            immediate = utils.unsignedToSigned(immediate, 1);\r\n            \r\n            let rst = architecture.getRegisterNameByCode(rstCode);\r\n            \r\n            if (!rst) throw new TypeError('rst doesnt exist');\r\n    \r\n            let operation = operationsManager.getOperationByOpcode(opcode);\r\n            if (!operation) throw new TypeError('operation doesnt exist');\r\n    \r\n            let operands = [\r\n                new Operand(rst, Operand.REGISTER),\r\n                new Operand(immediate, Operand.LITERAL),\r\n            ];\r\n            \r\n            return new Instruction(operation, operands);\r\n        } else {\r\n            let opcode = code & 0b1111000000000011;     // 1111 0000 0000 0011\r\n            let rstCode = (code >> 8) & 0b111;          //      0111 0000 0000\r\n            let rsaCode = (code >> 5) & 0b111;          //           1110 0000\r\n            let rsbCode = (code >> 2) & 0b111;          //              1 1100\r\n    \r\n            let rst = architecture.getRegisterNameByCode(rstCode);\r\n            let rsa = architecture.getRegisterNameByCode(rsaCode);\r\n            let rsb = architecture.getRegisterNameByCode(rsbCode);\r\n            if (!rst) throw new TypeError('rst doesnt exist');\r\n            if (!rsa) throw new TypeError('rsa doesnt exist');\r\n            if (!rsb) throw new TypeError('rsb doesnt exist');\r\n    \r\n            let operation = operationsManager.getOperationByOpcode(opcode);\r\n            if (!operation) throw new TypeError('operation doesnt exist');\r\n    \r\n            let operands = [\r\n                new Operand(rst, Operand.REGISTER),\r\n                new Operand(rsa, Operand.REGISTER),\r\n                new Operand(rsb, Operand.REGISTER),\r\n            ];\r\n    \r\n            return new Instruction(operation, operands);\r\n        }\r\n    }\r\n\r\n    constructor(operation, operands) {\r\n        this.operation = operation;\r\n        this.operands = operands;\r\n    }\r\n    \r\n    isPseudo() {\r\n        let type = this.getType();\r\n        if (type === null) return true;\r\n        if (this.operation === null) return true;\r\n        if (this.operation.isPseudo()) return true;\r\n        switch (type) {\r\n            case Instruction.TYPE_R:\r\n                if (!this.operation.supportR()) {\r\n                    return true;\r\n                } else {\r\n                    break;\r\n                }\r\n            case Instruction.TYPE_I:\r\n                if (!this.operation.supportI()) {\r\n                    return true;\r\n                } else {\r\n                    break;\r\n                }\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n\r\n    getType() {\r\n        if (this.operands.length === 2 && \r\n            this.operands[0].getType() === Operand.REGISTER &&\r\n            this.operands[1].getType() === Operand.LITERAL) return Instruction.TYPE_I;\r\n        if (this.operands.length === 3 && \r\n            this.operands[0].getType() === Operand.REGISTER &&\r\n            this.operands[1].getType() === Operand.REGISTER &&\r\n            this.operands[2].getType() === Operand.REGISTER) return Instruction.TYPE_R;\r\n        return null;\r\n    }\r\n\r\n    assemble(architecture) {\r\n        if (!this.operation) throw new Error('Operation doesnt exists');\r\n        if (this.operation.getName() === 'hcf') return 0x0003;\r\n        if (this.operation.isPseudo()) throw new Error('Operation is pseudo-operation');\r\n        if (!this.operands) throw new Error('Operands doesnt exists');\r\n\r\n        let type = this.getType();\r\n        if (!type) throw new Error('Invalid instruction type');\r\n\r\n        let opcode = this.operation.getOpcode();\r\n        if (!type) throw new Error('Operation doesnt have opcode');\r\n\r\n        let finalCode = 0x0000;\r\n        switch (type) {\r\n            case Instruction.TYPE_R: {\r\n                let rst = architecture.getRegisterCode(this.operands[0].getValue());\r\n                let rsa = architecture.getRegisterCode(this.operands[1].getValue());\r\n                let rsb = architecture.getRegisterCode(this.operands[2].getValue());\r\n                finalCode |= opcode;    // operation code\r\n                finalCode |= 0 << 11;   // imm\r\n                finalCode |= rst << 8;\r\n                finalCode |= rsa << 5;\r\n                finalCode |= rsb << 2;\r\n                break;\r\n            }\r\n            case Instruction.TYPE_I: {\r\n                let rst = architecture.getRegisterCode(this.operands[0].getValue());\r\n                let immediate = this.operands[1].getValue();\r\n                immediate = utils.signedToUnsigned(immediate, 1);\r\n\r\n                finalCode |= opcode;    // operation code\r\n                finalCode |= 1 << 11;   // imm\r\n                finalCode |= rst << 8;\r\n                finalCode |= immediate;\r\n                break;\r\n            }\r\n            default:\r\n        }\r\n        return finalCode;\r\n    }\r\n\r\n    getOperation() {\r\n        return this.operation;\r\n    }\r\n    \r\n    getOperands() {\r\n        return this.operands;\r\n    }\r\n\r\n    execute(simulation) {\r\n        if (!this.operation) throw new Error('Instruction has no operation');\r\n\r\n        let type = this.getType();\r\n        if (!type) throw new Error('Invalid instruction type');\r\n\r\n        switch (type) {\r\n            case Instruction.TYPE_R: {\r\n                let rst = this.operands[0].getValue();\r\n                let rsa = this.operands[1].getValue();\r\n                let rsb = this.operands[2].getValue();\r\n                \r\n                if (typeof this.operation.executeR === 'function') {\r\n                    this.operation.executeR(simulation, rst, rsa, rsb);\r\n                } else {\r\n                    throw new Error('The operation \"' + this.operation.getName() + '\" doesnt support type R');\r\n                }\r\n                break;\r\n            }\r\n            case Instruction.TYPE_I: {\r\n                let rst = this.operands[0].getValue();\r\n                let immediate = this.operands[1].getValue();\r\n                \r\n                if (typeof this.operation.executeI === 'function') {\r\n                    this.operation.executeI(simulation, rst, immediate);\r\n                } else {\r\n                    throw new Error('The operation \"' + this.operation.getName() + '\" doesnt support type I');\r\n                }\r\n                break;\r\n            }\r\n            default:\r\n        }\r\n    }\r\n\r\n    toString() {\r\n        return this.operation.getName() + ' ' + this.operands.map(operand => {\r\n            let value = operand.getValue();\r\n            if (operand.getType() === Operand.LITERAL) {\r\n                value = '0x'+utils.signedNumberToHex(value, 1);\r\n            }\r\n            return value;\r\n        }).join(',');\r\n    }\r\n}\r\n\r\nexport default Instruction;","\r\nlet basicOps = [];\r\nlet pseudoOps = [];\r\nlet basicOpsByOpcode = {};\r\nlet basicOpsByName = {};\r\nlet pseudoOpsByName = {};\r\nlet basicOpsNames = [];\r\nlet pseudoOpsNames = [];\r\nlet opsNames = [];\r\n\r\nfunction setup() {\r\n    const basicMs = require.context('./', true, /basic\\/.+\\.js$/);\r\n    basicOps = basicMs.keys().map(key => basicMs(key, true).default);\r\n    const pseudoMs = require.context('./', true, /pseudo\\/.+\\.js$/);\r\n    pseudoOps = pseudoMs.keys().map(key => pseudoMs(key, true).default);\r\n\r\n    basicOpsByOpcode = Object.fromEntries(\r\n        basicOps.map(op => [\r\n            op.getOpcode(), // key\r\n            op              // value\r\n        ])\r\n    );\r\n\r\n    basicOpsByName = Object.fromEntries(\r\n        basicOps.map(op => [\r\n            op.getName(),   // key\r\n            op              // value\r\n        ])\r\n    );\r\n    pseudoOpsByName = Object.fromEntries(\r\n        pseudoOps.map(op => [\r\n            op.getName(),   // key\r\n            op              // value\r\n        ])\r\n    );\r\n\r\n    basicOpsNames = Object.keys(basicOpsByName);\r\n    pseudoOpsNames = Object.keys(pseudoOpsByName);\r\n    opsNames = basicOpsNames.concat(pseudoOpsNames);\r\n}\r\n\r\nfunction getOperationNames() {\r\n    return opsNames;\r\n}\r\n\r\nfunction getOperationByName(name) {\r\n    return basicOpsByName[name] || pseudoOpsByName[name];\r\n}\r\n\r\nfunction getBasicOperationByName(name) {\r\n    return basicOpsByName[name];\r\n}\r\n\r\nfunction getPseudoOperationByName(name) {\r\n    return pseudoOpsByName[name];\r\n}\r\n\r\nfunction isOperationName(name) {\r\n    return getOperationByName(name) != null;\r\n}\r\n\r\nfunction isBasicOperationName(name) {\r\n    return basicOpsByName[name] != null;\r\n}\r\n\r\nfunction isPseudoOperationName(name) {\r\n    return pseudoOpsByName[name] != null;\r\n}\r\n\r\nfunction getOperationByOpcode(opcode) {\r\n    return basicOpsByOpcode[opcode];\r\n}\r\n\r\nconst operationsManager = {\r\n    setup,\r\n    getOperationNames,\r\n    getOperationByName,\r\n    getBasicOperationByName,\r\n    getPseudoOperationByName,\r\n    isOperationName,\r\n    isBasicOperationName,\r\n    isPseudoOperationName,\r\n    getOperationByOpcode,\r\n};\r\n\r\nexport default operationsManager;","\r\nfunction callLimiter(func, delay) {\r\n  let thId = null;\r\n  let lastArgs = null;\r\n  return (...args) => {\r\n    lastArgs = args;\r\n    if (thId == null) {\r\n      thId = setTimeout(() => {\r\n        func(...lastArgs);\r\n        thId = null;\r\n      }, delay);\r\n    }\r\n  }\r\n}\r\n\r\nfunction signedNumberToHex(number, byteWidth=4) {\r\n  return signedToUnsigned(number, byteWidth).toString(16).padStart(byteWidth * 2, '0');\r\n}\r\n\r\nfunction signedToUnsigned(number, byteWidth=2) {\r\n  let mask = Math.pow(2, byteWidth * 8) - 1;\r\n  return (((number >>> 0) & mask) >>> 0);\r\n}\r\n\r\nfunction unsignedToSigned(number, byteWidth=2) {\r\nlet mask = Math.pow(2, byteWidth * 8) - 1;\r\nlet isNegative = (number >> (byteWidth * 8 - 1)) & 1;\r\nif (isNegative) {\r\n  return -(((~number+1) & mask) >>> 0);\r\n} else {\r\n  return number & mask;\r\n}\r\n}\r\n\r\nfunction numberToBytes(number, byteWidth=2) {\r\n  let bytes = [];\r\n  for (let i = 0; i < byteWidth; i++) {\r\n      bytes.unshift(number & 0xff);\r\n      number >>= 8;\r\n  }\r\n  return bytes;\r\n}\r\n\r\nfunction bytesToNumber(bytes) {\r\n  let number = 0;\r\n  for (let byte of bytes) {\r\n      number <<= 8;\r\n      number |= byte;\r\n  }\r\n  return number;\r\n}\r\n\r\nfunction isInteger(str) {\r\n  return !isNaN(parseInt(str));\r\n}\r\n\r\nfunction sleep(ms) {\r\n  if (ms <= 0) return 0;\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nconst utils = {\r\n  signedNumberToHex,\r\n  signedToUnsigned,\r\n  unsignedToSigned,\r\n  numberToBytes,\r\n  bytesToNumber,\r\n  isInteger,\r\n  sleep,\r\n  callLimiter,\r\n};\r\n\r\nexport default utils;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Control_container__Day7V\",\"content\":\"Control_content__3iIfu\",\"title\":\"Control_title__Fct6q\",\"cycleArea\":\"Control_cycleArea__3W0Sp\",\"cycleLabel\":\"Control_cycleLabel__o6-yf\",\"btnList\":\"Control_btnList__pjvFr\",\"btn\":\"Control_btn__S6MpS\",\"btnLaterals\":\"Control_btnLaterals__g4gVg\",\"delayLabel\":\"Control_delayLabel__1Cctf\",\"delayInput\":\"Control_delayInput__lHshL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Console_container__3nKjQ\",\"output\":\"Console_output__3CcGx\",\"outAndInBufContainer\":\"Console_outAndInBufContainer__ZSkiW\",\"alertsOutline\":\"Console_alertsOutline__3cNKE\",\"blink\":\"Console_blink__25EME\",\"inputBuffer\":\"Console_inputBuffer__2jMXE\",\"title\":\"Console_title__2sfHt\",\"bottom\":\"Console_bottom__defXf\",\"inputText\":\"Console_inputText__rkhPv\",\"btn\":\"Console_btn__3BwCf\",\"infoColor\":\"Console_infoColor__3bUkv\",\"errorColor\":\"Console_errorColor__2wvUI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Simulator_container__1Th6t\",\"top\":\"Simulator_top__14lKI\",\"symbolTableContainer\":\"Simulator_symbolTableContainer__3Iq5T\",\"programContainer\":\"Simulator_programContainer__YSA2P\",\"assembledContainer\":\"Simulator_assembledContainer__19WZT\",\"registersControlArea\":\"Simulator_registersControlArea__sIcJx\",\"bottom\":\"Simulator_bottom__1n_Ol\",\"consoleContainer\":\"Simulator_consoleContainer__2Yktm\",\"canvasContainer\":\"Simulator_canvasContainer__eybxp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Program_container__ptnOO\",\"titleContainer\":\"Program_titleContainer__2wA5L\",\"infos\":\"Program_infos__3FvD7\",\"blink-green\":\"Program_blink-green__2vqx9\",\"curLineHighlight\":\"Program_curLineHighlight__3ntuk\",\"btn\":\"Program_btn__2C8NB\",\"editor\":\"Program_editor__3d99c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"MemoryViewer_container__36x1j\",\"content\":\"MemoryViewer_content__5lhVs\",\"memoryScroll\":\"MemoryViewer_memoryScroll__ejajI\",\"memoryAreaContainer\":\"MemoryViewer_memoryAreaContainer__31uQe\",\"memoryArea\":\"MemoryViewer_memoryArea__1TCDi\",\"memoryData\":\"MemoryViewer_memoryData__2-C4U\",\"memoryRowNumber\":\"MemoryViewer_memoryRowNumber__3Fx2o\",\"memoryColumnNumber\":\"MemoryViewer_memoryColumnNumber__c5w2Q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Registers_container__2s4UW\",\"title\":\"Registers_title__1C9vy\",\"content\":\"Registers_content__3IXg7\",\"generalRegisterList\":\"Registers_generalRegisterList__FB2qd\",\"pcRegister\":\"Registers_pcRegister__3EfW7\",\"registerContainer\":\"Registers_registerContainer__3HYMJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"SymbolTable_container__-A6je\",\"title\":\"SymbolTable_title__1Uqqp\",\"content\":\"SymbolTable_content__1X6lq\",\"symbolName\":\"SymbolTable_symbolName__2XffG\",\"symbolValue\":\"SymbolTable_symbolValue__3jrXO\",\"fillAllSpace\":\"SymbolTable_fillAllSpace__20mmf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Assembled_container__1jNx0\",\"editor\":\"Assembled_editor__3jQwh\",\"title\":\"Assembled_title__kk-F7\",\"breakpoint\":\"Assembled_breakpoint__2cdAw\",\"currentLineRunning\":\"Assembled_currentLineRunning__eYaaP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"CanvasViewer_container__Phf80\",\"titleContainer\":\"CanvasViewer_titleContainer__3g2xA\",\"new\":\"CanvasViewer_new__VnARG\",\"blink-red\":\"CanvasViewer_blink-red__1HwMW\",\"canvasContainer\":\"CanvasViewer_canvasContainer__TIGc4\",\"canvas\":\"CanvasViewer_canvas__2acTG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Window_container__3JkxK\",\"header\":\"Window_header__ygOBE\",\"title\":\"Window_title__2aHbv\",\"description\":\"Window_description__1NaN6\",\"content\":\"Window_content__3bL7I\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Home_container__1pCbS\",\"windowsContainer\":\"Home_windowsContainer__1a4xb\",\"aboutContainer\":\"Home_aboutContainer__31sEf\"};","import { Component, createRef } from \"react\";\r\nimport styles from './Console.module.css';\r\n\r\nclass Console extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    \r\n    if (!props.consoleDevice) throw new Error('props.consoleDevice null');\r\n\r\n    this.consoleDevice = props.consoleDevice;\r\n\r\n    this.onInput = typeof props.onInput === 'function' ? props.onInput : ()=>{};\r\n\r\n    this.inputRef = createRef();\r\n    this.outputRef = createRef();\r\n\r\n    this.isNewLine = true;\r\n    this.lastNode = null;\r\n    this.lastType = 0;\r\n\r\n    this.state = {\r\n      inputBuffer: [],\r\n      waiting: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.inputBufferHandler = (inputBuffer) => {\r\n      this.setState({inputBuffer});\r\n    };\r\n    this.waitingHandler = (waiting) => {\r\n      this.inputRef.current.focus();\r\n      this.setState({waiting});\r\n    };\r\n    this.writeCharHandler = (char) => {\r\n      this.write(char);\r\n    };\r\n    this.writeIntHandler = (int) => {\r\n      this.write(int);\r\n    };\r\n\r\n    this.consoleDevice.on('input buffer', this.inputBufferHandler);\r\n    this.consoleDevice.on('waiting', this.waitingHandler);\r\n    this.consoleDevice.on('write char', this.writeCharHandler);\r\n    this.consoleDevice.on('write int', this.writeIntHandler);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.consoleDevice.off('input buffer', this.inputBufferHandler);\r\n    this.consoleDevice.off('waiting', this.waitingHandler);\r\n    this.consoleDevice.off('write char', this.writeCharHandler);\r\n    this.consoleDevice.off('write int', this.writeIntHandler);\r\n  }\r\n\r\n  write(text, type=0) {\r\n    if (text.length === 0) return;\r\n\r\n    if (this.lastNode === null || this.lastType !== type) {\r\n      // If hasnt text node of the type, create one\r\n      let textNode = document.createTextNode(text);\r\n      if (type === 0) {\r\n        this.outputRef.current.appendChild(textNode);\r\n      } else if (type === 1) {\r\n        let spanElem = document.createElement('span');\r\n        spanElem.classList.add(styles.infoColor);\r\n        spanElem.appendChild(textNode);\r\n        this.outputRef.current.appendChild(spanElem);\r\n      } else if (type === 2) {\r\n        let spanElem = document.createElement('span');\r\n        spanElem.classList.add(styles.errorColor);\r\n        spanElem.appendChild(textNode);\r\n        this.outputRef.current.appendChild(spanElem);\r\n      }\r\n      this.lastNode = textNode;\r\n    } else {\r\n      let textNode = this.lastNode;\r\n      textNode.textContent += text;\r\n    }\r\n    this.outputRef.current.scrollTop = this.outputRef.current.scrollHeight;\r\n    this.isNewLine = false;\r\n    this.lastType = type;\r\n  }\r\n\r\n  writeLine(text, type=0) {\r\n    this.write((this.isNewLine ? '' : '\\n') + text + '\\n', type);\r\n    this.isNewLine = true;\r\n  }\r\n\r\n  addTextInput(text) {\r\n\t\tlet inputBytes = new Array(text.length + 1);\r\n\t\tlet buffer = Buffer.from(text);\r\n\t\tfor (let i = 0; i < text.length; i++) {\r\n\t\t\tinputBytes[i] = buffer[i];\r\n\t\t}\r\n\t\t// Add \\0 byte on end\r\n\t\tinputBytes[text.length] = 0;\r\n\t\tthis.consoleDevice.addBytes(inputBytes);\r\n  }\r\n\r\n  inputKeyDown(e) {\r\n    if (e.key.toLowerCase() === 'enter') {\r\n      let text = e.target.value;\r\n      if (text.length > 0) {\r\n        e.target.value = '';\r\n        this.addTextInput(text);\r\n      }\r\n    }\r\n  }\r\n\r\n  clearOutput() {\r\n    this.outputRef.current.innerHTML = '';\r\n    this.lastNode = null;\r\n    this.lastType = null;\r\n  }\r\n\r\n  render() { \r\n    return (\r\n      <div className={styles.container}>\r\n        <div className={styles.outAndInBufContainer}>\r\n          <div className={styles.output}>\r\n            <div ref={this.outputRef}></div>\r\n          </div>\r\n          <div className={styles.inputBuffer}>\r\n            <div className={styles.title}>Input Buffer</div>\r\n            <textarea readOnly spellCheck='false' value={this.state.inputBuffer.map(x => x.toString(16).padStart(2, '0')).join(' ')}></textarea>\r\n          </div>\r\n        </div>\r\n        <div className={styles.bottom}>\r\n          <input\r\n            className={(this.state.waiting ? (styles.alertsOutline + ' ') : '') + styles.inputText}\r\n            placeholder=\"input...\"\r\n            id='inputText'\r\n            onKeyDown={this.inputKeyDown.bind(this)}\r\n            ref={this.inputRef} />\r\n          <button className={styles.btn} onClick={this.clearOutput.bind(this)}>Clear Output</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n \r\nexport default Console;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__2U2M-\"};","var map = {\n\t\"./basic/adc.js\": 72,\n\t\"./basic/add.js\": 73,\n\t\"./basic/and.js\": 74,\n\t\"./basic/asr.js\": 75,\n\t\"./basic/bez.js\": 76,\n\t\"./basic/bnz.js\": 77,\n\t\"./basic/ldb.js\": 78,\n\t\"./basic/ldc.js\": 79,\n\t\"./basic/ldr.js\": 80,\n\t\"./basic/ldw.js\": 81,\n\t\"./basic/lsr.js\": 82,\n\t\"./basic/or.js\": 83,\n\t\"./basic/ror.js\": 84,\n\t\"./basic/sbc.js\": 85,\n\t\"./basic/slt.js\": 86,\n\t\"./basic/sltu.js\": 87,\n\t\"./basic/stb.js\": 88,\n\t\"./basic/stw.js\": 89,\n\t\"./basic/sub.js\": 90,\n\t\"./basic/xor.js\": 91\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 71;","const adc = {\r\n    getName() {\r\n        return 'adc';\r\n    },\r\n    getOpcode() {\r\n        return 0x5001;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => false,\r\n    executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n        let carry = simulation.getCarry();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getValue(rsa) + registerBank.getValue(rsb) + carry,\r\n        );\r\n    },\r\n}\r\n\r\nexport default adc;","const add = {\r\n    getName() {\r\n        return 'add';\r\n    },\r\n    getOpcode() {\r\n        return 0x5000;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => true,\r\n    executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getValue(rsa) + registerBank.getValue(rsb),\r\n        );\r\n    },\r\n    executeI(simulation, rst, immediate) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getValue(rst) + immediate,\r\n        );\r\n    },\r\n}\r\n\r\nexport default add;","const and = {\r\n    getName() {\r\n        return 'and';\r\n    },\r\n    getOpcode() {\r\n        return 0x0000;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => true,\r\n    executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getUValue(rsa) & registerBank.getUValue(rsb),\r\n        );\r\n    },\r\n    executeI(simulation, rst, immediate) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getUValue(rst) & immediate,\r\n        );\r\n    },\r\n}\r\n\r\nexport default and;","const asr = {\r\n    getName() {\r\n        return 'asr';\r\n    },\r\n    getOpcode() {\r\n        return 0xA001;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => false,\r\n    executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        let value = registerBank.getValue(rsa);\r\n        simulation.setCarry(value & 1);\r\n        registerBank.setValue(\r\n            rst, \r\n            value >> 1,\r\n        );\r\n    },\r\n}\r\n\r\nexport default asr;","const bez = {\r\n    getName() {\r\n        return 'bez';\r\n    },\r\n    getOpcode() {\r\n        return 0xC000;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => true,\r\n    executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        if (registerBank.getValue(rsa) === 0) {\r\n            simulation.setPC(registerBank.getValue(rsb) - 2);\r\n        }\r\n    },\r\n    executeI(simulation, rst, immediate) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        if (registerBank.getValue(rst) === 0) {\r\n            simulation.setPC(simulation.getPC() + immediate);\r\n        }\r\n    },\r\n}\r\n\r\nexport default bez;","const bnz = {\r\n    getName() {\r\n        return 'bnz';\r\n    },\r\n    getOpcode() {\r\n        return 0xD000;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => true,\r\n    executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        if (registerBank.getValue(rsa) !== 0) {\r\n            simulation.setPC(registerBank.getValue(rsb) - 2);\r\n        }\r\n    },\r\n    executeI(simulation, rst, immediate) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        if (registerBank.getValue(rst) !== 0) {\r\n            simulation.setPC(simulation.getPC() + immediate);\r\n        }\r\n    },\r\n}\r\n\r\nexport default bnz;","const ldb = {\r\n    getName() {\r\n        return 'ldb';\r\n    },\r\n    getOpcode() {\r\n        return 0x0002;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => false,\r\n    executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n        let memory = simulation.getMemory();\r\n\r\n        registerBank.setValue(rst, memory.readByte(registerBank.getUValue(rsb)));\r\n    },\r\n}\r\n\r\nexport default ldb;","const ldc = {\r\n    getName() {\r\n        return 'ldc';\r\n    },\r\n    getOpcode() {\r\n        return 0x9000;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => false,\r\n    supportI: () => true,\r\n    executeI(simulation, rst, immediate) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            (registerBank.getUValue(rst) << 8) | (immediate & 0xFF),\r\n        );\r\n    },\r\n}\r\n\r\nexport default ldc;","const ldr = {\r\n    getName() {\r\n        return 'ldr';\r\n    },\r\n    getOpcode() {\r\n        return 0x8000;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => false,\r\n    supportI: () => true,\r\n    executeI(simulation, rst, immediate) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            immediate,\r\n        );\r\n    },\r\n}\r\n\r\nexport default ldr;","const ldw = {\r\n    getName() {\r\n        return 'ldw';\r\n    },\r\n    getOpcode() {\r\n        return 0x4002;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => false,\r\n    executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n        let memory = simulation.getMemory();\r\n\r\n        registerBank.setValue(rst, memory.readWord(registerBank.getUValue(rsb)));\r\n    },\r\n}\r\n\r\nexport default ldw;","const lsr = {\r\n    getName() {\r\n        return 'lsr';\r\n    },\r\n    getOpcode() {\r\n        return 0xA000;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => false,\r\n    executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        let value = registerBank.getValue(rsa);\r\n        simulation.setCarry(value & 1);\r\n        registerBank.setValue(\r\n            rst, \r\n            value >>> 1,\r\n        );\r\n    },\r\n}\r\n\r\nexport default lsr;","const or = {\r\n    getName() {\r\n        return 'or';\r\n    },\r\n    getOpcode() {\r\n        return 0x1000;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => true,\r\n    executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getValue(rsa) | registerBank.getValue(rsb),\r\n        );\r\n    },\r\n    executeI(simulation, rst, immediate) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getValue(rst) | immediate,\r\n        );\r\n    },\r\n}\r\n\r\nexport default or;","const ror = {\r\n    getName() {\r\n        return 'ror';\r\n    },\r\n    getOpcode() {\r\n        return 0xA002;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => false,\r\n    executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n        let architecture = simulation.getArchitecture();\r\n\r\n        let value = registerBank.getUValue(rsa);\r\n        registerBank.setValue(\r\n            rst, \r\n            (value >> 1) | (simulation.getCarry() << (architecture.getBitWidth() - 1)),\r\n        );\r\n        simulation.setCarry(value & 1);\r\n    },\r\n}\r\n\r\nexport default ror;","const sbc = {\r\n    getName() {\r\n        return 'sbc';\r\n    },\r\n    getOpcode() {\r\n        return 0x6001;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => false,\r\n    executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n        let carry = simulation.getCarry();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getValue(rsa) - registerBank.getValue(rsb) - carry,\r\n        );\r\n    },\r\n}\r\n\r\nexport default sbc;","const slt = {\r\n    getName() {\r\n        return 'slt';\r\n    },\r\n    getOpcode() {\r\n        return 0x3000;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => true,\r\n    executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n        \r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getValue(rsa) < registerBank.getValue(rsb) ? 1 : 0,\r\n        );\r\n    },\r\n    executeI(simulation, rst, immediate) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getValue(rst) < immediate ? 1 : 0,\r\n        );\r\n    },\r\n}\r\n\r\nexport default slt;","const sltu = {\r\n    getName() {\r\n        return 'sltu';\r\n    },\r\n    getOpcode() {\r\n        return 0x4000;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => true,\r\n    executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getUValue(rsa) < registerBank.getUValue(rsb) ? 1 : 0,\r\n        );\r\n    },\r\n    executeI(simulation, rst, immediate) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getUValue(rst) < (immediate >>> 0) ? 1 : 0,\r\n        );\r\n    },\r\n}\r\n\r\nexport default sltu;","const stb = {\r\n    getName() {\r\n        return 'stb';\r\n    },\r\n    getOpcode() {\r\n        return 0x1002;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => false,\r\n    executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n        let memory = simulation.getMemory();\r\n\r\n        memory.writeByte(registerBank.getUValue(rsb), registerBank.getUValue(rsa));\r\n    },\r\n}\r\n\r\nexport default stb;","const stw = {\r\n    getName() {\r\n        return 'stw';\r\n    },\r\n    getOpcode() {\r\n        return 0x5002;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => false,\r\n    executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n        let memory = simulation.getMemory();\r\n\r\n        memory.writeWord(registerBank.getUValue(rsb), registerBank.getUValue(rsa));\r\n    },\r\n}\r\n\r\nexport default stw;","const sub = {\r\n    getName() {\r\n        return 'sub';\r\n    },\r\n    getOpcode() {\r\n        return 0x6000;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => true,\r\n    executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getValue(rsa) - registerBank.getValue(rsb),\r\n        );\r\n    },\r\n    executeI(simulation, rst, immediate) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getValue(rst) - immediate,\r\n        );\r\n    },\r\n}\r\n\r\nexport default sub;","const xor = {\r\n    getName() {\r\n        return 'xor';\r\n    },\r\n    getOpcode() {\r\n        return 0x2000;\r\n    },\r\n    isPseudo() {\r\n        return false;\r\n    },\r\n    supportR: () => true,\r\n    supportI: () => true,\r\n    executeR(simulation, rst, rsa, rsb) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getUValue(rsa) ^ registerBank.getUValue(rsb),\r\n        );\r\n    },\r\n    executeI(simulation, rst, immediate) {\r\n        let registerBank = simulation.getRegisterBank();\r\n\r\n        registerBank.setValue(\r\n            rst, \r\n            registerBank.getUValue(rst) ^ immediate,\r\n        );\r\n    },\r\n}\r\n\r\nexport default xor;","var map = {\n\t\"./pseudo/hcf.js\": 93,\n\t\"./pseudo/ldi.js\": 94,\n\t\"./pseudo/lsl.js\": 95,\n\t\"./pseudo/pop.js\": 96,\n\t\"./pseudo/push.js\": 97\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 92;","const hcf = {\r\n    getName() {\r\n        return 'hcf';\r\n    },\r\n    isPseudo() {\r\n        return true;\r\n    },\r\n}\r\n\r\nexport default hcf;","const ldi = {\r\n    getName() {\r\n        return 'ldi';\r\n    },\r\n    isPseudo() {\r\n        return true;\r\n    },\r\n}\r\n\r\nexport default ldi;","const lsl = {\r\n    getName() {\r\n        return 'lsl';\r\n    },\r\n    isPseudo() {\r\n        return true;\r\n    },\r\n}\r\n\r\nexport default lsl;","const pop = {\r\n    getName() {\r\n        return 'pop';\r\n    },\r\n    isPseudo() {\r\n        return true;\r\n    },\r\n}\r\n\r\nexport default pop;","const push = {\r\n    getName() {\r\n        return 'push';\r\n    },\r\n    isPseudo() {\r\n        return true;\r\n    },\r\n}\r\n\r\nexport default push;","var map = {\n\t\"./pseudos/_large_immediate.js\": 99,\n\t\"./pseudos/asr.js\": 100,\n\t\"./pseudos/bez.js\": 101,\n\t\"./pseudos/bnz.js\": 102,\n\t\"./pseudos/hcf.js\": 103,\n\t\"./pseudos/ldb.js\": 104,\n\t\"./pseudos/ldi.js\": 105,\n\t\"./pseudos/ldw.js\": 106,\n\t\"./pseudos/lsl.js\": 107,\n\t\"./pseudos/lsr.js\": 108,\n\t\"./pseudos/pop.js\": 109,\n\t\"./pseudos/push.js\": 110,\n\t\"./pseudos/ror.js\": 111,\n\t\"./pseudos/stb.js\": 112,\n\t\"./pseudos/stw.js\": 113\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 98;","import operationsManager from '../../operations/operationsManager';\r\nimport Instruction from '../../instruction';\r\nimport Operand from '../../operand';\r\n\r\nlet supportedOpNames = new Set([ 'and', 'or', 'xor', 'slt', 'add', 'sub', 'bez', 'bnz' ]);\r\n\r\nconst operationLdi = operationsManager.getOperationByName('ldi');\r\n\r\nconst _large_immediate = {\r\n    getNonPseudoInstructions: (instruction, architecture) => {\r\n        if (!supportedOpNames.has(instruction.getOperation().getName())) return [];\r\n\r\n        let operands = instruction.getOperands();\r\n        if (operands.length !== 2) return [];\r\n\r\n        if (operands[0].getType() === 'register') {\r\n            switch (operands[1].getType()) {\r\n                case 'literal':\r\n                    let literal = operands[1].getValue();\r\n                    if (literal > 127 || literal < -128) {\r\n                        return [\r\n                            new Instruction(operationLdi, [ new Operand('at', Operand.REGISTER), new Operand(literal, Operand.LITERAL) ]),\r\n                            new Instruction(instruction.getOperation(), [ operands[0], operands[0], new Operand('at', Operand.REGISTER) ]),\r\n                        ];\r\n                    }\r\n                    break;\r\n                default:\r\n            }\r\n        }\r\n\r\n        return [];\r\n    },\r\n};\r\n\r\nexport default _large_immediate;","import operationsManager from '../../operations/operationsManager';\r\nimport Instruction from '../../instruction';\r\nimport Operand from '../../operand';\r\n\r\nconst operationAsr = operationsManager.getOperationByName('asr');\r\n\r\nconst asr = {\r\n    getOperation: () => operationAsr,\r\n    getNonPseudoInstructions: (instruction, architecture) => {\r\n        if (instruction.getOperation().getName() !== operationAsr.getName()) return [];\r\n\r\n        let operands = instruction.getOperands();\r\n        if (operands.length !== 2) return [];\r\n\r\n        return [\r\n            new Instruction(operationAsr, [ operands[0], operands[1], new Operand('r0', Operand.REGISTER) ] ),\r\n        ];\r\n    },\r\n};\r\n\r\nexport default asr;","import operationsManager from '../../operations/operationsManager';\r\nimport Instruction from '../../instruction';\r\nimport Operand from '../../operand';\r\n\r\nconst operationBez = operationsManager.getOperationByName('bez');\r\nconst operationLdi = operationsManager.getOperationByName('ldi');\r\n\r\nconst bez = {\r\n    getOperation: () => operationBez,\r\n    getNonPseudoInstructions: (instruction, architecture) => {\r\n        if (instruction.getOperation().getName() !== operationBez.getName()) return [];\r\n\r\n        let operands = instruction.getOperands();\r\n        if (operands.length !== 2) return [];\r\n        \r\n        if (operands[0].getType() === 'register') {\r\n            switch (operands[1].getType()) {\r\n                case 'register':\r\n                    // bez r1, r2 -> [ bez r0, r1, r2 ]\r\n                    return [\r\n                        new Instruction(operationBez, [ new Operand('r0', Operand.REGISTER), operands[0], operands[1] ]),\r\n                    ];\r\n                case 'symbol':\r\n                    // bez r1, sym -> [ ldi at, sym   bez r0, r1, at ]\r\n                    return [\r\n                        new Instruction(operationLdi, [ new Operand('at', Operand.REGISTER), operands[1] ]),\r\n                        new Instruction(operationBez, [ new Operand('r0', Operand.REGISTER), operands[0], new Operand('at', Operand.REGISTER) ]),\r\n                    ];\r\n                default:\r\n            }\r\n        }\r\n        return [];\r\n    },\r\n};\r\n\r\nexport default bez;","import operationsManager from '../../operations/operationsManager';\r\nimport Instruction from '../../instruction';\r\nimport Operand from '../../operand';\r\n\r\nconst operationBnz = operationsManager.getOperationByName('bnz');\r\nconst operationLdi = operationsManager.getOperationByName('ldi');\r\n\r\nconst bnz = {\r\n    getOperation: () => operationBnz,\r\n    getNonPseudoInstructions: (instruction, architecture) => {\r\n        if (instruction.getOperation().getName() !== operationBnz.getName()) return [];\r\n\r\n        let operands = instruction.getOperands();\r\n        if (operands.length !== 2) return [];\r\n\r\n        if (operands[0].getType() === 'register') {\r\n            switch (operands[1].getType()) {\r\n                case 'register':\r\n                    // bnz r1, r2 -> [ bnz r0, r1, r2 ]\r\n                    return [\r\n                        new Instruction(operationBnz, [ new Operand('r0', Operand.REGISTER), operands[0], operands[1] ]),\r\n                    ];\r\n                case 'symbol':\r\n                    // bnz r1, sym -> [ ldi at, sym   bnz r0, r1, at ]\r\n                    return [\r\n                        new Instruction(operationLdi, [ new Operand('at', Operand.REGISTER), operands[1] ]),\r\n                        new Instruction(operationBnz, [ new Operand('r0', Operand.REGISTER), operands[0], new Operand('at', Operand.REGISTER) ]),\r\n                    ];\r\n                default:\r\n            }\r\n        }\r\n        return [];\r\n    },\r\n};\r\n\r\nexport default bnz;","import operationsManager from '../../operations/operationsManager';\r\nimport Instruction from '../../instruction';\r\nimport Operand from '../../operand';\r\n\r\nconst operationHcf = operationsManager.getOperationByName('hcf');\r\n\r\nconst hcf = {\r\n    getOperation: () => operationHcf,\r\n    getNonPseudoInstructions: (instruction, architecture) => {\r\n        if (instruction.getOperation().getName() !== operationHcf.getName()) return [];\r\n\r\n        let operands = instruction.getOperands();\r\n        if (operands.length !== 0) return [];\r\n\r\n        // hcf -> [ ldb r0, r0, r0 ]\r\n        return [\r\n            new Instruction(operationHcf, [ \r\n                new Operand('r0', Operand.REGISTER), \r\n                new Operand('r0', Operand.REGISTER), \r\n                new Operand('r0', Operand.REGISTER)\r\n            ]),\r\n        ];\r\n    },\r\n};\r\n\r\nexport default hcf;","import operationsManager from '../../operations/operationsManager';\r\nimport Instruction from '../../instruction';\r\nimport Operand from '../../operand';\r\n\r\nconst operationLdb = operationsManager.getOperationByName('ldb');\r\nconst operationLdi = operationsManager.getOperationByName('ldi');\r\n\r\nconst ldb = {\r\n    getOperation: () => operationLdb,\r\n    getNonPseudoInstructions: (instruction, architecture) => {\r\n        if (instruction.getOperation().getName() !== operationLdb.getName()) return [];\r\n\r\n        let operands = instruction.getOperands();\r\n        if (operands.length !== 2) return [];\r\n\r\n        if (operands[0].getType() === 'register') {\r\n            switch (operands[1].getType()) {\r\n                case 'register':\r\n                    // ldb r1, r2 -> [ ldb r1, r0, r2 ]\r\n                    return [\r\n                        new Instruction(operationLdb, [ operands[0], new Operand('r0', Operand.REGISTER), operands[1] ]),\r\n                    ];\r\n                case 'symbol':\r\n                case 'literal':\r\n                    // ldb r1, 0 -> [ ldi at, 0   ldb r1, r0, at ]\r\n                    return [\r\n                        new Instruction(operationLdi, [ new Operand('at', Operand.REGISTER), operands[1] ]),\r\n                        new Instruction(operationLdb, [ operands[0], new Operand('r0', Operand.REGISTER), new Operand('at', Operand.REGISTER) ]),\r\n                    ];\r\n                default:\r\n            }\r\n        }\r\n        return [];\r\n    },\r\n};\r\n\r\nexport default ldb;","import operationsManager from '../../operations/operationsManager';\r\nimport Instruction from '../../instruction';\r\nimport Operand from '../../operand';\r\nimport utils from '../../../../utils';\r\nconst operation = operationsManager.getOperationByName('ldi');\r\n\r\nconst operationLdr = operationsManager.getOperationByName('ldr');\r\nconst operationLdc = operationsManager.getOperationByName('ldc');\r\n\r\nconst ldi = {\r\n    getOperation: () => operation,\r\n    getNonPseudoInstructions: (instruction, architecture) => {\r\n        if (instruction.getOperation().getName() !== operation.getName()) return [];\r\n\r\n        let operands = instruction.getOperands();\r\n        if (operands.length !== 2) return [];\r\n\r\n        if (operands[0].getType() === 'register') {\r\n            switch (operands[1].getType()) {\r\n                case 'literal':\r\n                    let literal = operands[1].getValue();\r\n                    if (literal < 256 && literal > -128) {\r\n                        // ldi r1, const -> ldr r1, const\r\n                        // -128 < const < 256\r\n                        return [\r\n                            new Instruction(operationLdr, [ operands[0], operands[1] ]),\r\n                        ];\r\n                    } else {\r\n                        // ldi r1, const -> [ ldr r1, const(first byte)   ldc r1, const(second byte) ]  (16 bits)\r\n                        // -128 >= const <= 256\r\n\r\n                        let bytes = utils.numberToBytes(literal, architecture.getByteWidth());\r\n                        if (bytes.length === 0) throw new Error('Convert number to bytes error');\r\n                        return [\r\n                            new Instruction(operationLdr, [ operands[0], new Operand(bytes.shift(), Operand.LITERAL) ]),\r\n                            ...bytes.map(byte => new Instruction(operationLdc, [ operands[0], new Operand(byte, Operand.LITERAL) ])),\r\n                        ];\r\n                    }\r\n                case 'symbol':\r\n                    // ldi r1, sym -> [ ldc r1, sym+0(1 byte)   ldc r1, sym+1(1 byte) ]\r\n                    return new Array(architecture.getByteWidth()).fill(0).map(\r\n                        (x, i) => {\r\n                            return new Instruction(operationLdc, [ \r\n                                operands[0], \r\n                                new Operand(operands[1].getValue(), Operand.SYMBOL).setByteRange({ min: i, max: i}),\r\n                            ]);\r\n                        }\r\n                    );\r\n                default:\r\n            }\r\n        }\r\n        return [];\r\n    },\r\n};\r\n\r\nexport default ldi;","import operationsManager from '../../operations/operationsManager';\r\nimport Instruction from '../../instruction';\r\nimport Operand from '../../operand';\r\n\r\nconst operationLdw = operationsManager.getOperationByName('ldw');\r\nconst operationLdi = operationsManager.getOperationByName('ldi');\r\n\r\nconst ldw = {\r\n    getOperation: () => operationLdw,\r\n    getNonPseudoInstructions: (instruction, architecture) => {\r\n        if (instruction.getOperation().getName() !== operationLdw.getName()) return [];\r\n\r\n        let operands = instruction.getOperands();\r\n        if (operands.length !== 2) return [];\r\n\r\n        if (operands[0].getType() === 'register') {\r\n            switch (operands[1].getType()) {\r\n                case 'register':\r\n                    // ldw r1, r2 -> [ ldw r1, r0, r2 ]\r\n                    return [\r\n                        new Instruction(operationLdw, [ operands[0], new Operand('r0', Operand.REGISTER), operands[1] ]),\r\n                    ];\r\n                case 'symbol':\r\n                case 'literal':\r\n                    // ldw r1, lit -> [ ldi at, lit   ldb r1, r0, at ]\r\n                    return [\r\n                        new Instruction(operationLdi, [ new Operand('at', Operand.REGISTER), operands[1] ]),\r\n                        new Instruction(operationLdw, [ operands[0], new Operand('r0', Operand.REGISTER), new Operand('at', Operand.REGISTER) ]),\r\n                    ];\r\n                default:\r\n            }\r\n        }\r\n        return [];\r\n    },\r\n};\r\n\r\nexport default ldw;","import operationsManager from '../../operations/operationsManager';\r\nimport Instruction from '../../instruction';\r\n\r\nconst operationLsl = operationsManager.getOperationByName('lsl');\r\nconst operationAdd = operationsManager.getOperationByName('add');\r\n\r\nconst lsl = {\r\n    getOperation: () => operationLsl,\r\n    getNonPseudoInstructions: (instruction, architecture) => {\r\n        if (instruction.getOperation().getName() !== operationLsl.getName()) return [];\r\n\r\n        let operands = instruction.getOperands();\r\n        if (operands.length !== 2) return [];\r\n\r\n        if (operands[0].getType() === 'register') {\r\n            switch (operands[1].getType()) {\r\n                case 'register':\r\n                    // lsl r1, r2 -> [ add r1, r2, r2 ]\r\n                    return [\r\n                        new Instruction(operationAdd, [ operands[0], operands[1], operands[1] ]),\r\n                    ];\r\n                default:\r\n            }\r\n        }\r\n        return [];\r\n    },\r\n};\r\n\r\nexport default lsl;","import operationsManager from '../../operations/operationsManager';\r\nimport Instruction from '../../instruction';\r\nimport Operand from '../../operand';\r\n\r\nconst operationLsr = operationsManager.getOperationByName('lsr');\r\n\r\nconst lsr = {\r\n    getOperation: () => operationLsr,\r\n    getNonPseudoInstructions: (instruction, architecture) => {\r\n        if (instruction.getOperation().getName() !== operationLsr.getName()) return [];\r\n\r\n        let operands = instruction.getOperands();\r\n        if (operands.length !== 2) return [];\r\n\r\n        return [\r\n            new Instruction(operationLsr, [ operands[0], operands[1], new Operand('r0', Operand.REGISTER) ]),\r\n        ];\r\n    },\r\n};\r\n\r\nexport default lsr;","import operationsManager from '../../operations/operationsManager';\r\nimport Instruction from '../../instruction';\r\nimport Operand from '../../operand';\r\n\r\nconst operationPop = operationsManager.getOperationByName('pop');\r\nconst operationLdw = operationsManager.getOperationByName('ldw');\r\nconst operationAdd = operationsManager.getOperationByName('add');\r\n\r\nconst pop = {\r\n    getOperation: () => operationLdw,\r\n    getNonPseudoInstructions: (instruction, architecture) => {\r\n        if (instruction.getOperation().getName() !== operationPop.getName()) return [];\r\n\r\n        let operands = instruction.getOperands();\r\n        if (operands.length !== 1) return [];\r\n\r\n        if (operands[0].getType() === 'register') {\r\n            // pop r1 -> [ ldw r1, sp   add sp, 2 ]\r\n            return [\r\n                new Instruction(operationLdw, [ operands[0], new Operand('sp', Operand.REGISTER) ]),\r\n                new Instruction(operationAdd, [ new Operand('sp', Operand.REGISTER), new Operand(2, Operand.LITERAL) ]),\r\n            ];\r\n        }\r\n        return [];\r\n    },\r\n};\r\n\r\nexport default pop;","import operationsManager from '../../operations/operationsManager';\r\nimport Instruction from '../../instruction';\r\nimport Operand from '../../operand';\r\n\r\nconst operationPush = operationsManager.getOperationByName('push');\r\nconst operationSub = operationsManager.getOperationByName('sub');\r\nconst operationStw = operationsManager.getOperationByName('stw');\r\n\r\nconst push = {\r\n    getOperation: () => operationPush,\r\n    getNonPseudoInstructions: (instruction, architecture) => {\r\n        if (instruction.getOperation().getName() !== operationPush.getName()) return [];\r\n\r\n        let operands = instruction.getOperands();\r\n        if (operands.length !== 1) return [];\r\n\r\n        if (operands[0].getType() === 'register') {\r\n            // push r1 -> [ sub sb, 2   stw r1, sp ]\r\n            return [\r\n                new Instruction(operationSub, [ new Operand('sp', Operand.REGISTER), new Operand(2, Operand.LITERAL) ]),\r\n                new Instruction(operationStw, [ operands[0], new Operand('sp', Operand.REGISTER) ]),\r\n            ];\r\n        }\r\n        return [];\r\n    },\r\n};\r\n\r\nexport default push;","import operationsManager from '../../operations/operationsManager';\r\nimport Instruction from '../../instruction';\r\nimport Operand from '../../operand';\r\n\r\nconst operationRor = operationsManager.getOperationByName('ror');\r\n\r\nconst ror = {\r\n    getOperation: () => operationRor,\r\n    getNonPseudoInstructions: (instruction, architecture) => {\r\n        if (instruction.getOperation().getName() !== operationRor.getName()) return [];\r\n\r\n        let operands = instruction.getOperands();\r\n        if (operands.length !== 2) return [];\r\n\r\n        return [\r\n            new Instruction(operationRor, [ operands[0], operands[1], new Operand('r0', Operand.REGISTER) ]),\r\n        ];\r\n    },\r\n};\r\n\r\nexport default ror;","import operationsManager from '../../operations/operationsManager';\r\nimport Instruction from '../../instruction';\r\nimport Operand from '../../operand';\r\n\r\nconst operationStb = operationsManager.getOperationByName('stb');\r\nconst operationLdi = operationsManager.getOperationByName('ldi');\r\n\r\nconst stb = {\r\n    getOperation: () => operationStb,\r\n    getNonPseudoInstructions: (instruction, architecture) => {\r\n        if (instruction.getOperation().getName() !== operationStb.getName()) return [];\r\n\r\n        let operands = instruction.getOperands();\r\n        if (operands.length !== 2) return [];\r\n\r\n        if (operands[0].getType() === 'register') {\r\n            switch (operands[1].getType()) {\r\n                case 'register':\r\n                    // stb r1, r2 -> [ stb r0, r1, r2 ]\r\n                    return [\r\n                        new Instruction(operationStb, [ new Operand('r0', Operand.REGISTER), operands[0], operands[1] ]),\r\n                    ];\r\n                case 'symbol':\r\n                case 'literal':\r\n                    // stb r1, lit -> [ ldi at, lit   stb r0, r1, at ]\r\n                    return [\r\n                        new Instruction(operationLdi, [ new Operand('at', Operand.REGISTER), operands[1] ]),\r\n                        new Instruction(operationStb, [ new Operand('r0', Operand.REGISTER), operands[0], new Operand('at', Operand.REGISTER) ]),\r\n                    ];\r\n                default:\r\n            }\r\n        }\r\n        return [];\r\n    },\r\n};\r\n\r\nexport default stb;","import operationsManager from '../../operations/operationsManager';\r\nimport Instruction from '../../instruction';\r\nimport Operand from '../../operand';\r\n\r\nconst operationStw = operationsManager.getOperationByName('stw');\r\nconst operationLdi = operationsManager.getOperationByName('ldi');\r\n\r\nconst stw = {\r\n    getOperation: () => operationStw,\r\n    getNonPseudoInstructions: (instruction, architecture) => {\r\n        if (instruction.getOperation().getName() !== operationStw.getName()) return [];\r\n\r\n        let operands = instruction.getOperands();\r\n        if (operands.length !== 2) return [];\r\n\r\n        if (operands[0].getType() === 'register') {\r\n            switch (operands[1].getType()) {\r\n                case 'register':\r\n                    // stw r1, r2 -> [ stw r0, r1, r2 ]\r\n                    return [\r\n                        new Instruction(operationStw, [ new Operand('r0', Operand.REGISTER), operands[0], operands[1] ]),\r\n                    ];\r\n                case 'symbol':\r\n                case 'literal':\r\n                    // stw r1, lit -> [ ldi at, lit   stw r0, r1, at ]\r\n                    return [\r\n                        new Instruction(operationLdi, [ new Operand('at', Operand.REGISTER), operands[1] ]),\r\n                        new Instruction(operationStw, [ new Operand('r0', Operand.REGISTER), operands[0], new Operand('at', Operand.REGISTER) ]),\r\n                    ];\r\n                default:\r\n            }\r\n        }\r\n        return [];\r\n    },\r\n};\r\n\r\nexport default stw;","import Architecture from './architecture';\r\n\r\nlet _16;\r\nlet _32;\r\n\r\nfunction setup() {\r\n    _16 = new Architecture({\r\n        bitWidth: 16,\r\n        registers: {\r\n            'r0': { code: 0, aliases: [ 'at' ] },\r\n            'r1': { code: 1, aliases: [] },\r\n            'r2': { code: 2, aliases: [] },\r\n            'r3': { code: 3, aliases: [] },\r\n            'r4': { code: 4, aliases: [] },\r\n            'r5': { code: 5, aliases: [ 'sr' ] },\r\n            'r6': { code: 6, aliases: [ 'lr' ] },\r\n            'r7': { code: 7, aliases: [ 'sp' ] },\r\n        },\r\n        memoryRegions: {\r\n            codeData: 0x0000,\r\n            stack: 0xdffe,\r\n            io: 0xf000,\r\n        },\r\n    });\r\n    _32 = new Architecture({\r\n        bitWidth: 32,\r\n        registers: {\r\n            'r0': { code: 0, aliases: [ 'at' ] },\r\n            'r1': { code: 1, aliases: [] },\r\n            'r2': { code: 2, aliases: [] },\r\n            'r3': { code: 3, aliases: [] },\r\n            'r4': { code: 4, aliases: [] },\r\n            'r5': { code: 5, aliases: [ 'sr' ] },\r\n            'r6': { code: 6, aliases: [ 'lr' ] },\r\n            'r7': { code: 7, aliases: [ 'sp' ] },\r\n        },\r\n        memoryRegions: {\r\n            codeData: 0x00000000,\r\n            stack: 0x000ffffc,\r\n            io: 0xf0000000,\r\n        },\r\n    });\r\n}\r\n\r\nfunction getViking16Arch() {\r\n    return _16;\r\n}\r\n\r\nfunction getViking32Arch() {\r\n    return _32;\r\n}\r\n\r\nconst architectureManager = {\r\n    setup,\r\n    getViking16Arch,\r\n    getViking32Arch,\r\n};\r\n\r\nexport default architectureManager;","import styles from './Registers.module.css';\r\nimport { Component } from \"react\";\r\nimport utils from '../../utils';\r\n\r\nclass Registers extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    if (!props.registerBank) throw new Error('props.registerBank null');\r\n\r\n    this.registerBank = props.registerBank;\r\n\r\n    this.registerInfos = Object.entries(this.registerBank.getRegisterInfos());\r\n    \r\n    this.state = {\r\n      pc: 0,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.valueUpdateHandler = utils.callLimiter(() => {\r\n      this.setState({});\r\n    }, 50);\r\n    this.registerBank.on('value update', this.valueUpdateHandler);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.registerBank.off('value update', this.valueUpdateHandler);\r\n  }\r\n\r\n  setPC(pc) {\r\n    this.setState({pc});\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={styles.container}>\r\n        <div className={styles.title}>Registers</div>\r\n        \r\n        <div className={styles.content}>\r\n          <div className={styles.generalRegisterList}>\r\n            { this.registerInfos.map(([name, infos], i) => <Register key={i} name={name} aliases={infos.aliases} value={this.registerBank.getUValue(name)} />) }\r\n          </div>\r\n          \r\n          <div className={styles.pcRegister}>\r\n            <Register name=\"pc\" aliases={[]} value={this.state.pc} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Register extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.props = props;\r\n  }\r\n\r\n  render() { \r\n    return (\r\n      <div className={styles.registerContainer}>\r\n        <div>{this.props.name}{this.props.aliases.length > 0 ? (' (' + this.props.aliases.join(',') + ')') : ''}</div>\r\n        <div>{this.props.value.toString(16).padStart(4, '0')}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n \r\nexport default Registers;","export default class MemoryStorage16 {\r\n    constructor() {\r\n        this.data = new Array(0xFFFF + 1).fill(0);\r\n    }\r\n\r\n    reset() {\r\n        for (let i = 0; i < this.data.length; i++) {\r\n            this.data[i] = 0;\r\n        }\r\n    }\r\n\r\n    readByte(address) {\r\n        return this.data[address];\r\n    }\r\n\r\n    readWord(address) {\r\n        let byte0 = this.data[address];\r\n        let byte1 = this.data[address+1];\r\n        return (byte0 << 8) | byte1;\r\n    }\r\n\r\n    writeByte(address, byte) {\r\n        this.data[address] = byte & 0xFF;\r\n    }\r\n\r\n    writeWord(address, word) {\r\n        let byte0 = (word >> 8) & 0xFF;\r\n        let byte1 = word & 0xFF;\r\n        this.data[address] = byte0;\r\n        this.data[address+1] = byte1;\r\n    }\r\n\r\n    getDataLength() {\r\n        return this.data.length;\r\n    }\r\n\r\n    getData() {\r\n        return this.data;\r\n    }\r\n\r\n    getBytesFromRange(start, end) {\r\n        return this.data.slice(start, end);\r\n    }\r\n    \r\n    getWordsFromRange(start, end) {\r\n        let byte0;\r\n        let words = [];\r\n        for (let i = start; i < end; i++) {\r\n            if (i % 2 === 0) {\r\n                byte0 = this.data[i];\r\n            } else {\r\n                let byte1 = this.data[i];\r\n                let word = (byte0 << 8) | byte1;\r\n                words.push(word);\r\n            }\r\n        }\r\n        return words;\r\n    }\r\n}","import { EventEmitter } from 'events';\r\nimport MemoryStorage16 from './memoryStorage16';\r\n\r\nclass Memory extends EventEmitter {\r\n    static createFromArchitecture (architecture, ...args) {\r\n        let bitWidth = architecture.getBitWidth();\r\n        let memoryRegions = architecture.getMemoryRegions();\r\n        let storage;\r\n        switch (bitWidth) {\r\n            case 16:\r\n                storage = new MemoryStorage16();\r\n                break;\r\n            /*case 32:\r\n                storage = new MemoryStorage16();\r\n                break;*/\r\n            default:\r\n                throw new Error('Memory for this architecture doesnt exists (implementation doesnt exists)');\r\n        }\r\n        return new Memory(storage, memoryRegions);\r\n    }\r\n\r\n    constructor(storage, memoryRegions) {\r\n        super();\r\n        this.storage = storage;\r\n        this.memoryRegions = memoryRegions;\r\n    }\r\n\r\n    getMemoryRegions() {\r\n        return this.memoryRegions;\r\n    }\r\n\r\n    reset(...args) {\r\n        let result = this.storage.reset(...args);\r\n        this.emit('reset');\r\n        return result;\r\n    }\r\n    \r\n    getDataLength(...args) {\r\n        return this.storage.getDataLength(...args);\r\n    }\r\n    \r\n    getBytesFromRange(...args) {\r\n        return this.storage.getBytesFromRange(...args);\r\n    }\r\n    \r\n    getWordsFromRange(...args) {\r\n        return this.storage.getWordsFromRange(...args);\r\n    }\r\n    \r\n    readByte(address) {\r\n        if (this.onReadByte) {\r\n            let newValue = this.onReadByte(address);\r\n            if (newValue != null) {\r\n                return newValue;\r\n            }\r\n        }\r\n        let result = this.storage.readByte(address);\r\n        this.emit('storage read byte', address);\r\n        return result;\r\n    }\r\n    \r\n    readWord(address) {\r\n        if (this.onReadWord) {\r\n            let newValue = this.onReadWord(address);\r\n            if (newValue != null) {\r\n                return newValue;\r\n            }\r\n        }\r\n        let result = this.storage.readWord(address);\r\n        this.emit('storage read word', address);\r\n        return result;\r\n    }\r\n\r\n    writeByte(address, byte) {\r\n        if (this.onWriteByte) {\r\n            if (!this.onWriteByte(address, byte)) {\r\n                return false;\r\n            }\r\n        }\r\n        let result = this.storage.writeByte(address, byte);\r\n        this.emit('storage write byte', address, byte);\r\n        return result;\r\n    }\r\n    \r\n    writeWord(address, word) {\r\n        if (this.onWriteWord) {\r\n            if(!this.onWriteWord(address, word)) {\r\n                return false;\r\n            }\r\n        }\r\n        let result = this.storage.writeWord(address, word);\r\n        this.emit('storage write word', address, word);\r\n        return result;\r\n    }\r\n}\r\n\r\nexport default Memory;","export default class Architecture {\r\n    constructor({ bitWidth, registers, memoryRegions }) {\r\n        this.bitWidth = bitWidth;\r\n        this.byteWidth = bitWidth / 8;\r\n        this.memoryRegions = memoryRegions;\r\n        this.mask = Math.pow(2, bitWidth) - 1;\r\n\r\n        this.registers = registers;\r\n\r\n        this.registersByName = Object.fromEntries(\r\n            Object.entries(registers)\r\n            .map(([registerName, register]) => [\r\n                [\r\n                    registerName,   // key      registerName\r\n                    register,       // value    register\r\n                ],\r\n                ...register.aliases.map(aliasName => [\r\n                        aliasName,  // key      registerName\r\n                        register,   // value    register\r\n                    ]\r\n                )\r\n            ])\r\n            .reduce((a, b) => a.concat(b))\r\n        );\r\n        this.registersNameByCode = Object.fromEntries(\r\n            Object.entries(registers)\r\n            .map(([registerName, register]) => [\r\n                [\r\n                    register.code,  // key      registerName\r\n                    registerName,   // value    register\r\n                ],\r\n            ])\r\n            .reduce((a, b) => a.concat(b))\r\n        );\r\n    }\r\n\r\n    getMask() {\r\n        return this.mask;\r\n    }\r\n\r\n    getBitWidth() {\r\n        return this.bitWidth;\r\n    }\r\n\r\n    getByteWidth() {\r\n        return this.byteWidth;\r\n    }\r\n\r\n    hasRegisterName(name) {\r\n        return this.registersByName[name] != null;\r\n    }\r\n\r\n    getRegisterNames() {\r\n        return Object.keys(this.registersByName);\r\n    }\r\n\r\n    getRegisters() {\r\n        return this.registers;\r\n    }\r\n\r\n    getRegisterNameByCode(code) {\r\n        return this.registersNameByCode[code];\r\n    }\r\n\r\n    getRegisterCode(name) {\r\n        if (!this.hasRegisterName(name)) throw new Error('Register doesnt exists');\r\n        return this.registersByName[name].code;\r\n    }\r\n\r\n    getMemoryRegions() {\r\n        return this.memoryRegions;\r\n    }\r\n}","import { EventEmitter } from 'events';\r\nimport utils from '../../../utils';\r\n\r\nexport default class RegisterBank extends EventEmitter {\r\n\r\n    static createFromArchitecture (architecture, ...args) {\r\n        let archRegisters = architecture.getRegisters();\r\n        return new RegisterBank(archRegisters, architecture.getByteWidth(), ...args);\r\n    }\r\n\r\n    constructor (registerInfos, registerByteWidth) {\r\n        super();\r\n        this.registerInfos = registerInfos;\r\n        this.registerByteWidth = registerByteWidth;\r\n        this.setup();\r\n    }\r\n\r\n    getRegisterInfos() {\r\n        return this.registerInfos;\r\n    }\r\n\r\n    getRegisterInfo(name) {\r\n        return this.registerInfos[name];\r\n    }\r\n\r\n    setup() {\r\n        this.mask = Math.pow(2, 8 * this.registerByteWidth) - 1;\r\n\r\n        this.registers = {};\r\n        for (let registerName in this.registerInfos) {\r\n            let registerInfo = this.registerInfos[registerName];\r\n            let { aliases } = registerInfo;\r\n\r\n            let register = {\r\n                name: registerName,\r\n                aliases,\r\n                value: 0,\r\n            };\r\n            \r\n            this.registers[registerName] = register;\r\n            aliases.forEach(aliasName => this.registers[aliasName] = register);\r\n        }\r\n    }\r\n\r\n    reset() {\r\n        for (let registerName in this.registers) {\r\n            this.setValue(registerName, 0);\r\n        }\r\n    }\r\n\r\n    setValue(registerName, newValue) {\r\n        newValue = (newValue & this.mask) >>> 0;\r\n        let register = this.registers[registerName];\r\n        let oldValue = register.value;\r\n        register.value = newValue;\r\n        this.emit('value update', { registerName: register.name, oldValue, newValue });\r\n    }\r\n\r\n    getValue(registerName) {\r\n        return utils.unsignedToSigned(this.registers[registerName].value, this.registerByteWidth);\r\n    }\r\n    \r\n    getUValue(registerName) {\r\n        return this.registers[registerName].value;\r\n    }\r\n}","export class AsmError extends Error {\r\n  constructor(message) {\r\n    super(message);\r\n    this.name = \"AsmError\";\r\n  }\r\n}\r\n\r\nexport class SimulationError extends AsmError {\r\n  constructor(message) {\r\n    super(message);\r\n    this.name = \"SimulationError\";\r\n  }\r\n}","export default class IOManager {\r\n  constructor(simulation) {\r\n    this.simulation = simulation;\r\n    this.ports = [];\r\n    this.portHandlers = [];\r\n    this.waitingPort = null;\r\n  }\r\n\r\n  reset() {\r\n    this.ports.forEach(port => port.reset());\r\n  }\r\n\r\n  getPorts() {\r\n    return this.ports;\r\n  }\r\n\r\n  addPort(port) {\r\n    this.ports.push(port);\r\n\r\n    let answerHandler = () => {\r\n      if (!this.simulation.waitingIO) return;\r\n      if (this.waitingPort !== port) return;\r\n      this.simulation.waitingIO = false;\r\n      this.simulation.run();\r\n    };\r\n\r\n    port.on('read wait end', answerHandler);\r\n    port.on('write wait end', answerHandler);\r\n\r\n    this.portHandlers.push({answerHandler});\r\n  }\r\n\r\n  removePort(port) {\r\n    let index = this.ports.findIndex(x => x === port);\r\n    if (index < 0) return;\r\n    this.ports.splice(index, 1);\r\n    let handlers = this.portHandlers[index];\r\n    this.portHandlers.splice(index, 1);\r\n    port.off('read answer', handlers.answerHandler);\r\n    port.off('write answer', handlers.answerHandler);\r\n  }\r\n\r\n  read(index) {\r\n    if (index >= this.ports.length) throw new Error('Inexistent IO port');\r\n    let result = this.ports[index].read(this.simulation);\r\n    if (this.ports[index].waitingRead) {\r\n      this.waitingPort = this.ports[index];\r\n      this.simulation.waitingIO = true;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  write(index, value) {\r\n    if (index >= this.ports.length) throw new Error('Inexistent IO port');\r\n    let result = this.ports[index].write(this.simulation, value);\r\n    if (this.ports[index].waitingWrite) {\r\n      this.waitingPort = this.ports[index];\r\n      this.simulation.waitingIO = true;\r\n    }\r\n    return result;\r\n  }\r\n}","import { EventEmitter } from 'events';\r\nimport utils from '../../../utils';\r\nimport { SimulationError } from '../asmErrors';\r\nimport Instruction from '../instruction';\r\nimport IOManager from './io/ioManager';\r\n\r\nconst endSimulationCode = 0x0003;\r\nconst defaultBreakpointHandler = (simulation, pc) => false;\r\n\r\nexport default class Simulation extends EventEmitter {\r\n\tconstructor(architecture, memory, registerBank) {\r\n\t\tsuper();\r\n\r\n\t\tthis.architecture = architecture;\r\n\t\tthis.memory = memory;\r\n\t\tthis.registerBank = registerBank;\r\n\t\tthis.codeExecutionMaxPC = 0;\r\n\t\tthis.running = false;\r\n\t\tthis.ended = false;\r\n\t\tthis.stopping = false;\r\n\t\tthis.stepInterval = 50;\r\n\t\tthis.cycles = 0;\r\n\t\tthis.pc = 0;\r\n\t\tthis.ioManager = new IOManager(this);\r\n\t\tthis.waitingIO = false;\r\n\t\tthis.memoryRegions = this.architecture.getMemoryRegions();\r\n\r\n\t\tthis.breakpointHandler = defaultBreakpointHandler;\r\n\t\tthis.setupMemoryHandlers();\r\n\t}\r\n\r\n\treset() {\r\n\t\tif (this.running && !this.stopping) this.stop();\r\n\t\tthis.ended = false;\r\n\t\tthis.waitingIO = false;\r\n\t\tthis.carry = 0;\r\n\t\tthis.setPC(0);\r\n\t\tthis.setCycles(0);\r\n\t\tthis.registerBank.reset();\r\n\t\tthis.registerBank.setValue('sp', this.memoryRegions.stack);\r\n\t\tthis.memory.reset();\r\n\t\tthis.ioManager.reset();\r\n\t\tthis.writeObjCodeMemory();\r\n\t\tthis.emit('reset');\r\n\t}\r\n\r\n\tsetupMemoryHandlers() {\r\n\t\tlet ioAddress = this.memoryRegions.io;\r\n\r\n\t\tthis.memory.onReadWord = (address) => {\r\n\t\t\tif (address < ioAddress) return;\r\n\t\t\tlet portIndex = (address - ioAddress) / this.architecture.getByteWidth();\r\n\t\t\treturn this.ioManager.read(portIndex);\r\n\t\t};\r\n\r\n\t\tthis.memory.onWriteWord = (address, value) => {\r\n\t\t\tif (address < ioAddress) return true;\r\n\t\t\tlet portIndex = (address - ioAddress) / this.architecture.getByteWidth();\r\n\t\t\treturn this.ioManager.write(portIndex, value);\r\n\t\t};\r\n\t}\r\n\r\n\tregisterPorts(ports) {\r\n\t\tports.forEach(port => this.ioManager.addPort(port));\r\n\t}\r\n\t\r\n\tunregisterPorts(ports) {\r\n\t\tports.forEach(port => this.ioManager.removePort(port));\r\n\t}\r\n\r\n\tgetPortsSymbolTable() {\r\n\t\tlet symbolTable = {};\r\n\t\tlet ports = this.ioManager.getPorts();\r\n\t\tlet value = this.memoryRegions.io;\r\n\t\tfor (let port of ports) {\r\n\t\t\tif (port.device === null) continue;\r\n\t\t\tsymbolTable[port.device.name + '_' + port.name] = value;\r\n\t\t\tvalue += this.architecture.getByteWidth();\r\n\t\t}\r\n\t\treturn symbolTable;\r\n\t}\r\n\r\n\tgetPortsSymbolsList() {\r\n\t\tlet symbolList = [];\r\n\t\tlet ports = this.ioManager.getPorts();\r\n\t\tfor (let port of ports) {\r\n\t\t\tif (port.device === null) continue;\r\n\t\t\tsymbolList.push(port.device.name + '_' + port.name);\r\n\t\t}\r\n\t\treturn symbolList;\r\n\t}\r\n\r\n\tsetRawObjCode(rawObjCode) {\r\n\t\tif (rawObjCode.length > this.memoryRegions.io * 2) throw new SimulationError('Object code too big for the memory');\r\n\t\tthis.rawObjCode = rawObjCode;\r\n\t}\r\n\r\n\twriteObjCodeMemory() {\r\n\t\tif (!this.rawObjCode) return;\r\n\t\tlet wordArray = this.rawObjCode\r\n\t\t\t.match(/.{1,4}/g)\r\n\t\t\t.map(x => parseInt(x, 16));\r\n\t\tfor (let i = 0; i < wordArray.length; i++) {\r\n\t\t\tlet word = wordArray[i];\r\n\t\t\tthis.memory.writeWord(i * 2, word);\r\n\t\t}\r\n\r\n\t\tthis.codeExecutionMaxPC = wordArray.length * 2;\r\n\t}\r\n\r\n\tstep() {\r\n\t\tif (this.pc >= this.codeExecutionMaxPC) throw new SimulationError('PC run out of program bounds');\r\n\r\n\t\tlet code;\r\n\r\n\t\ttry {\r\n\t\t\tcode = this.memory.readWord(this.pc);\r\n\t\t} catch (exc) {\r\n\t\t\tconsole.error(exc);\r\n\t\t\tthis.emit('run error', exc);\r\n\t\t\treturn this.stop();\r\n\t\t}\r\n\r\n\t\tif (code === endSimulationCode) {\r\n\t\t\tthis.ended = true;\r\n\t\t\tthis.emit('run ended');\r\n\t\t\treturn this.stop();\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tlet instruction = Instruction.disassemble(code, this.architecture);\r\n\t\t\tinstruction.execute(this);\r\n\t\t} catch (exc) {\r\n\t\t\tconsole.error(exc);\r\n\t\t\tthis.emit('run error', exc);\r\n\t\t\treturn this.stop();\r\n\t\t}\r\n\r\n\t\tif (this.waitingIO) {\r\n\t\t\treturn this.stop();\r\n\t\t}\r\n\r\n\t\tthis.incrementPC(2);\r\n\t\tthis.incrementCycles(1);\r\n\r\n\t\tif (this.breakpointHandler(this, this.pc)) {\r\n\t\t\tthis.emit('breakpoint', this.pc);\r\n\t\t\tthis.stop();\r\n\t\t}\r\n\t}\r\n\r\n\tasync runner() {\r\n\t\tthis.emit('run started');\r\n\t\ttry {\r\n\t\t\tlet timePerBlock = 50;\r\n\t\t\tlet toExecFloat = 0;\r\n\t\t\trunLoop:\r\n\t\t\twhile (!this.stopping) {\r\n\t\t\t\tif (this.stepInterval > 0) {\r\n\t\t\t\t\ttoExecFloat += timePerBlock / this.stepInterval;\r\n\t\t\t\t\tif (toExecFloat >= 1) {\r\n\t\t\t\t\t\tlet toExec = Math.floor(toExecFloat);\r\n\t\t\t\t\t\ttoExecFloat -= toExec;\r\n\t\t\t\t\t\tlet start = Date.now();\r\n\t\t\t\t\t\tfor (let i = 0; i < toExec; i++) {\r\n\t\t\t\t\t\t\tif (this.stopping) break runLoop;\r\n\t\t\t\t\t\t\tthis.step();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tlet sleepTime = timePerBlock - (Date.now() - start);\r\n\t\t\t\t\t\tif (sleepTime > 0) await utils.sleep(sleepTime);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tawait utils.sleep(timePerBlock);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.step();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(error);\r\n\t\t\tthis.emit('run error', error);\r\n\t\t}\r\n\t\tthis.running = false;\r\n\t\tthis.stopping = false;\r\n\t}\r\n\r\n\tstop() {\r\n\t\tif (!this.running) throw new Error('Simulation already stopped');\r\n\t\tif (this.stopping) throw new Error('Simulation already stopping');\r\n\t\tthis.stopping = true;\r\n\t}\r\n\r\n\trun() {\r\n\t\tif (this.running) throw new Error('Simulation already running');\r\n\t\tif (this.stopping) throw new Error('Simulation stopping');\r\n\t\tthis.running = true;\r\n\t\tthis.stopping = false;\r\n\t\tsetTimeout(this.runner.bind(this));\r\n\t}\r\n\r\n\tisWaitingIO() {\r\n\t\treturn this.waitingIO;\r\n\t}\r\n\r\n\tisRunning() {\r\n\t\treturn this.running;\r\n\t}\r\n\r\n\tisStopping() {\r\n\t\treturn this.stopping;\r\n\t}\r\n\r\n\thasEnded() {\r\n\t\treturn this.ended;\r\n\t}\r\n\r\n\tgetRegisterBank() {\r\n\t\treturn this.registerBank;\r\n\t}\r\n\r\n\tgetMemory() {\r\n\t\treturn this.memory;\r\n\t}\r\n\r\n\tgetCarry() {\r\n\t\treturn this.carry;\r\n\t}\r\n\r\n\tsetCarry(carry) {\r\n\t\tthis.carry = carry;\r\n\t}\r\n\r\n\tsetPC(pc) {\r\n\t\tthis.pc = (pc >>> 0) & this.architecture.getMask();\r\n\t\tthis.emit('pc update', this.pc);\r\n\t}\r\n\r\n\tincrementPC(value) {\r\n\t\tthis.setPC(this.getPC() + value);\r\n\t}\r\n\r\n\tgetPC() {\r\n\t\treturn this.pc;\r\n\t}\r\n\r\n\tsetCycles(cycles) {\r\n\t\tthis.cycles = cycles;\r\n\t\tthis.emit('cycles update', this.cycles);\r\n\t}\r\n\r\n\tincrementCycles(value) {\r\n\t\tthis.cycles += value;\r\n\t\tthis.emit('cycles update', this.cycles);\r\n\t}\r\n\r\n\tgetCycles() {\r\n\t\treturn this.cycles;\r\n\t}\r\n\r\n\tgetArchitecture() {\r\n\t\treturn this.architecture;\r\n\t}\r\n\r\n\tsetBreakpointHandler(handler) {\r\n\t\tif (!handler) return this.breakpointHandler = defaultBreakpointHandler;\r\n\t\tif (typeof handler != 'function') throw new Error('handler isnt function');\r\n\t\tthis.breakpointHandler = handler;\r\n\t}\r\n\r\n\tsetStepInterval(ms) {\r\n\t\tthis.stepInterval = ms;\r\n\t}\r\n\r\n\tgetStepInterval() {\r\n\t\treturn this.stepInterval;\r\n\t}\r\n}","let pseudos = [];\r\n\r\nfunction setup() {\r\n    const pseudosMs = require.context('./', true, /pseudos\\/.+\\.js$/);\r\n    pseudos = pseudosMs.keys().map(key => pseudosMs(key, true).default);\r\n}\r\n\r\nfunction getPseudoInstructions() {\r\n    return pseudos;\r\n}\r\n\r\nconst pseudoManager = {\r\n    setup,\r\n    getPseudoInstructions,\r\n};\r\n\r\nexport default pseudoManager;","\r\nexport default class PseudoConverter {\r\n    constructor(pseudos) {\r\n        this.pseudos = pseudos;\r\n    }\r\n\r\n    convert(instruction, architecture) {\r\n        for (let pseudo of this.pseudos) {\r\n            let instructions = pseudo.getNonPseudoInstructions(instruction, architecture);\r\n            if (instructions.length > 0) {\r\n                for (let i = 0; i < instructions.length; i++) {\r\n                    let convInstruction = instructions[i];\r\n                    let convInstructions = this.convert(convInstruction, architecture);\r\n\r\n                    if (convInstructions.length > 0) {\r\n                        instructions.splice(i, 1, ...convInstructions);\r\n                    }\r\n                }\r\n                return instructions;\r\n            }\r\n        }\r\n        return [];\r\n    }\r\n}","import operationsManager from '../operations/operationsManager';\r\nimport Instruction from '../instruction';\r\nimport Operand from '../operand';\r\nimport utils from '../../../utils';\r\n\r\nexport default class InstructionParser {\r\n\r\n    constructor(architecture) {\r\n        this.architecture = architecture;\r\n    }\r\n\r\n    isInstruction(str) {\r\n        try {\r\n            let operation = this.parseOperation(str);\r\n            return operation != null;\r\n        } catch (exc) {\r\n            return false;\r\n        }\r\n    }\r\n    \r\n    parse(str) {\r\n        // parse operation & operands\r\n        let operation = this.parseOperation(str);\r\n        let operands = this.parseOperands(str);\r\n\r\n        let instruction = new Instruction(operation, operands);\r\n        return instruction;\r\n    }\r\n    \r\n\r\n    // detect if str is register\r\n    isRegisterName(str) {\r\n        return this.architecture.hasRegisterName(str);\r\n    }\r\n\r\n    // detect if str is operation\r\n    isOperationName(str) {\r\n        return operationsManager.isOperationName(str);\r\n    }\r\n\r\n    // parse operation\r\n    parseOperation(str) {\r\n        let match = str.match(/^(\\w*)[\\t ]*/);\r\n        if (!Array.isArray(match) || match.length < 2) throw new TypeError('Cant parse to operation');\r\n\r\n        let operationName = match[1];\r\n        if (!this.isOperationName(operationName)) throw new TypeError('\"' + operationName + '\" isnt operation');\r\n        \r\n        let operation = operationsManager.getOperationByName(operationName);\r\n        if (!operation) throw new Error('Operation with name \"' + operationName + '\" not found');\r\n\r\n        return operation;\r\n    }\r\n\r\n    // detect type of operand value\r\n    getInstructionOperandValueType(operandValue) {\r\n        if (typeof operandValue !== 'string') return null;\r\n        if (operandValue.length === 0) return null;\r\n\r\n        if (this.isRegisterName(operandValue)) return 'register';\r\n        if (utils.isInteger(operandValue)) return 'literal';\r\n        return 'symbol';\r\n    }\r\n    \r\n    // parse operands\r\n    parseOperands(str) {\r\n        let operands = [];\r\n\r\n        let match = str.match(/^\\w+[ \\t]+(.+)/);\r\n        if (Array.isArray(match) && match.length >= 2) {\r\n            let operandsStr = match[1];\r\n            let operandsValues = operandsStr.split(/[\\t ]*,[\\t ]*/);\r\n            for (let value of operandsValues) {\r\n                value = value.trim();\r\n                let type = this.getInstructionOperandValueType(value);\r\n                if (type === null) {\r\n                    throw new Error('Operand \"' + value + '\" cant be parsed');\r\n                }\r\n                if (type === Operand.LITERAL) {\r\n                    value = parseInt(value);\r\n                }\r\n                operands.push(new Operand(value, type));\r\n            }\r\n        }\r\n        \r\n        return operands;\r\n    }\r\n}","import { unraw } from 'unraw';\r\nimport utils from '../../../utils';\r\n\r\nexport default class DataParser {\r\n    constructor(architecture) {\r\n        this.architecture = architecture;\r\n    }\r\n\r\n    parse(str) {\r\n        let byteWidth = this.architecture.getByteWidth();\r\n        let bytes = this.parseToBytes(str, byteWidth);\r\n        let data = this.bytesToData(bytes, byteWidth);\r\n        return data;\r\n    }\r\n\r\n    parseToBytes(str, byteWidth) {\r\n        let bytes = [];\r\n        let values = extractValues(str);\r\n        for (let { type, value } of values) {\r\n            switch (type) {\r\n                case 'text':\r\n                    for (let i = 0; i < value.length; i++) {\r\n                        bytes.push(value.charCodeAt(i));\r\n                    }\r\n                    bytes.push(0);\r\n                    break;\r\n                case 'others':\r\n                    let trimmed = value.trim();\r\n                    if (trimmed.length <= 0) break;\r\n\r\n                    let splitted = trimmed.split(/(?:[?: \\t]+)|,/);\r\n                    if (splitted.some(x => !utils.isInteger(x))) throw new TypeError('Data contains a non-literal');\r\n                    bytes.push( ...splitted.reduce( (a, b) => a.concat(utils.numberToBytes(parseInt(b), byteWidth)), [] ) );\r\n                    break;\r\n                default:\r\n            }\r\n        }\r\n        return bytes;\r\n    }\r\n\r\n    bytesToData(bytes, byteWidth) {\r\n        let data = [];\r\n        for (let i = 0; i < bytes.length; i += byteWidth) {\r\n            let curBytes = new Array(byteWidth).fill(0);\r\n            for (let j = 0; j < byteWidth; j++) {\r\n                let byte = bytes[i + j];\r\n                curBytes[j] = byte ? byte : 0;\r\n            }\r\n            data.push(utils.bytesToNumber(curBytes));\r\n        }\r\n        return data;\r\n    }\r\n}\r\n\r\nfunction extractValues(str) {\r\n    let lastC;\r\n    let startIndex = 0;\r\n    let capturingQuote = false;\r\n\r\n    let values = [];\r\n    for (let i = 0; i < str.length; i++) {\r\n        let c = str[i];\r\n\r\n        if ((c === '\"' && lastC !== '\\\\')) {            \r\n            if (capturingQuote) {\r\n                if (startIndex !== i) values.push({\r\n                    type: 'text',\r\n                    value: unraw(str.substring(startIndex, i)),\r\n                });\r\n                capturingQuote = false;\r\n                startIndex = i + 1;\r\n            } else {\r\n                capturingQuote = true;\r\n                if (startIndex !== i) values.push({\r\n                    type: 'others',\r\n                    value: str.substring(startIndex, i),\r\n                });\r\n                startIndex = i + 1;\r\n            }\r\n        }\r\n        lastC = c;\r\n    }\r\n    if (startIndex !== str.length) values.push({\r\n        type: 'others',\r\n        value: str.substring(startIndex, str.length),\r\n    });\r\n    return values;\r\n}","export default class CommentParser {\r\n    parse(str) {\r\n        let result = {\r\n            hasComment: false,\r\n            comment: null,\r\n            rest: null,\r\n        };\r\n        let index = str\r\n            .replace(/\".+\"/g, '') // Ignore strings content\r\n            .indexOf('//');\r\n        if (index >= 0) {\r\n            result.hasComment = true;\r\n            result.comment = str.substring(index+2);\r\n            result.rest = str.substring(0, index);\r\n        } else {\r\n            result.rest = str;\r\n        }\r\n        return result;\r\n    }\r\n};","export default class LineParser {\r\n\r\n    constructor(instructionParser, dataParser, commentParser) {\r\n        this.instructionParser = instructionParser;\r\n        this.dataParser = dataParser;\r\n        this.commentParser = commentParser;\r\n    }\r\n\r\n    getSymbolAndRest(str) {\r\n        let symbol;\r\n        let rest;\r\n\r\n        let match = str.match(/^(\\w*)[\\t ]*(.*)/);\r\n        if (Array.isArray(match) && match.length >= 3) {\r\n            if (this.instructionParser.isOperationName(match[1])) {\r\n                symbol = null;\r\n                rest = match[1] + ' ' + match[2];\r\n            } else {\r\n                symbol = match[1];\r\n                rest = match[2];\r\n                if (symbol.length === 0) symbol = null;\r\n            }\r\n        } else {\r\n            throw new Error('Cant parse line to symbol and rest');\r\n        }\r\n        \r\n        return { symbol, rest };\r\n    }\r\n\r\n    parse(line) {\r\n        // Extract symbols\r\n        let result = this.getSymbolAndRest(line);\r\n        let { symbol } = result;\r\n        let sanitizedRest = result.rest.trim();\r\n\r\n        // Extract comments\r\n        result = this.commentParser.parse(sanitizedRest);\r\n        let { hasComment, comment } = result;\r\n        sanitizedRest = result.rest.trim();\r\n        \r\n        // Extract instructions / data\r\n        let instruction = null;\r\n        let data = null;\r\n        if (sanitizedRest.length > 0) {\r\n            if (this.instructionParser.isInstruction(sanitizedRest)) {\r\n                instruction = this.instructionParser.parse(sanitizedRest);\r\n            } else {\r\n                data = this.dataParser.parse(sanitizedRest);\r\n            }\r\n        }\r\n\r\n        return { hasComment, comment, symbol, instruction, data };\r\n    }\r\n}","import Operand from '../operand';\r\nimport InstructionParser from './instructionParser';\r\nimport DataParser from './dataParser';\r\nimport CommentParser from './commentParser';\r\nimport LineParser from './lineParser';\r\nimport utils from '../../../utils';\r\n\r\nclass Assembler {\r\n    constructor(architecture, programData, pseudoConverter) {\r\n        this.architecture = architecture;\r\n        this.programData = programData;\r\n        this.pseudoConverter = pseudoConverter;\r\n        this.extraSymbolTable = {};\r\n        \r\n        this.lines = this.programData.split('\\n');\r\n        \r\n        this.sequence = [];\r\n        this.symbolTable = {};\r\n        this.objectCodeArray = [];\r\n        this.instructions = [];\r\n        this.additionalInfos = [];\r\n    }\r\n\r\n    assemble() {\r\n        this.pass1();\r\n        this.pass2();\r\n        this.pass3();\r\n        \r\n        return {\r\n            rawObjectCode: this.rawObjectCode,\r\n            objectCodeArray: this.objectCodeArray,\r\n            symbolTable: this.symbolTable,\r\n            instructions: this.instructions,\r\n            additionalInfos: this.additionalInfos,\r\n        };\r\n    }\r\n\r\n    addExtraSymbolTable(symbolTable) {\r\n        Object.assign(this.extraSymbolTable, symbolTable);\r\n    }\r\n\r\n    // Process instructions, pseudo-instructions, symbols.\r\n    // Doesnt substitute symbols in instructions.\r\n    pass1() {\r\n        let pc = 0;\r\n\r\n        let instructionParser = new InstructionParser(this.architecture);\r\n        let dataParser = new DataParser(this.architecture);\r\n        let commentParser = new CommentParser();\r\n        let lineParser = new LineParser(instructionParser, dataParser, commentParser);\r\n\r\n        for (let i = 0; i < this.lines.length; i++) {\r\n            let line = this.lines[i];\r\n            let additionalInfo = { lineIndex: i, lineNumber: i+1, line, pc };\r\n            this.additionalInfos.push(additionalInfo);\r\n\r\n            let parsed;\r\n            try {\r\n                parsed = lineParser.parse(line);\r\n            } catch (exc) {\r\n                console.error(exc);\r\n                throw new Error('Cant parse line ' + (i+1) + ' \"' + line.trim() + '\": ' + exc.message);\r\n            }\r\n            let { symbol, instruction, data } = parsed;\r\n            additionalInfo.parsed = parsed;\r\n\r\n            if (symbol) {\r\n                this.symbolTable[symbol] = pc;\r\n            }\r\n            if (data) {\r\n                this.sequence.push(...data);\r\n                pc += 2 * data.length;\r\n            }\r\n            if (instruction) {\r\n                // process pseudo instructions\r\n                if (instruction.isPseudo()) {\r\n                    let convInstructions = this.pseudoConverter.convert(instruction, this.architecture);\r\n                    if (convInstructions != null && convInstructions.length > 0) {\r\n                        this.instructions.push(...convInstructions);\r\n                        this.sequence.push(...convInstructions);\r\n                        pc += 2 * convInstructions.length;\r\n                    } else {\r\n                        throw new Error('The pseudo instruction on line ' + (i+1) + ' \"' + line.trim() + '\" doesnt exist');\r\n                    }\r\n                } else {\r\n                    this.instructions.push(instruction);\r\n                    this.sequence.push(instruction);\r\n                    pc += 2;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Substitute symbols with their values\r\n    pass2() {\r\n        for (let instruction of this.instructions) {\r\n            let operands = instruction.getOperands();\r\n            for (let operand of operands) {\r\n                if (operand.getType() === Operand.SYMBOL) {\r\n                    let symbolValue = this.symbolTable[operand.getValue()];\r\n                    if (symbolValue == null) symbolValue = this.extraSymbolTable[operand.getValue()];\r\n                    if (symbolValue == null) throw new Error('The symbol \"' + operand.getValue() + '\" doesnt exist');\r\n                    let finalValue = 0;\r\n                    for (let i = operand.getByteRange().min; i <= operand.getByteRange().max; i++) {\r\n                        finalValue <<= 2;\r\n                        finalValue |= (symbolValue >> (this.architecture.getBitWidth() - (8 * (i + 1)))) & 0xFF;\r\n                    }\r\n                    operand.setType(Operand.LITERAL);\r\n                    operand.setValue(finalValue);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Assemble object code\r\n    pass3() {\r\n        // Assemble\r\n        for (let item of this.sequence) {     \r\n            if (Number.isInteger(item)) {\r\n                this.objectCodeArray.push(item);\r\n            } else {\r\n                this.objectCodeArray.push(item.assemble(this.architecture));\r\n            }\r\n        }\r\n        \r\n        this.rawObjectCode = this.objectCodeArray\r\n            .map(x => utils.signedNumberToHex(x, 2))\r\n            .join('');\r\n    }\r\n};\r\n\r\nexport default Assembler;","import Instruction from '../instruction';\r\n\r\nclass Disassembler {\r\n    constructor(architecture) {\r\n        this.architecture = architecture;\r\n    }\r\n\r\n    disassemble(rawHex) {\r\n        if (rawHex.length === 0) return [];\r\n\r\n        let result = [];\r\n        let arrayLiteral = rawHex\r\n            .match(/.{1,4}/g)\r\n            .map(x => parseInt(x, 16));\r\n        \r\n        let pc = 0;\r\n        for (let code of arrayLiteral) {\r\n            let instruction;\r\n            try {\r\n                instruction = Instruction.disassemble(code, this.architecture);\r\n            } catch (exc) { }\r\n\r\n            let value = instruction ? instruction.toString() : '????';\r\n\r\n            result.push({\r\n                instruction,\r\n                value,\r\n                pc,\r\n                code,\r\n            });\r\n\r\n            pc += 2;\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\nexport default Disassembler;","import Instruction from './instruction';\r\n\r\nimport architectureManager from './architectureManager';\r\nimport operationsManager from './operations/operationsManager';\r\nimport pseudoManager from './pseudoInstructionConversions/pseudoManager';\r\nimport pseudoConverter from './pseudoInstructionConversions/pseudoConverter';\r\n\r\nimport assembler from './assembler/assembler';\r\nimport disassembler from './disassembler/disassembler';\r\n\r\nimport memory from './simulator/memory';\r\nimport memoryStorage16 from './simulator/memoryStorage16';\r\nimport registerBank from './simulator/registerBank';\r\n\r\nimport simulation from './simulator/simulation';\r\n\r\narchitectureManager.setup();\r\noperationsManager.setup();\r\npseudoManager.setup();\r\n\r\nconst asm = {\r\n    Instruction,\r\n    architectureManager,\r\n    operationsManager,\r\n    pseudoManager,\r\n    pseudoConverter,\r\n    assembler,\r\n    disassembler,\r\n    memory,\r\n    memoryStorage16,\r\n    registerBank,\r\n    simulation,\r\n};\r\n\r\nexport default asm;","var _g;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgAssembleIcon(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: \"900.000000pt\",\n    height: \"900.000000pt\",\n    viewBox: \"0 0 900.000000 900.000000\",\n    preserveAspectRatio: \"xMidYMid meet\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    transform: \"translate(0.000000,900.000000) scale(0.100000,-0.100000)\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M4200 8359 c-824 -72 -1550 -366 -2177 -883 -59 -49 -180 -162 -268 -250 -619 -622 -995 -1403 -1101 -2291 -14 -112 -18 -223 -18 -435 0 -308 13 -468 60 -715 185 -965 709 -1805 1492 -2390 1009 -753 2342 -966 3542 -565 1330 444 2320 1583 2574 2960 38 207 56 385 63 610 27 938 -288 1847 -892 2577 -114 139 -359 384 -498 498 -590 488 -1267 777 -2042 871 -155 18 -586 26 -735 13z m2535 -1278 c22 -10 54 -34 71 -52 23 -25 265 -406 328 -516 15 -26 23 -106 15 -148 -17 -91 -46 -117 -310 -281 -134 -84 -258 -159 -275 -168 -87 -43 -199 -24 -265 47 -37 39 -280 422 -330 519 -44 86 -25 200 44 268 32 30 475 311 532 336 44 20 143 17 190 -5z m-1186 -212 c40 -22 79 -69 100 -119 15 -34 149 -531 157 -578 12 -73 -26 -157 -96 -213 -28 -23 -93 -45 -329 -109 -161 -44 -312 -80 -335 -80 -80 0 -179 66 -208 139 -6 14 -43 148 -84 296 -78 285 -87 345 -59 413 40 94 75 112 402 203 322 89 371 94 452 48z m-1330 -245 c64 -32 106 -87 121 -157 16 -82 40 -589 29 -638 -18 -81 -62 -134 -134 -165 -42 -18 -373 -43 -585 -43 -117 -1 -165 14 -215 65 -58 61 -63 85 -81 422 -16 297 -16 314 1 358 23 60 65 107 119 134 37 17 78 22 277 34 374 21 406 21 468 -10z m-1325 -88 c66 -20 110 -57 140 -118 l26 -52 0 -320 c0 -301 -2 -324 -21 -366 -27 -60 -54 -88 -114 -116 -49 -23 -55 -24 -371 -24 l-320 0 -52 26 c-63 31 -107 88 -122 158 -8 34 -11 153 -8 351 3 270 5 304 22 335 36 69 92 114 161 131 17 4 161 7 321 8 224 1 302 -2 338 -13z m3649 -950 c142 -53 271 -103 287 -111 73 -38 127 -143 118 -228 -5 -38 -182 -537 -214 -598 -36 -72 -142 -126 -227 -117 -39 5 -538 182 -597 213 -39 20 -96 87 -110 130 -22 68 -7 136 94 407 52 141 102 271 111 287 21 41 62 79 110 102 73 36 137 23 428 -85z m-1233 -17 c61 -14 114 -51 146 -100 25 -40 71 -245 129 -577 25 -143 -12 -235 -117 -285 -62 -30 -561 -130 -645 -129 -93 1 -182 67 -212 157 -19 57 -112 558 -113 606 0 60 8 83 43 136 46 66 98 85 399 142 146 28 274 52 285 54 32 7 38 7 85 -4z m-1174 -147 c21 -11 51 -33 66 -49 53 -56 59 -87 81 -419 20 -300 20 -313 3 -358 -31 -81 -90 -133 -171 -150 -44 -9 -467 -36 -564 -36 -98 0 -151 20 -200 76 -47 53 -58 114 -77 429 -20 343 -18 355 56 427 27 26 66 52 87 58 45 14 544 50 624 45 30 -1 73 -12 95 -23z m-1242 -56 c66 -20 110 -57 140 -118 l26 -52 0 -320 c0 -301 -2 -324 -21 -366 -27 -60 -54 -88 -114 -116 -49 -23 -55 -24 -371 -24 l-320 0 -52 26 c-63 31 -107 88 -122 158 -8 34 -11 153 -8 351 3 270 5 304 22 335 36 69 92 114 161 131 17 4 161 7 321 8 224 1 302 -2 338 -13z m3289 -1096 c319 -33 338 -38 400 -111 62 -71 63 -100 28 -442 -19 -180 -37 -313 -47 -337 -21 -53 -92 -114 -150 -130 -41 -12 -84 -10 -356 18 -334 35 -353 39 -415 104 -42 43 -63 96 -63 155 0 26 13 173 29 326 24 225 33 286 51 322 35 72 118 124 201 125 19 0 165 -13 322 -30z m-1053 -4 c138 -4 184 -20 239 -82 62 -71 65 -92 54 -447 -8 -291 -10 -315 -30 -353 -25 -48 -72 -90 -123 -112 -50 -21 -657 -12 -711 11 -55 23 -104 72 -129 129 -22 51 -22 56 -16 348 4 162 12 316 17 342 12 51 64 120 110 143 61 32 147 35 589 21z m-2236 -50 c66 -20 110 -57 140 -118 l26 -52 0 -320 c0 -301 -2 -324 -21 -366 -27 -60 -54 -88 -114 -116 -49 -23 -55 -24 -371 -24 l-320 0 -52 26 c-63 31 -107 88 -122 158 -8 34 -11 153 -8 351 3 270 5 304 22 335 36 69 92 114 161 131 17 4 161 7 321 8 224 1 302 -2 338 -13z m1170 0 c66 -20 110 -57 140 -118 l26 -52 0 -320 c0 -301 -2 -324 -21 -366 -27 -60 -54 -88 -114 -116 -49 -23 -55 -24 -371 -24 l-320 0 -52 26 c-63 31 -107 88 -122 158 -8 34 -11 153 -8 351 3 270 5 304 22 335 36 69 92 114 161 131 17 4 161 7 321 8 224 1 302 -2 338 -13z m-1178 -1159 c68 -18 118 -58 149 -120 l25 -51 0 -314 c0 -210 -4 -328 -12 -353 -15 -52 -73 -117 -122 -140 -37 -17 -72 -19 -366 -19 -323 0 -325 0 -377 24 -63 30 -107 87 -123 159 -8 35 -10 153 -8 352 3 270 5 304 22 335 36 69 92 114 161 131 56 13 596 10 651 -4z m1170 0 c68 -18 118 -58 149 -120 l25 -51 0 -314 c0 -210 -4 -328 -12 -353 -15 -52 -73 -117 -122 -140 -37 -17 -72 -19 -366 -19 -323 0 -325 0 -377 24 -63 30 -107 87 -123 159 -8 35 -10 153 -8 352 3 270 5 304 22 335 36 69 92 114 161 131 56 13 596 10 651 -4z m1199 -10 c54 -24 93 -63 119 -117 20 -42 21 -64 24 -332 2 -170 -1 -309 -7 -342 -14 -78 -58 -137 -123 -170 l-52 -26 -325 0 c-363 0 -372 2 -438 70 -62 64 -64 79 -61 450 l3 335 27 41 c15 23 41 52 59 65 62 44 103 48 429 46 269 -2 310 -4 345 -20z m1150 0 c54 -24 93 -63 119 -117 20 -42 21 -64 24 -332 2 -170 -1 -309 -7 -342 -14 -78 -58 -137 -123 -170 l-52 -26 -325 0 c-363 0 -372 2 -438 70 -62 64 -64 79 -61 450 l3 335 27 41 c15 23 41 52 59 65 62 44 103 48 429 46 269 -2 310 -4 345 -20z\"\n  }))));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgAssembleIcon);\nexport default __webpack_public_path__ + \"static/media/AssembleIcon.317ec53f.svg\";\nexport { ForwardRef as ReactComponent };","import Editor from '@monaco-editor/react';\r\nimport { Component, createRef } from 'react';\r\nimport operationsManager from '../../business/asm/operations/operationsManager';\r\nimport styles from './Program.module.css'\r\n\r\nlet alreadyCreatedLang = false;\r\n\r\nclass Program extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    if (props.curArchitecture == null) throw new Error('props.curArchitecture null');\r\n\r\n    this.infosRef = createRef();\r\n\r\n    this.onChange = typeof props.onChange === 'function' ? props.onChange : ()=>{};\r\n    this.onLoadSavedRequest = typeof props.onLoadSavedRequest === 'function' ? props.onLoadSavedRequest : ()=>{};\r\n    this.onLoadDefaultRequest = typeof props.onLoadDefaultRequest === 'function' ? props.onLoadDefaultRequest : ()=>{};\r\n    this.onSaveRequest = typeof props.onSaveRequest === 'function' ? props.onSaveRequest : ()=>{};\r\n\r\n    this.portsSymbols = props.portsSymbols || [];\r\n    this.opsNames = operationsManager.getOperationNames();\r\n    this.regNames = props.curArchitecture.getRegisterNames();\r\n\r\n    this.state = {  }\r\n  }\r\n\r\n  onEditorWillMount(monaco) {\r\n    this.monaco = monaco;\r\n\r\n    if (alreadyCreatedLang) return;\r\n    alreadyCreatedLang = true;\r\n\r\n    monaco.languages.register({ id: 'vikingAsm' });\r\n        \r\n    monaco.languages.setMonarchTokensProvider('vikingAsm', {\r\n\r\n      operationKeywords: this.opsNames,\r\n      registerKeywords: this.regNames,\r\n      portsSymbols: this.portsSymbols,\r\n\r\n      decimalNumbers: /\\d+/,\r\n      hexNumbers: /(?:0x|0B)[\\da-fA-F]+/,\r\n      \r\n      escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\r\n\r\n      tokenizer: {\r\n        root: [\r\n          [ /\\b@hexNumbers|@decimalNumbers\\b/i, 'number' ],\r\n          [\r\n            /\\b\\w+\\b/,\r\n            {\r\n              cases: {\r\n                '@operationKeywords': 'operationKeywords',\r\n                '@registerKeywords': 'registersKeyWords',\r\n                '@portsSymbols': 'portsKeyWords',\r\n                '@default': 'symbols',\r\n              },\r\n            },\r\n          ],\r\n\r\n          [/\\/\\/.*$/,    'comment'],\r\n\r\n          // strings\r\n          [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid' ],  // non-teminated string\r\n          [/\"/, { token: 'string.quote', bracket: '@open', next: '@string' } ],\r\n        ],\r\n        string: [\r\n          [/[^\\\\\"]+/,  'string'],\r\n          [/@escapes/, 'string.escape'],\r\n          [/\\\\./,      'string.escape.invalid'],\r\n          [/\"/,        { token: 'string.quote', bracket: '@close', next: '@pop' } ]\r\n        ],\r\n      },\r\n    });\r\n\r\n    monaco.languages.registerCompletionItemProvider('vikingAsm', {\r\n      provideCompletionItems: () => {\r\n        let suggestions = this.opsNames.map(opName => ({\r\n          label: opName,\r\n          detail: '...',\r\n          documentation: '...',\r\n          kind: monaco.languages.CompletionItemKind.Function,\r\n          insertText: opName,\r\n        })).concat(this.portsSymbols.map(portSymbol => ({\r\n          label: portSymbol,\r\n          detail: '...',\r\n          documentation: '...',\r\n          kind: monaco.languages.CompletionItemKind.Function,\r\n          insertText: portSymbol,\r\n        })));\r\n        return { suggestions };\r\n      }\r\n    });\r\n    \r\n    monaco.editor.defineTheme('vikinAsmTheme', {\r\n      base: 'vs-dark',\r\n      inherit: true,\r\n      rules: [\r\n        { token: 'operationKeywords', foreground: 'e55283' },\r\n        { token: 'registersKeyWords', foreground: 'ffc100' },\r\n        { token: 'portsKeyWords', foreground: '40f0e3' },\r\n        { token: 'symbols', foreground: '92db57' },\r\n        { token: 'number', foreground: '7d81ea' }\r\n      ],\r\n      colors: {\r\n        \"editor.background\": '#00000000'\r\n      },\r\n    });\r\n  }\r\n\r\n  onEditorMount(editor, monaco) {\r\n    this.editor = editor;\r\n    \r\n    this.editor.getModel().onDidChangeContent(this.onChange);\r\n    this.onChange();\r\n    \r\n    if (this.initText) {\r\n      this.editor.setValue(this.initText);\r\n    }\r\n\r\n    this.saveBindHandler = this.editor.addCommand(monaco.KeyMod.CtrlCmd | monaco.KeyCode.KEY_S, this.save.bind(this));\r\n  }\r\n\r\n  getText() {\r\n    if (this.editor == null) return '';\r\n    return this.editor.getValue();\r\n  }\r\n\r\n  setText(text) {\r\n    this.initText = text;\r\n    if (this.editor == null) return;\r\n    let fullRange = this.editor.getModel().getFullModelRange();\r\n    this.editor.executeEdits(null, [{ text: '', range: fullRange }]);\r\n    this.editor.executeEdits(null, [{ text, range: fullRange }]);\r\n  }\r\n\r\n  setInfos(infos) {\r\n    this.infosRef.current.textContent = infos;\r\n    setTimeout(() => this.infosRef.current.textContent = '', 3000);\r\n  }\r\n\r\n  highlightLine(lineNumber) {\r\n    let lineCount = this.editor.getModel().getLineCount();\r\n    if (lineNumber <= 0 || lineNumber > lineCount) return;\r\n    let lineDec = [\r\n      {\r\n        range: new this.monaco.Range(lineNumber, 1, lineNumber, 1),\r\n        options: {\r\n          isWholeLine: true,\r\n          className: styles.curLineHighlight,\r\n        }\r\n      }\r\n    ];\r\n    this.editor.revealLine(lineNumber);\r\n    let decId = this.editor.deltaDecorations([], lineDec);\r\n    setTimeout(() => this.editor.deltaDecorations(decId, []), 500);\r\n  }\r\n\r\n  save() {\r\n    let code = this.editor.getValue();\r\n    if (this.onSaveRequest(code) === true) {\r\n      this.setInfos('Saved');\r\n    } else {\r\n      console.error('Save error');\r\n    }\r\n  }\r\n\r\n  loadSaved() {\r\n    this.onLoadSavedRequest();\r\n  }\r\n\r\n  loadDefault() {\r\n    this.onLoadDefaultRequest();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={styles.container}>\r\n        <div className={styles.titleContainer}>\r\n          <div>Program</div>\r\n          <div className={styles.infos} ref={this.infosRef}></div>\r\n          <div>\r\n            <button className={styles.btn} onClick={this.save.bind(this)}>Save</button>\r\n            <button className={styles.btn} onClick={this.loadSaved.bind(this)}>Load</button>\r\n            <button className={styles.btn} onClick={this.loadDefault.bind(this)}>Load Example</button>\r\n          </div>\r\n        </div>\r\n        <Editor\r\n          className={styles.editor}          \r\n          language='vikingAsm'\r\n          theme='vikinAsmTheme'\r\n          beforeMount={this.onEditorWillMount.bind(this)}\r\n          onMount={this.onEditorMount.bind(this)}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n \r\nexport default Program;","import { Component } from 'react';\r\nimport utils from '../../utils';\r\nimport styles from './SymbolTable.module.css'\r\n\r\nclass SymbolTable extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    if (!props.architecture) throw new Error('props.architecture null');\r\n    this.architecture = props.architecture;\r\n\r\n    this.onSymbolNameClick = typeof props.onSymbolNameClick === 'function' ? props.onSymbolNameClick : ()=>{};\r\n    this.onSymbolValueClick = typeof props.onSymbolValueClick === 'function' ? props.onSymbolValueClick : ()=>{};\r\n\r\n    this.state = {\r\n      symbols: [],\r\n    }\r\n  }\r\n\r\n  setSymbolTable(symbolTable) {\r\n    let symbols = Object.entries(symbolTable).map(([symbolName, symbolValue]) => ({ symbolName, symbolValue }));\r\n    this.setState({ symbols });\r\n  }\r\n\r\n  render() { \r\n    return (\r\n      <div className={styles.container}>\r\n        <div className={styles.title}>Symbol Table</div>\r\n        <div className={styles.content}>\r\n          <table border=\"1\" frame=\"void\" rules=\"rows\">\r\n            <tbody>\r\n              {\r\n                this.state.symbols.map((symbol, id) => (\r\n                  <tr key={id}>\r\n                    <td className={styles.symbolName} onClick={()=>this.onSymbolNameClick(symbol)}>{symbol.symbolName}</td>\r\n                    <td className={styles.symbolValue} onClick={()=>this.onSymbolValueClick(symbol)}>{'0x'+utils.signedNumberToHex(symbol.symbolValue, this.architecture.getByteWidth())}</td>\r\n                  </tr>\r\n                ))\r\n              }\r\n              {\r\n                (this.state.symbols && this.state.symbols.length > 0) ? <tr className={styles.fillAllSpace}></tr> : <tr/>\r\n              }\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n \r\nexport default SymbolTable;","var _g;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgResetIcon(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: \"900.000000pt\",\n    height: \"900.000000pt\",\n    viewBox: \"0 0 900.000000 900.000000\",\n    preserveAspectRatio: \"xMidYMid meet\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    transform: \"translate(0.000000,900.000000) scale(0.100000,-0.100000)\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M4279 8370 c-958 -59 -1836 -456 -2514 -1135 -628 -628 -1004 -1406 -1111 -2300 -25 -210 -25 -660 0 -870 129 -1080 673 -2027 1534 -2670 1009 -753 2342 -966 3542 -565 801 267 1505 803 1979 1505 360 532 577 1128 647 1777 35 322 18 749 -42 1076 -144 791 -509 1487 -1074 2052 -565 565 -1261 930 -2052 1074 -273 50 -638 73 -909 56z m904 -2223 l-668 -667 -3 498 -2 498 -73 -3 c-653 -27 -1238 -359 -1600 -908 -150 -228 -259 -518 -302 -805 -19 -125 -22 -395 -5 -525 25 -200 87 -413 174 -600 l44 -93 -245 -243 c-234 -234 -245 -243 -259 -224 -34 45 -128 220 -175 326 -97 219 -167 461 -206 716 -24 157 -24 576 0 733 92 590 331 1077 731 1489 478 491 1103 774 1784 808 l132 6 0 501 0 501 670 -670 670 -670 -667 -668z m1653 -361 c158 -272 266 -591 321 -946 25 -161 25 -556 0 -725 -74 -499 -285 -977 -595 -1345 -97 -115 -278 -293 -387 -380 -173 -137 -427 -287 -635 -375 -268 -114 -593 -187 -897 -202 l-133 -6 -2 -499 -3 -498 -668 667 -667 668 670 670 670 670 0 -500 0 -500 122 7 c68 3 154 11 192 18 640 105 1195 516 1476 1095 139 284 201 556 201 875 0 308 -63 584 -200 875 l-29 60 242 243 c132 133 245 241 250 239 5 -2 38 -52 72 -111z\"\n  }))));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgResetIcon);\nexport default __webpack_public_path__ + \"static/media/ResetIcon.185470da.svg\";\nexport { ForwardRef as ReactComponent };","var _g;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgStepIcon(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: \"900.000000pt\",\n    height: \"900.000000pt\",\n    viewBox: \"0 0 900.000000 900.000000\",\n    preserveAspectRatio: \"xMidYMid meet\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    transform: \"translate(0.000000,900.000000) scale(0.100000,-0.100000)\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M4279 8370 c-958 -59 -1836 -456 -2514 -1135 -628 -628 -1004 -1406 -1111 -2300 -25 -210 -25 -660 0 -870 129 -1080 673 -2027 1534 -2670 1009 -753 2342 -966 3542 -565 801 267 1505 803 1979 1505 360 532 577 1128 647 1777 35 322 18 749 -42 1076 -144 791 -509 1487 -1074 2052 -565 565 -1261 930 -2052 1074 -273 50 -638 73 -909 56z m663 -3122 l3 -2273 1043 1040 1043 1039 267 -267 267 -267 -1503 -1503 -1502 -1502 -1502 1502 -1503 1503 270 270 270 270 1042 -1042 1043 -1043 0 2273 0 2272 380 0 380 0 2 -2272z\"\n  }))));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgStepIcon);\nexport default __webpack_public_path__ + \"static/media/StepIcon.4e668f1b.svg\";\nexport { ForwardRef as ReactComponent };","import { Component } from 'react';\r\nimport styles from './Control.module.css';\r\nimport PauseCircleFilledIcon from '@material-ui/icons/PauseCircleFilled';\r\nimport PlayCircleFilledIcon from '@material-ui/icons/PlayCircleFilled';\r\nimport { ReactComponent as AssembleIcon } from '../../assets/images/AssembleIcon.svg';\r\nimport { ReactComponent as ResetIcon } from '../../assets/images/ResetIcon.svg';\r\nimport { ReactComponent as StepIcon } from '../../assets/images/StepIcon.svg';\r\n\r\nclass Control extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.onAutoAssembleChanged = typeof props.onAutoAssembleChanged === 'function' ? props.onAutoAssembleChanged : ()=>{};\r\n    this.onStepIntervalChanged = typeof props.onStepIntervalChanged === 'function' ? props.onStepIntervalChanged : ()=>{};\r\n    this.onAssemble = typeof props.onAssemble === 'function' ? props.onAssemble : ()=>{};\r\n    this.onRun = typeof props.onRun === 'function' ? props.onRun : ()=>{};\r\n    this.onPause = typeof props.onPause === 'function' ? props.onPause : ()=>{};\r\n    this.onStep = typeof props.onStep === 'function' ? props.onStep : ()=>{};\r\n    this.onReset = typeof props.onReset === 'function' ? props.onReset : ()=>{};\r\n\r\n    this.cycles = 0;\r\n    this.stepInterval = 50;\r\n    this.autoAssemble = true;\r\n\r\n    this.state = {  }\r\n  }\r\n\r\n  setCycles(cycles) {\r\n    this.cycles = cycles;\r\n    this.setState({});\r\n  }\r\n\r\n  stepIntervalChanged(e) {\r\n    let value = parseInt(e.target.value);\r\n    if (isNaN(value)) value = 0;\r\n    if (value > 1000) value = 1000;\r\n    this.stepInterval = value;\r\n    this.onStepIntervalChanged(this.stepInterval);\r\n    this.setState({});\r\n  }\r\n\r\n  autoAssembleChanged(e) {\r\n    this.autoAssemble = e.target.checked;\r\n    this.onAutoAssembleChanged(this.autoAssemble);\r\n    this.setState({});\r\n  }\r\n\r\n  assembleClick() {\r\n    this.onAssemble();\r\n  }\r\n  \r\n  resetClick() {\r\n    this.onReset();\r\n  }\r\n  \r\n  stopClick() {\r\n    this.onPause();\r\n  }\r\n  \r\n  runClick() {\r\n    this.onRun();\r\n  }\r\n  \r\n  stepClick() {\r\n    this.onStep();\r\n  }\r\n\r\n  getAutoAssemble() {\r\n    return this.autoAssemble;\r\n  }\r\n\r\n  render() { \r\n    return (\r\n      <div className={`unselectable ${styles.container}`}>\r\n        <div className={styles.title}>Control</div>\r\n\r\n        <div className={styles.content}>\r\n          <div className={styles.cycleArea}>\r\n            <div className={styles.cycleLabel}>Cycle:</div>\r\n            <div>{this.cycles}</div>\r\n          </div>\r\n          \r\n          <div>\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={this.autoAssemble}\r\n              onChange={this.autoAssembleChanged.bind(this)}\r\n            /><span style={{margin: '0px 0px 0px 5px'}}>Auto-assemble</span>\r\n          </div>\r\n\r\n          <div className={styles.btnList}>\r\n            <div className={styles.btn} onClick={this.assembleClick.bind(this)}>\r\n              <div className={styles.btnLaterals}></div>\r\n              <AssembleIcon className=\"MuiSvgIcon-root\" />\r\n              <div>Assemble</div>\r\n              <div className={styles.btnLaterals}></div>\r\n            </div>\r\n            <div className={styles.btn} onClick={this.runClick.bind(this)}>\r\n              <div className={styles.btnLaterals}></div>\r\n              <PlayCircleFilledIcon />\r\n              <div>Run</div>\r\n              <div className={styles.btnLaterals}></div>\r\n            </div>\r\n            <div className={styles.btn} onClick={this.stopClick.bind(this)}>\r\n              <div className={styles.btnLaterals}></div>\r\n              <PauseCircleFilledIcon />\r\n              <div>Pause</div>\r\n              <div className={styles.btnLaterals}></div>\r\n            </div>\r\n            <div className={styles.btn} onClick={this.stepClick.bind(this)}>\r\n              <div className={styles.btnLaterals}></div>\r\n              <StepIcon className=\"MuiSvgIcon-root\" />\r\n              <div>Step</div>\r\n              <div className={styles.btnLaterals}></div>\r\n            </div>\r\n            <div className={styles.btn} onClick={this.resetClick.bind(this)}>\r\n              <div className={styles.btnLaterals}></div>\r\n              <ResetIcon className=\"MuiSvgIcon-root\" />\r\n              <div>Reset</div>\r\n              <div className={styles.btnLaterals}></div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className={styles.delayLabel}>Delay (ms):</div>\r\n          <input\r\n            className={styles.delayInput}\r\n            type='number'\r\n            value={this.stepInterval}\r\n            onChange={this.stepIntervalChanged.bind(this)}\r\n            onKeyUp={this.stepIntervalChanged.bind(this)}\r\n            min=\"0\"\r\n            max=\"1000\" />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n \r\nexport default Control;","import { Component } from \"react\";\r\nimport Editor from \"@monaco-editor/react\";\r\nimport styles from './Assembled.module.css';\r\n\r\nconst GUTTER_GLYPH_MARGIN = 2;\r\n\r\nclass Assembled extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    \r\n    this.breakpointDecorations = {};\r\n    this.pcBreakpoints = new Set();\r\n    this.curLineRunningDecorationId = null;\r\n    this.curLineRunningDecoration = null;\r\n    this.monaco = null;\r\n    this.editor = null;\r\n\r\n    this.state = {  };\r\n  }\r\n\r\n  hasBreakpoint(pc) {\r\n    return this.pcBreakpoints.has(pc);\r\n  }\r\n\r\n  toggleBreakpoint(pc) {\r\n    if (this.pcBreakpoints.has(pc)) {\r\n      this.removeBreakpoint(pc);\r\n    } else {\r\n      this.setBreakpoint(pc);\r\n    }\r\n  }\r\n  \r\n  setBreakpoint(pc) {\r\n    if (this.editor == null) return;\r\n    if (this.pcBreakpoints.has(pc)) return;\r\n\r\n    let lineNumber = pc / 2 + 1;    \r\n    let lineCount = this.editor.getModel().getLineCount();\r\n    if (lineNumber <= 0 || lineNumber > lineCount) return;\r\n\r\n    this.pcBreakpoints.add(pc);\r\n    let bpDec = this.editor.deltaDecorations([], [\r\n      {\r\n        range: new this.monaco.Range(lineNumber, 1, lineNumber, 1),\r\n        options: {\r\n          isWholeLine: false,\r\n          glyphMarginClassName: styles.breakpoint,\r\n        },\r\n      },\r\n    ]);\r\n    this.breakpointDecorations[pc] = bpDec;\r\n  }\r\n\r\n  removeBreakpoint(pc) {\r\n    if (this.editor == null) return;\r\n    if (!this.pcBreakpoints.has(pc)) return;\r\n\r\n    this.pcBreakpoints.delete(pc);\r\n    let bpDec = this.breakpointDecorations[pc];\r\n    delete this.breakpointDecorations[pc];\r\n    this.editor.deltaDecorations(bpDec, []);\r\n  }\r\n\r\n  removeAllBreakpoints() {\r\n    for (let pc of this.pcBreakpoints) this.removeBreakpoint(pc);\r\n  }\r\n\r\n  setBreakpoints(pcs) {\r\n    this.removeAllBreakpoints();\r\n    for (let pc of pcs) this.setBreakpoint(pc);\r\n  }\r\n\r\n  setAssembled(text) {\r\n    if (this.editor == null) return;\r\n    if (typeof text !== 'string') throw new Error('Text isnt string');\r\n    \r\n    let linesCount = text.split('\\n').length;\r\n    let newBreakpointPCs = Array.from(this.pcBreakpoints).filter(pc => pc / 2 < linesCount);\r\n    this.editor.setValue(text);\r\n    this.setBreakpoints(newBreakpointPCs);\r\n    this.setCurrentPC(0);\r\n  }\r\n\r\n  setCurrentPC(pc) {\r\n    if (this.editor == null) return;\r\n    \r\n    let lineNumber = pc / 2 + 1;\r\n    let lineCount = this.editor.getModel().getLineCount();\r\n    if (lineNumber <= 0 || lineNumber > lineCount) {\r\n      this.curLineRunningDecoration = [];\r\n    } else {\r\n      this.curLineRunningDecoration = [\r\n        {\r\n          range: new this.monaco.Range(lineNumber, 1, lineNumber, 1),\r\n          options: {\r\n            isWholeLine: true,\r\n            className: styles.currentLineRunning,\r\n          }\r\n        }\r\n      ];\r\n      this.editor.revealLine(lineNumber);\r\n    }\r\n\r\n    let oldDec = this.curLineRunningDecorationId ? this.curLineRunningDecorationId : [];\r\n    this.curLineRunningDecorationId = this.editor.deltaDecorations(oldDec, this.curLineRunningDecoration);\r\n  }\r\n\r\n\tonEditorMount(editor, monaco) {\r\n\t\tthis.editor = editor;\r\n    this.monaco = monaco;\r\n\r\n\t\tlet self = this;\r\n\t\tthis.editor.updateOptions({\r\n\t\t\twordBasedSuggestions: false,\r\n\t\t\tautomaticLayout: true,\r\n\t\t\tlineDecorationsWidth: 0,\r\n\t\t\tglyphMargin: true,\r\n\t\t\tminimap: {\r\n\t\t\t\tenabled: false,\r\n\t\t\t},\r\n\t\t\tlineNumbers: (n) => ((n-1)*2).toString(16).padStart(4, '0'),\r\n\t\t\treadOnly: true,\r\n\t\t});\r\n\t\t\r\n\t\tthis.editor.onMouseDown((e) => {\r\n\t\t\tlet { target: { type, position: { lineNumber } } } = e;\r\n\t\t\tif (type !== GUTTER_GLYPH_MARGIN) return;\r\n\t\t\tlet pc = (lineNumber - 1) * 2;\r\n\t\t\tself.toggleBreakpoint(pc);\r\n\t\t});\r\n\t}\r\n\r\n  render() { \r\n    return (\r\n      <div className={styles.container}>\r\n        <div className={styles.title}>Disassembly</div>\r\n        <Editor\r\n          className={styles.editor}\r\n          language='vikingAsm'\r\n          theme='vikinAsmTheme'\r\n          onMount={this.onEditorMount.bind(this)}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n \r\nexport default Assembled;","import React, { Component, createRef } from \"react\";\r\nimport { useResizeDetector } from \"react-resize-detector\";\r\nimport styles from './MemoryViewer.module.css'\r\n\r\nclass MemoryViewer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    if (!props.memory) throw new Error('props.memory null');\r\n\r\n    this.memory = props.memory;\r\n\r\n    this.tbodyRef = createRef();\r\n    this.memoryScrollRef = createRef();\r\n    this.memoryScrollAuxRef = createRef();\r\n    this.memoryAreaRef = createRef();\r\n\r\n    this.columns = 8;\r\n    this.rowsToShow = 32;\r\n    this.rows = 0;\r\n    this.dataItemBytes = 2;\r\n    this.scrollHeight = 0;\r\n    this.scrollTop = 0;\r\n    this.rowOffset = 0;\r\n    this.wordHighlightContexts = {};\r\n\r\n    this.state = {  }\r\n  }\r\n\r\n  componentDidMount() {\r\n    \r\n    // Request data count\r\n    let dataCount = null;\r\n    while(dataCount == null) dataCount = this.getDataCount();\r\n    this.rows = dataCount / this.columns / this.dataItemBytes;\r\n\r\n    // Setup scroll\r\n    this.scrollHeight = this.rows;\r\n    this.setScrollHeight(this.scrollHeight);\r\n\r\n    // Get initial data\r\n    let data = this.getData();\r\n    this.recreateTable(data);\r\n\r\n    // scroll logic\r\n    this.memoryAreaRef.current.onwheel = (e) => {\r\n      this.memoryScrollRef.current.scrollTop += e.deltaY > 0 ? 1 : -1;\r\n      e.preventDefault();\r\n    }\r\n    this.memoryScrollRef.current.onscroll = async (e) => {\r\n      this.scrollTop = this.memoryScrollRef.current.scrollTop;\r\n      this.rowOffset = Math.floor((this.rows - this.rowsToShow) * (this.scrollTop / (this.scrollHeight - this.memoryScrollRef.current.getBoundingClientRect().height)));\r\n      let data = this.getData();\r\n      this.recreateTable(data);\r\n      this.wordHighlightContexts = {};\r\n      e.preventDefault();\r\n    }\r\n\r\n    // Memory Handlers\r\n\r\n    this.onResetHandler = this.reset.bind(this);\r\n\r\n    this.onStorageWriteByteHandler = (address, byte) => {\r\n      if (address >= this.dataOffset && address < this.dataOffset + this.dataCount) {\r\n        this.updateByteAt(address, byte);\r\n      }\r\n    };\r\n    \r\n    this.onStorageWriteWordHandler = (address, word) => {\r\n      if (address >= this.dataOffset && address < this.dataOffset + this.dataCount) {\r\n        this.updateByteAt(address, (word >> 8) & 0xFF);\r\n        this.updateByteAt(address + 1, word & 0xFF);\r\n      }\r\n    };\r\n    \r\n    this.memory.on('reset', this.onResetHandler);\r\n    this.memory.on('storage write byte', this.onStorageWriteByteHandler);\r\n    this.memory.on('storage write word', this.onStorageWriteWordHandler);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.memory.off('reset', this.onResetHandler);\r\n    this.memory.off('storage write byte', this.onStorageWriteByteHandler);\r\n    this.memory.off('storage write word', this.onStorageWriteWordHandler);\r\n  }\r\n\r\n  updateByteAt(address, byte) {\r\n    let tbyteDiv = this.getByteElem(address);\r\n    tbyteDiv.textContent = byte.toString(16).padStart(2, '0');\r\n    this.highlightByte(address, tbyteDiv);\r\n  }\r\n    \r\n  getByteElem(address) {\r\n    let item = Math.floor(address / this.dataItemBytes);\r\n    let offset = address % this.dataItemBytes;\r\n\r\n    let column = item % this.columns;\r\n    let row = Math.floor(item / this.columns) - this.rowOffset;\r\n    \r\n    let tRow = this.tbodyRef.current.childNodes[row+1];\r\n    let tItem = tRow.childNodes[column+1];\r\n    let tbyteDiv = tItem.childNodes[offset];\r\n    return tbyteDiv;\r\n  }\r\n\r\n  highlightByte(address, elem) {\r\n    let ctx = this.wordHighlightContexts[address];\r\n    if (ctx) {\r\n      ctx.value = 1;\r\n    } else {\r\n      ctx = { value: 1 };\r\n      this.wordHighlightContexts[address] = ctx;\r\n\r\n      let id = setInterval(() => {\r\n        if (ctx.value <= 0) {\r\n          elem.style['background-color'] = 'rgba(255,0,0,0)';\r\n          clearInterval(id);\r\n          delete this.wordHighlightContexts[address];\r\n        } else {\r\n          elem.style['background-color'] = 'rgba(255,0,0,' + ctx.value + ')';\r\n          ctx.value -= 0.05;\r\n        }\r\n      }, 50);\r\n    }\r\n  }\r\n\r\n  setScrollHeight(height) {\r\n    this.memoryScrollAuxRef.current.style.height = height + 'px';\r\n  }\r\n  \r\n  handleHeight(height) {\r\n    if (this.tbodyRef.current === null) return;\r\n    if (this.tbodyRef.current.childNodes.length === 0) return;\r\n    let firstRow = this.tbodyRef.current.childNodes[0];\r\n    let rowHeight = firstRow.getBoundingClientRect().height;\r\n    let newRowsToShow = Math.floor(height / rowHeight) - 1;\r\n    if (newRowsToShow <= 0) return;\r\n    if (this.rowsToShow === newRowsToShow) return;\r\n    this.rowsToShow = newRowsToShow;\r\n    this.recreateTable(this.getData());\r\n  }\r\n\r\n  recreateTable(data) {\r\n    if (this.tbodyRef.current == null) return;\r\n\r\n    let rowsCount = Math.ceil(data.length / this.columns);\r\n    \r\n    let html = '';\r\n    html += '<tr>';\r\n    html += '<td>';\r\n    html += 'X';\r\n    html += '</td>';\r\n    for (let x = 0; x < this.columns * this.dataItemBytes; x += this.dataItemBytes) {\r\n      html += '<td class=\"' + styles.memoryColumnNumber + '\">';\r\n      html += x.toString(16).padStart(4, '0');\r\n      html += '</td>';\r\n    }\r\n    html += '</tr>';\r\n    \r\n    let _x = 0;\r\n    for (let y = 0; y < rowsCount; y++) {\r\n      html += '<tr>';\r\n      html += '<td class=\"' + styles.memoryRowNumber + '\">';\r\n      html += (this.rowOffset * this.dataItemBytes * this.columns + y * this.dataItemBytes * this.columns).toString(16).padStart(4, '0');\r\n      html += '</td>';\r\n      \r\n      for (let x = 0; x < this.columns; x++) {\r\n        let item = data[y * this.columns + x];\r\n        let memDataHtml = '';\r\n        for (let i = 0; i < this.dataItemBytes; i++) {\r\n          let byte = item & 0xFF;\r\n          item >>= 8;\r\n          memDataHtml = '<div style=\"display:inline\">' + byte.toString(16).padStart(2, '0') + '</div>' + memDataHtml;\r\n        }\r\n        html += '<td class=\"' + styles.memoryData + '\">' + memDataHtml + '</td>';\r\n      }\r\n      html += '</tr>';\r\n      if (_x === this.columns) {\r\n          _x = 0;\r\n      }\r\n    }\r\n\r\n    this.tbodyRef.current.innerHTML = html;\r\n  }\r\n\r\n  reset() {\r\n    for (let i = this.dataOffset; i < this.dataOffset + this.dataCount; i++) {\r\n      let tbyteDiv = this.getByteElem(i);\r\n      tbyteDiv.textContent = '00';\r\n    }\r\n  }\r\n\r\n  getDataCount() {\r\n    return this.memory.getMemoryRegions().io;\r\n  }\r\n\r\n  getData() {\r\n    this.dataOffset = this.rowOffset * this.columns * 2;\r\n    this.dataCount = this.columns * this.rowsToShow * 2;\r\n    let data = this.memory.getWordsFromRange(this.dataOffset, this.dataOffset + this.dataCount);\r\n    return data;\r\n  }\r\n\r\n  render() { \r\n    const MemoryArea = () => {\r\n      const { height, ref } = useResizeDetector();\r\n      return (\r\n        <div ref={ref} className={styles.memoryAreaContainer}>\r\n          {this.handleHeight(height)}\r\n          <table className={styles.memoryArea} ref={this.memoryAreaRef}>\r\n            <tbody ref={this.tbodyRef}></tbody>\r\n          </table>\r\n        </div>\r\n      );\r\n    };\r\n    return (\r\n      <div className={styles.container}>\r\n        <div className={styles.content}>\r\n          <div className={styles.memoryScroll} ref={this.memoryScrollRef}><div ref={this.memoryScrollAuxRef}></div></div>\r\n          <MemoryArea />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n \r\nexport default MemoryViewer;","import { EventEmitter } from 'events';\r\n\r\nexport default class Port extends EventEmitter {\r\n  constructor(name, readHandler, writeHandler, device) {\r\n    super();\r\n    this.name = name;\r\n    this.waitingRead = false;\r\n    this.waitingWrite = false;\r\n    this.readHandler = readHandler ? readHandler : ()=>0;\r\n    this.writeHandler = writeHandler ? writeHandler : ()=>null;\r\n    this.device = device;\r\n  }\r\n\r\n  reset() {\r\n    this.waitingRead = false;\r\n    this.waitingWrite = false;\r\n  }\r\n\r\n  read(simulation) {\r\n    return this.readHandler(simulation);\r\n  }\r\n  \r\n  write(simulation, value) {\r\n    return this.writeHandler(simulation, value);\r\n  }\r\n\r\n  endReadWaiting() {\r\n    this.waitingRead = false;\r\n    this.emit('read wait end');\r\n  }\r\n  \r\n  endWriteWaiting() {\r\n    this.waitingWrite = false;\r\n    this.emit('write wait end');\r\n  }\r\n}","import { EventEmitter } from 'events';\r\n\r\nexport default class Device extends EventEmitter {\r\n  \r\n  constructor(name) {\r\n    super();\r\n    this.name = name;\r\n    this._waiting = false;\r\n  }\r\n\r\n  get waiting() { return this._waiting }\r\n  set waiting(value) {\r\n    if (value === this._waiting) return;\r\n    this._waiting = value;\r\n    this.emit('waiting', value);\r\n  }\r\n\r\n  reset() {\r\n\r\n  }\r\n\r\n  getPorts() {\r\n    return [];\r\n  }\r\n}","import utils from '../../../../../utils';\r\nimport Port from '../port';\r\nimport Device from './device';\r\n\r\nexport default class ConsoleDevice extends Device {\r\n  constructor() {\r\n    super('console');\r\n    \r\n    this.inputBytes = [];\r\n\r\n    this.readCharPort = new Port('readc', this.readChar.bind(this), null, this);\r\n    this.readIntPort = new Port('readi', this.readInt.bind(this), null, this);\r\n    this.writeCharPort = new Port('writec', null, this.writeChar.bind(this), this);\r\n    this.writeIntPort = new Port('writei', null, this.writeInt.bind(this), this);\r\n\r\n    this.ports = [ this.writeCharPort, this.writeIntPort, this.readCharPort, this.readIntPort ];\r\n  }\r\n\r\n  get waiting() { return this._waiting }\r\n  set waiting(value) {\r\n    if (value === this._waiting) return;\r\n    this._waiting = value;\r\n    this.emit('waiting', value);\r\n  }\r\n\r\n  readInt(simulation) {\r\n    if (this.inputBytes.length === 0) {\r\n      this.readIntPort.waitingRead = true;\r\n      this.waiting = true;\r\n      return;\r\n    }\r\n    let zeroCharCode = '0'.charCodeAt(0);\r\n    let nineCharCode = '9'.charCodeAt(0);\r\n    let minusCharCode = '-'.charCodeAt(0);\r\n\r\n    function isMinusChar(c) {\r\n      return minusCharCode === c;\r\n    }\r\n\r\n    function isNumberChar(c) {\r\n      return c >= zeroCharCode && c <= nineCharCode;\r\n    }\r\n\r\n    function charToNumber(c) {\r\n      return c - zeroCharCode;\r\n    }\r\n\r\n    let int = 0;\r\n    let firstC = this.nextByte();\r\n    if (isNumberChar(firstC) || isMinusChar(firstC)) {\r\n      if (isNumberChar(firstC)) {\r\n        int = charToNumber(firstC);\r\n      }\r\n\r\n      let length = this.inputBytes.length;\r\n      for (let i = 0; i < length; i++) {\r\n        let c = this.nextByte();\r\n        if (isNumberChar(c)) {\r\n          let number = charToNumber(c);\r\n          int *= 10;\r\n          int += number;\r\n        } else {\r\n          if (c === 0) {\r\n            this.nextByte();\r\n          }\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (isMinusChar(firstC)) {\r\n        int *= -1;\r\n      }\r\n    } else {\r\n      // lê os bytes do inputs até acabar ou até o byteWidth da arquitetura\r\n      // se o input tiver 1 byte e o byteWidth da arquitetura for 2 bytes, 16 bits, vai ler apenas 1 byte\r\n      // se o input tiver 5 bytes e o byteWidth da arquitetura for 2 bytes, vai ler apenas 2 bytes\r\n      int = firstC;\r\n      let length = Math.min(simulation.architecture.getByteWidth() - 1, this.inputBytes.length);\r\n      for (let i = 0; i < length; i++) {\r\n        let c = this.nextByte();\r\n        int = (int << 8) | c;\r\n      }\r\n    }\r\n    \r\n    return int;\r\n  }\r\n  \r\n  readChar(simulation) {\r\n    if (this.inputBytes.length === 0) {\r\n      this.readCharPort.waitingRead = true;\r\n      this.waiting = true;\r\n      return;\r\n    }\r\n    return this.nextByte();\r\n  }\r\n\r\n  writeInt(simulation, value) {\r\n    this.emit('write int', utils.unsignedToSigned(value));\r\n  }\r\n  \r\n  writeChar(simulation, value) {\r\n    if (value === 0) return;\r\n    this.emit('write char', String.fromCharCode(value));\r\n  }\r\n\r\n  reset() {\r\n    this.inputBytes.length = 0;\r\n    this.emit('input buffer', this.inputBytes);\r\n    this.waiting = false;\r\n  }\r\n\r\n  nextByte() {\r\n    let byte = this.inputBytes.shift();\r\n    this.emit('input buffer', this.inputBytes);\r\n    return byte;\r\n  }\r\n  \r\n  addBytes(bytes) {\r\n    for (let byte of bytes) this.inputBytes.push(byte & 0xFF);\r\n    this.emit('input buffer', this.inputBytes);\r\n    if (this.readCharPort.waitingRead) {\r\n      this.readCharPort.endReadWaiting();\r\n      this.waiting = false;\r\n    }\r\n    if (this.readIntPort.waitingRead) {\r\n      this.readIntPort.endReadWaiting();\r\n      this.waiting = false;\r\n    }\r\n  }\r\n\r\n  getPorts() {\r\n    return this.ports;\r\n  }\r\n}","import Port from '../port';\r\nimport Device from './device';\r\n\r\nexport default class CanvasDevice extends Device {\r\n  constructor() {\r\n    super('canvas');\r\n\r\n    this.x = 0;\r\n    this.y = 0;\r\n    this.p1X = 0;\r\n    this.p1Y = 0;\r\n    this.p2X = 0;\r\n    this.p2Y = 0;\r\n\r\n    this.setXPort = new Port('setX', null, this.setX.bind(this), this);\r\n    this.setYPort = new Port('setY', null, this.setY.bind(this), this);\r\n    this.drawPixelPort = new Port('drawPixel', null, this.drawPixel.bind(this), this);\r\n    this.clearPixelPort = new Port('clearPixel', null, this.clearPixel.bind(this), this);\r\n    this.setP1Port = new Port('setP1', null, this.setP1.bind(this), this);\r\n    this.setP2Port = new Port('setP2', null, this.setP2.bind(this), this);\r\n    this.drawLinePort = new Port('drawLine', null, this.drawLine.bind(this), this);\r\n    this.clearLinePort = new Port('clearLine', null, this.clearLine.bind(this), this);\r\n    this.clearPort = new Port('clear', null, this.clear.bind(this), this);\r\n\r\n    this.ports = [\r\n      this.setXPort,\r\n      this.setYPort,\r\n      this.drawPixelPort,\r\n      this.clearPixelPort,\r\n      this.setP1Port,\r\n      this.setP2Port,\r\n      this.drawLinePort,\r\n      this.clearLinePort,\r\n      this.clearPort,\r\n    ];\r\n  }\r\n\r\n  setX(simulation, value) {\r\n    this.x = value;\r\n  }\r\n  \r\n  setY(simulation, value) {\r\n    this.y = value;\r\n  }\r\n\r\n  drawPixel(simulation, value) {\r\n    this.emit('draw pixel', this.x, this.y);\r\n  }\r\n  \r\n  clearPixel(simulation, value) {\r\n    this.emit('clear pixel', this.x, this.y);\r\n  }\r\n\r\n  setP1(simulation, value) {\r\n    this.p1X = this.x;\r\n    this.p1Y = this.y;\r\n  }\r\n  \r\n  setP2(simulation, value) {\r\n    this.p2X = this.x;\r\n    this.p2Y = this.y;\r\n  }\r\n\r\n  drawLine(simulation, value) {\r\n    this.emit('draw line', this.p1X, this.p1Y, this.p2X, this.p2Y);\r\n  }\r\n  \r\n  clearLine(simulation, value) {\r\n    this.emit('clear line', this.p1X, this.p1Y, this.p2X, this.p2Y);\r\n  }\r\n\r\n  clear(simulation, value) {\r\n    this.emit('clear');\r\n  }\r\n  \r\n  reset() {\r\n    this.emit('reset');\r\n  }\r\n\r\n  getPorts() {\r\n    return this.ports;\r\n  }\r\n}","import { Component, createRef } from 'react';\r\nimport styles from './CanvasViewer.module.css';\r\n\r\nconst fillColor = '#111111'\r\nconst clearColor = '#dddddd'\r\n\r\nclass CanvasViewer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    if (!props.canvasDevice) throw new Error('props.canvasDevice null');\r\n\r\n    this.canvasDevice = props.canvasDevice;\r\n    \r\n    this.canvasRef = createRef();\r\n\r\n    this.state = {  }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.ctx = this.canvasRef.current.getContext('2d');\r\n    this.ctx.imageSmoothingEnabled = false;\r\n\r\n    this.width = this.canvasRef.current.width;\r\n    this.height = this.canvasRef.current.width;\r\n\r\n    this.resetHandler = this.reset.bind(this);\r\n    \r\n    this.clearHandler = () => {\r\n      this.ctx.fillStyle = clearColor;\r\n      this.ctx.fillRect(0, 0, this.width, this.height);\r\n    };\r\n\r\n    this.drawPixelHandler = (x, y) => {\r\n      this.ctx.fillStyle = fillColor;\r\n      this.ctx.fillRect(x, y, 1, 1);\r\n    }\r\n    \r\n    this.clearPixelHandler = (x, y) => {\r\n      this.ctx.fillStyle = clearColor;\r\n      this.ctx.fillRect(x, y, 1, 1);\r\n    }\r\n    \r\n    this.drawLineHandler = (x0, y0, x1, y1) => {\r\n      this.ctx.fillStyle = fillColor;\r\n      lineAlg(x0, y0, x1, y1, (x, y)=>this.ctx.fillRect(x, y, 1, 1));\r\n    }\r\n    \r\n    this.clearLineHandler = (x0, y0, x1, y1) => {\r\n      this.ctx.fillStyle = clearColor;\r\n      lineAlg(x0, y0, x1, y1, (x, y)=>this.ctx.fillRect(x, y, 1, 1));\r\n    }\r\n\r\n    function lineAlg(x0, y0, x1, y1, onpixel) {\r\n      let dx = Math.abs(x1 - x0), sx = x0 < x1 ? 1 : -1;\r\n      let dy = Math.abs(y1 - y0), sy = y0 < y1 ? 1 : -1; \r\n      let err = (dx>dy ? dx : -dy)/2;        \r\n      while (true) {\r\n        onpixel(x0, y0);\r\n        if (x0 === x1 && y0 === y1) break;\r\n        let e2 = err;\r\n        if (e2 > -dx) { err -= dy; x0 += sx; }\r\n        if (e2 < dy) { err += dx; y0 += sy; }\r\n      }\r\n    }\r\n\r\n    this.canvasDevice.on('draw pixel', this.drawPixelHandler);\r\n    this.canvasDevice.on('clear pixel', this.clearPixelHandler);\r\n    this.canvasDevice.on('draw line', this.drawLineHandler);\r\n    this.canvasDevice.on('clear line', this.clearLineHandler);\r\n    this.canvasDevice.on('reset', this.resetHandler);\r\n    this.canvasDevice.on('clear', this.clearHandler);\r\n\r\n    this.reset();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.canvasDevice.off('draw pixel', this.drawPixelHandler);\r\n    this.canvasDevice.off('clear pixel', this.clearPixelHandler);\r\n    this.canvasDevice.off('draw line', this.drawLineHandler);\r\n    this.canvasDevice.off('clear line', this.clearLineHandler);\r\n    this.canvasDevice.off('reset', this.resetHandler);\r\n    this.canvasDevice.off('clear', this.clearHandler);\r\n  }\r\n\r\n  reset() {\r\n    this.ctx.fillStyle = clearColor;\r\n    this.ctx.fillRect(0, 0, this.width, this.height);\r\n  }\r\n\r\n  render() { \r\n    return (\r\n      <div className={styles.container}>\r\n        <div className={styles.titleContainer}>Canvas<div className={styles.new}>new</div></div>\r\n        <div className={styles.canvasContainer}>\r\n          <canvas width=\"16\" height=\"16\" className={styles.canvas} ref={this.canvasRef} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n \r\nexport default CanvasViewer;","import styles from './Simulator.module.css'\r\nimport { Component, createRef } from 'react';\r\nimport Registers from '../registers/Registers.module';\r\nimport Memory from '../../business/asm/simulator/memory';\r\nimport architectureManager from '../../business/asm/architectureManager';\r\nimport RegisterBank from '../../business/asm/simulator/registerBank';\r\nimport Simulation from '../../business/asm/simulator/simulation';\r\nimport pseudoManager from '../../business/asm/pseudoInstructionConversions/pseudoManager';\r\nimport PseudoConverter from '../../business/asm/pseudoInstructionConversions/pseudoConverter';\r\nimport Assembler from '../../business/asm/assembler/assembler';\r\nimport Disassembler from '../../business/asm/disassembler/disassembler';\r\n// eslint-disable-next-line\r\nimport asm from '../../business/index';\r\nimport Program from '../program/Program.module';\r\nimport SymbolTable from '../symbolTable/SymbolTable.module';\r\nimport Control from '../control/Control.module';\r\nimport Console from '../console/Console.module';\r\nimport Assembled from '../assembled/Assembled.module';\r\nimport MemoryViewer from '../memoryViewer/MemoryViewer.module';\r\nimport utils from '../../utils';\r\nimport ConsoleDevice from '../../business/asm/simulator/io/devices/consoleDevice';\r\nimport CanvasDevice from '../../business/asm/simulator/io/devices/canvasDevice';\r\nimport CanvasViewer from '../canvasViewer/CanvasViewer.module';\r\nimport Home from '../home/Home.module';\r\n\r\nconst defaultProgramData =\r\n`main\r\n\tldi\tr4, str\r\nloop\r\n\tldb\tr2, r4\r\n\tstw\tr2, 0xf000 // Write char IO\r\n\tadd\tr4, 1\r\n\tbnz\tr2, loop\r\n\thcf\r\n\r\nstr\t\"hello world!\"`;\r\n\r\nclass Simulator extends Component {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.programRef = createRef();\r\n\t\tthis.assembledRef = createRef();\r\n\t\tthis.symbolTableRef = createRef();\r\n\t\tthis.registersRef = createRef();\r\n\t\tthis.controlRef = createRef();\r\n\t\tthis.consoleRef = createRef();\r\n\r\n\t\tthis.curArchitecture = architectureManager.getViking16Arch();\r\n\t\tthis.memory = Memory.createFromArchitecture(this.curArchitecture);\r\n\t\tthis.registerBank = RegisterBank.createFromArchitecture(this.curArchitecture);\r\n\t\tthis.simulation = new Simulation(this.curArchitecture, this.memory, this.registerBank);\r\n\t\t\r\n\t\tthis.consoleDevice = new ConsoleDevice();\r\n\t\tthis.canvasDevice = new CanvasDevice();\r\n\t\tthis.simulation.registerPorts(this.consoleDevice.getPorts());\r\n\t\tthis.simulation.registerPorts(this.canvasDevice.getPorts());\r\n\r\n\t\tthis.state = { };\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.simulationOnRunErrorHandler = (error) => {\r\n\t\t\tthis.consoleRef.current.writeLine('[Error | Simulation] ' + error.message, 2);\r\n\t\t};\r\n\t\t\r\n\t\tthis.simulationOnRunEndedHandler = () => {\r\n\t\t\tthis.consoleRef.current.writeLine('[Info | Simulation] run ended.', 1);\r\n\t\t};\r\n\t\t\r\n\t\tthis.simulationOnBreakpointHandler = (pc) => {\r\n\t\t\tthis.consoleRef.current.writeLine('[Info | Simulation] breakpoint at PC=' + pc.toString(16), 1);\r\n\t\t};\r\n\t\t\r\n    this.simulationPcUpdateHandler = utils.callLimiter((pc) => {\r\n      this.assembledRef.current.setCurrentPC(pc);\r\n\t\t\tthis.registersRef.current.setPC(pc);\r\n    }, 20);\r\n\t\t\r\n    this.simulationCyclesUpdateHandler = utils.callLimiter((cycles) => {\r\n      this.controlRef.current.setCycles(cycles);\r\n    }, 50);\r\n\t\t\r\n    this.simulationResetHandler = () => {\r\n      this.consoleDevice.reset();\r\n\t\t\tthis.canvasDevice.reset();\r\n    };\r\n\t\t\r\n    this.simulation.setBreakpointHandler((_, pc) => {\r\n      return this.assembledRef.current.hasBreakpoint(pc);\r\n    });\r\n\r\n\t\tthis.simulation.on('run error', this.simulationOnRunErrorHandler);\r\n\t\tthis.simulation.on('run ended', this.simulationOnRunEndedHandler);\r\n\t\tthis.simulation.on('breakpoint', this.simulationOnBreakpointHandler);\r\n    this.simulation.on('pc update', this.simulationPcUpdateHandler);\r\n    this.simulation.on('cycles update', this.simulationCyclesUpdateHandler);\r\n    this.simulation.on('reset', this.simulationResetHandler);\r\n\r\n\t\tthis.loadAsmCode();\r\n\r\n\t\tHome.instance.spawnWindow('MemView', 'Memory Viewer', 410, 450, <MemoryViewer memory={this.memory} />);\r\n\t}\r\n\r\n\tcomponentWillUnmount() {\r\n\t\tthis.simulation.off('run error', this.simulationOnRunErrorHandler);\r\n\t\tthis.simulation.off('run ended', this.simulationOnRunEndedHandler);\r\n\t\tthis.simulation.off('breakpoint', this.simulationOnBreakpointHandler);\r\n    this.simulation.off('pc update', this.simulationPcUpdateHandler);\r\n    this.simulation.off('cycles update', this.simulationCyclesUpdateHandler);\r\n    this.simulation.off('reset', this.simulationResetHandler);\r\n\t}\r\n\r\n\tloadAsmCode() {\r\n\t\tconsole.log('Load asm code');\r\n\t\tlet asmCode = localStorage.getItem('asmCode');\r\n\t\tif (asmCode) {\r\n\t\t\tthis.loadSaved();\r\n\t\t} else {\r\n\t\t\tthis.loadDefault();\r\n\t\t}\r\n\t}\r\n\r\n\tassemble() {\r\n\t\tlet programData = this.programRef.current.getText();\r\n\t\ttry {\r\n\t\t\tlet ioPortSymbolTable = this.simulation.getPortsSymbolTable();\r\n\r\n\t\t\tlet pseudoInstructions = pseudoManager.getPseudoInstructions();\r\n\t\t\tlet pseudoConverter = new PseudoConverter(pseudoInstructions);\r\n\r\n\t\t\tlet assembler = new Assembler(this.curArchitecture, programData, pseudoConverter);\r\n\t\t\tassembler.addExtraSymbolTable(ioPortSymbolTable);\r\n\t\t\tlet assemblerResult = assembler.assemble();\r\n\t\t\tthis.curAssembleResult = assemblerResult;\r\n\r\n\t\t\tlet disassembler = new Disassembler(this.curArchitecture);\r\n\t\t\tlet disassemblerResult = disassembler.disassemble(assemblerResult.rawObjectCode);\r\n\r\n\t\t\tlet { symbolTable } = assemblerResult;\r\n\t\t\tlet disassembly = disassemblerResult.map(x => ({value: x.value, pc: x.pc, code: x.code}) );\r\n\r\n\t\t\tlet result = { symbolTable, disassembly };\r\n\r\n\t\t\tthis.simulation.setRawObjCode(assemblerResult.rawObjectCode);\r\n\t\t\tthis.simulation.reset();\r\n\r\n\t\t\tthis.assembledRef.current.setAssembled(result.disassembly.map(x => x.value).join('\\n'));\r\n\t\t\tthis.symbolTableRef.current.setSymbolTable(symbolTable);\r\n\t\t\tthis.consoleRef.current.writeLine('[Info | Assembler] Successfully assembled', 1);\r\n\r\n\t\t\treturn result;\r\n\t\t} catch (exc) {\r\n\t\t\tconsole.error(exc);\r\n\t\t\tthis.consoleRef.current.writeLine('[Error | Assembler] ' + exc.message, 2);\r\n\t\t}\r\n\t}\r\n\t\r\n\tasync run() {\r\n\t\tif (this.simulation.isRunning()) return;\r\n\t\t\r\n\t\t// If simulation is already ended -> reset\r\n\t\tif (this.simulation.hasEnded()) {\r\n\t\t\tthis.simulation.reset();\r\n\t\t\tawait utils.sleep(100);\r\n\t\t}\r\n\r\n\t\t// If auto-assemble & program changed, assemble\r\n\t\tlet curText = this.programRef.current.getText();\r\n\t\tif (this.controlRef.current.getAutoAssemble()) {\r\n\t\t\tif (this.lastText !== curText) {\r\n\t\t\t\tif (!this.assemble()) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.lastText = curText;\r\n\t\t}\r\n\t\t\r\n\t\ttry {\r\n\t\t\tthis.simulation.run();\r\n\t\t} catch (exc) {\r\n\t\t\tthis.consoleRef.current.writeLine('[Error | Simulation] ' + exc.message, 2);\r\n\t\t}\r\n\t}\r\n\r\n\tpause() {\r\n\t\ttry {\r\n\t\t\tthis.simulation.stop();\r\n\t\t} catch (exc) {\r\n\t\t\tthis.consoleRef.current.writeLine('[Error | Simulation] ' + exc.message, 2);\r\n\t\t}\r\n\t}\r\n\t\r\n\tstep() {\r\n\t\ttry {\r\n\t\t\tthis.simulation.step();\r\n\t\t} catch (exc) {\r\n\t\t\tthis.consoleRef.current.writeLine('[Error | Simulation] ' + exc.message, 2);\r\n\t\t}\r\n\t}\r\n\t\r\n\treset() {\r\n\t\ttry {\r\n\t\t\tthis.simulation.reset();\r\n\t\t} catch (exc) {\r\n\t\t\tthis.consoleRef.current.writeLine('[Error | Simulation] ' + exc.message, 2);\r\n\t\t}\r\n\t}\r\n\r\n\tonStepIntervalChanged(stepInterval) {\r\n\t\tthis.simulation.setStepInterval(stepInterval);\r\n\t}\r\n\r\n\tonSymbolNameClick(symbol) {\r\n\t\tif (this.curAssembleResult == null) return;\r\n\t\tlet additionInfo = this.curAssembleResult.additionalInfos.find(x => x && x.parsed && x.parsed.symbol === symbol.symbolName);\r\n\t\tif (additionInfo == null) return;\r\n\t\tlet { lineNumber } = additionInfo;\r\n\t\tthis.programRef.current.highlightLine(lineNumber);\r\n\t}\r\n\t\r\n\tonSymbolValueClick(symbol) {\r\n\t\tthis.assembledRef.current.setCurrentPC(symbol.symbolValue);\r\n\t}\r\n\r\n\tsave(code) {\r\n\t\ttry {\r\n\t\t\tlocalStorage.setItem('asmCode', code);\r\n\t\t\treturn true;\r\n\t\t} catch (exc) {\r\n\t\t\tconsole.error(exc);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\tloadSaved() {\r\n\t\tlet asmCode = localStorage.getItem('asmCode');\r\n\t\tthis.programRef.current.setText(asmCode);\r\n\t}\r\n\r\n\tloadDefault() {\r\n\t\tthis.programRef.current.setText(defaultProgramData);\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst components = {\r\n\t\t\tsym: (\r\n\t\t\t\t<SymbolTable\r\n\t\t\t\t\tarchitecture={this.curArchitecture}\r\n\t\t\t\t\tonSymbolNameClick={this.onSymbolNameClick.bind(this)}\r\n\t\t\t\t\tonSymbolValueClick={this.onSymbolValueClick.bind(this)}\r\n\t\t\t\t\tref={this.symbolTableRef} />\r\n\t\t\t),\r\n\t\t\tprog: (\r\n\t\t\t\t<Program\r\n\t\t\t\t\tcurArchitecture={this.curArchitecture}\r\n\t\t\t\t\tportsSymbols={this.simulation.getPortsSymbolsList()}\r\n\t\t\t\t\tonSaveRequest={this.save.bind(this)}\r\n\t\t\t\t\tonLoadSavedRequest={this.loadSaved.bind(this)}\r\n\t\t\t\t\tonLoadDefaultRequest={this.loadDefault.bind(this)}\r\n\t\t\t\t\tref={this.programRef} />\r\n\t\t\t),\r\n\t\t\tasm: (\r\n\t\t\t\t<Assembled ref={this.assembledRef} />\r\n\t\t\t),\r\n\t\t\treg: (\r\n\t\t\t\t<Registers registerBank={this.registerBank} ref={this.registersRef} />\r\n\t\t\t),\r\n\t\t\tctr: (\r\n\t\t\t\t<Control\r\n\t\t\t\t\tonAssemble={this.assemble.bind(this)}\r\n\t\t\t\t\tonRun={this.run.bind(this)}\r\n\t\t\t\t\tonPause={this.pause.bind(this)}\r\n\t\t\t\t\tonStep={this.step.bind(this)}\r\n\t\t\t\t\tonReset={this.reset.bind(this)}\r\n\t\t\t\t\tonStepIntervalChanged={this.onStepIntervalChanged.bind(this)}\r\n\t\t\t\t\tref={this.controlRef} />\r\n\t\t\t),\r\n\t\t\tcon: (\r\n\t\t\t\t<Console consoleDevice={this.consoleDevice} ref={this.consoleRef} />\r\n\t\t\t),\r\n\t\t\tcan: (\r\n\t\t\t\t<CanvasViewer canvasDevice={this.canvasDevice} />\r\n\t\t\t),\r\n\t\t};\r\n\r\n\t\treturn (\r\n\t\t\t<div className={styles.container}>\r\n\t\t\t\t<div className={styles.top}>\r\n\t\t\t\t\t<div className={styles.programContainer}>{components.prog}</div>\r\n\t\t\t\t\t<div className={styles.assembledContainer}>{components.asm}</div>\r\n\t\t\t\t\t<div className={styles.symbolTableContainer}>{components.sym}</div>\r\n\t\t\t\t\t<div className={styles.registersControlArea}>{components.reg}{components.ctr}</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className={styles.bottom}>\r\n\t\t\t\t\t<div className={styles.consoleContainer}>{components.con}</div>\r\n\t\t\t\t\t<div className={styles.canvasContainer}>{components.can}</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Simulator;\r\n","import { Component, createRef } from \"react\";\r\nimport styles from './Window.module.css'\r\n\r\nclass Window extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.containerRef = createRef();\r\n\r\n    this.name = props.name || \"Window\";\r\n    this.description = props.description || \"This is a window!\";\r\n    this.props = props;\r\n\r\n    this.state = {\r\n      children: props.children,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.props.width) this.containerRef.current.style.width = this.props.width;\r\n    if (this.props.height) this.containerRef.current.style.height = this.props.height;\r\n  }\r\n  \r\n  render() { \r\n    return (\r\n      <div className={styles.container} ref={this.containerRef}>\r\n        <div className={`unselectable ${styles.header}`}>\r\n          <div className={styles.title}>{this.name}</div>-<div className={styles.description}>{this.description}</div>\r\n        </div>\r\n        <div className={styles.content}>\r\n          {this.state.children}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n \r\nexport default Window;","import styles from './Home.module.css'\r\nimport Simulator from \"../simulator/Simulator.module\";\r\nimport Window from '../window/Window.module';\r\nimport React, { Component, createRef } from 'react';\r\nclass Home extends Component {  \r\n  constructor(props) {\r\n    super(props);\r\n    Home.instance = this;\r\n    this.keyIndex = 0;\r\n    this.windowsContainerRef = createRef();\r\n    this.aboutRef = createRef();\r\n    this.windowObjs = [];\r\n    this.state = { };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.spawnWindow('Simulator', 'Viking CPU Simulator', 970, 710, <Simulator />);\r\n  }\r\n\r\n  closeAbout() {\r\n    this.aboutRef.current.remove();\r\n  }\r\n\r\n  spawnWindow(name, description, width, height, elem) {\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        let ref = createRef();\r\n        let window = <Window key={this.keyIndex++} name={name} description={description} width={width + 'px'} height={height + 'px'} ref={ref}>{elem}</Window>;\r\n        let winObj = {window, ref};\r\n        this.windowObjs.push(winObj);\r\n        this.setState({}, () => { resolve(winObj) });\r\n      } catch (exc) {\r\n        reject(exc);\r\n      }\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={styles.container}>\r\n        <div className={styles.windowsContainer} ref={this.windowsContainerRef}>\r\n          { this.windowObjs.map(x=>x.window) }\r\n        </div>\r\n        <div className={styles.aboutContainer} ref={this.aboutRef}>\r\n          <div>Developed by <a href=\"https://github.com/vanflux\">vanflux</a></div>\r\n          <div>Viking architecture by <a href=\"https://github.com/sjohann81\">sjohann81</a></div>\r\n          <div>Repo Link: <a href=\"https://github.com/vanflux/viking-sim-web\">viking-sim-web</a></div>\r\n          <button onClick={this.closeAbout.bind(this)}>Close This Pop-up</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n \r\nexport default Home;","import React, { Component } from 'react';\nimport { HashRouter, Route } from \"react-router-dom\";\nimport Home from '../home/Home.module';\nimport styles from './App.module.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { };\n  }\n\n  render() {\n    return (\n     <HashRouter basename='/'>\n      <div className={styles.container}>\n       <Route exact path=\"/\" component={Home} />\n      </div>\n     </HashRouter>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app/App.module';\nimport './styles.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}